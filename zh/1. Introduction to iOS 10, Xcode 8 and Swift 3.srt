1
00:00:00,401 --> 00:00:04,402
[MUSIC]

2
00:00:04,471 --> 00:00:07,239
斯坦福大学

3
00:00:07,308 --> 00:00:11,877
好的，欢迎参加 2017 年冬季学期斯坦福 CS193P 课程

4
00:00:13,481 --> 00:00:17,515
iOS 应用程序开发

5
00:00:17,584 --> 00:00:21,553
今天我们会讲讲本科的主要内容

6
00:00:21,622 --> 00:00:23,955
和上这门课之前你所需要具备的能力

7
00:00:24,024 --> 00:00:28,427
之后我会很快过一遍什么是 iOS，它由什么构成

8
00:00:28,496 --> 00:00:32,330
然后我会带大家做一个很完整的应用程序

9
00:00:32,399 --> 00:00:34,833
给你们展示一下开发 iOS 程序是什么感觉

10
00:00:34,902 --> 00:00:37,402
你们可以再决定

11
00:00:37,471 --> 00:00:40,738
究竟适不适合你。这门课我们主要会讲

12
00:00:40,807 --> 00:00:43,441
如何开发很酷的 app

13
00:00:43,510 --> 00:00:46,778
那就是我们在这里。为什么这些应用程序在iOS中

14
00:00:46,847 --> 00:00:48,947
很酷？好的原因有很多，好吗？

15
00:00:49,016 --> 00:00:50,982
其中一个原因是在你的口袋里，

16
00:00:51,051 --> 00:00:54,085
你可以把它们拿出来，展示给你的朋友在你的手机上，

17
00:00:54,154 --> 00:00:57,288
很多都是联网的，所以有一些社交

18
00:00:57,357 --> 00:01:00,525
应用程序可以带来很多的乐趣。

19
00:01:00,594 --> 00:01:03,595
此外，如果你决定把你的应用程序变成一个产品

20
00:01:03,663 --> 00:01:06,030
真的很容易通过应用商店把它交给客户。

21
00:01:06,099 --> 00:01:07,900
你不必把它包装在一个盒子里

22
00:01:07,968 --> 00:01:10,468
把它放在某个地方的架子上。你可以得到它

23
00:01:10,537 --> 00:01:12,971
真的很快而且你也会看到，

24
00:01:13,040 --> 00:01:16,608
今天甚至，很容易构建相当复杂的

25
00:01:16,677 --> 00:01:20,012
应用程序很快所以你得到很多即时的满足感

26
00:01:20,080 --> 00:01:22,548
从构建iOS应用程序。对于那些你在

27
00:01:22,616 --> 00:01:25,751
计算机科学也有这个巨大的好处，你是

28
00:01:25,819 --> 00:01:28,820
要看现实生活中的面向对象编程

29
00:01:28,889 --> 00:01:31,623
系统。而不仅仅是面向对象的编程，

30
00:01:31,691 --> 00:01:34,192
但是我们要在这门课中使用数据库

31
00:01:34,261 --> 00:01:37,362
图形和多媒体，多线程，动画，

32
00:01:37,430 --> 00:01:39,364
网络，所有这些事情。和

33
00:01:39,433 --> 00:01:40,932
你会在现实世界的环境中看到它。

34
00:01:41,001 --> 00:01:43,635
所以你在这些科目上参加了很多课程

35
00:01:43,704 --> 00:01:46,137
有时候你可能会有一点脱节

36
00:01:46,206 --> 00:01:47,472
这在现实世界中是什么样的，好吧，

37
00:01:47,541 --> 00:01:52,211
你会在这里看到这一切。先决条件，

38
00:01:52,279 --> 00:01:55,414
上这门课之前你所需要具备的能力

39
00:01:55,483 --> 00:01:57,282
这门课是面向对象编程。

40
00:01:57,350 --> 00:01:59,151
你必须知道面向对象编程，

41
00:01:59,219 --> 00:02:01,586
我不会在课上教

42
00:02:01,655 --> 00:02:04,289
你还不能只是听说过面向对象

43
00:02:04,358 --> 00:02:06,057
你必须有一些经验。

44
00:02:06,126 --> 00:02:09,260
所以这就是为什么在斯坦福CS106 A和

45
00:02:09,329 --> 00:02:12,131
B是一个硬性条件。你必须拿这两个，

46
00:02:12,199 --> 00:02:14,733
那些是面向对象的编程课程。

47
00:02:14,801 --> 00:02:16,535
那我只是想确保你有一些编程

48
00:02:16,603 --> 00:02:19,338
经验，所以要么你在外面做了一些事情

49
00:02:19,406 --> 00:02:22,608
或者您已经选修了CS107或CS108或CS110。

50
00:02:22,676 --> 00:02:25,310
CS108是一个特别重要的基础，

51
00:02:25,378 --> 00:02:27,646
那就是面向对象编程。

52
00:02:27,715 --> 00:02:29,614
所以如果你有机会选修CS108而且

53
00:02:29,683 --> 00:02:32,216
你还没有学过，是的

54
00:02:32,285 --> 00:02:35,520
那么下次再提供这个课的时候选修它，好吗？

55
00:02:35,588 --> 00:02:41,025
所以让我们来深入了解iOS中的内容。

56
00:02:41,094 --> 00:02:43,595
我把它分成四层。

57
00:02:43,664 --> 00:02:46,531
这些层大致接近硬件。

58
00:02:46,600 --> 00:02:49,968
然后靠近用户。从底层接近

59
00:02:50,037 --> 00:02:53,238
硬件，这其实是一个Unix操作系统，好吗？

60
00:02:53,306 --> 00:02:56,941
就像macOS一样，iOS是一个Unix操作系统

61
00:02:57,010 --> 00:02:59,444
底层。这些API都不是面向对象的

62
00:02:59,513 --> 00:03:01,280
他们基本上都是C，好吗？对于

63
00:03:01,348 --> 00:03:05,551
Unix几乎写在C中，这些API都在C.

64
00:03:05,619 --> 00:03:10,122
我们在这门在课中不会做这个工作，好吗？

65
00:03:10,190 --> 00:03:10,989
这是一个面向对象编程的课程，

66
00:03:11,057 --> 00:03:11,690
所以我们不会在那里做任何事情。

67
00:03:11,758 --> 00:03:14,659
所以还有另一层就是这个核心

68
00:03:14,728 --> 00:03:17,662
服务。有时人们将此称为基础（Foundation），

69
00:03:17,731 --> 00:03:21,333
但还有其他的东西在这层上，

70
00:03:21,401 --> 00:03:24,836
除了基础（Foundation）。而这是一个面向对象层

71
00:03:24,905 --> 00:03:27,539
在那些较低层的东西之上。可以，然后呢

72
00:03:27,607 --> 00:03:30,875
现在你可以做网络，文件系统这样的东西，

73
00:03:30,944 --> 00:03:34,512
使用面向对象的API。但这还是非UI层，

74
00:03:34,581 --> 00:03:38,283
对？它还是比较靠近硬件。所以我会的

75
00:03:38,351 --> 00:03:40,619
绝对会在这个层面上教你很多的东西，

76
00:03:40,688 --> 00:03:43,721
因为你只需要它来做你要做的事情。

77
00:03:43,790 --> 00:03:47,059
现在，这里还有一层，叫媒体层

78
00:03:47,127 --> 00:03:51,262
这是一个巨大的层，有3D图形，和

79
00:03:51,331 --> 00:03:55,533
音频播放和录制，图像处理，视频，

80
00:03:55,602 --> 00:03:58,470
所有的东西不幸的是，我不会有很多

81
00:03:58,538 --> 00:04:01,006
时间花在这里，即使它是很大的一部分

82
00:04:01,074 --> 00:04:05,977
什么是iOS设备。 iOS设备几乎都有

83
00:04:06,046 --> 00:04:09,681
iPod中的iPod，如果你想要的话，视频iPod。

84
00:04:09,749 --> 00:04:12,584
所以这里有很多。不幸的是我无法覆盖

85
00:04:12,653 --> 00:04:15,454
所有。因为我要花大部分时间在这里，

86
00:04:15,523 --> 00:04:17,189
这是Cocoa Touch层。

87
00:04:17,257 --> 00:04:20,058
这是按钮和输入框等等控件，但是

88
00:04:20,127 --> 00:04:22,727
还有更强大的控件，如地图。

89
00:04:22,796 --> 00:04:26,131
Cocoa Touch中有一个对象是一个地图，

90
00:04:26,200 --> 00:04:29,368
这几乎是完整地图应用程序

91
00:04:29,436 --> 00:04:32,704
一个iOS设备，你可以直接放入一个矩形

92
00:04:32,773 --> 00:04:35,573
在你的应用程序几乎没有工作。

93
00:04:35,642 --> 00:04:38,676
所以，这个层非常强大的对象。这是哪里

94
00:04:38,745 --> 00:04:40,779
我们将花费绝大多数时间，

95
00:04:40,847 --> 00:04:43,315
在此层建立用户界面应用程序。

96
00:04:44,618 --> 00:04:47,886
这是一个粗略的概述。试图解释一切

97
00:04:47,955 --> 00:04:50,655
iOS在两分钟内几乎是不可能的，但是

98
00:04:50,724 --> 00:04:53,825
这正是我们在这门课上所做的。我们

99
00:04:53,894 --> 00:04:57,029
将使用所有这些组件来完成我们的工作。

100
00:04:57,098 --> 00:04:59,431
顶层，Xcode 8，将要...

101
00:04:59,500 --> 00:05:01,766
我们所做的一切都将在Xcode 8中。

102
00:05:01,835 --> 00:05:04,802
调试器，编辑器，一切，构建，

103
00:05:04,871 --> 00:05:08,173
它都在Xcode 8.有一个小的应用程序，仪器，

104
00:05:08,242 --> 00:05:10,742
可以调试性能

105
00:05:10,811 --> 00:05:13,845
几乎都是Xcode 8.二，我会教你的

106
00:05:13,914 --> 00:05:17,349
一种新的编程语言。所以如果你是计算机科学

107
00:05:17,418 --> 00:05:20,052
专业的，你知道学习不同的编程

108
00:05:20,120 --> 00:05:22,354
语言，真正宝贵的技能。

109
00:05:22,423 --> 00:05:24,056
不是因为你必须使用它们，

110
00:05:24,124 --> 00:05:27,158
有些可能或不可能使用。但只是过程

111
00:05:27,227 --> 00:05:30,896
看看语言设计师如何选择和选择他们的语法

112
00:05:30,965 --> 00:05:33,732
和功能集，真的很有价值。

113
00:05:33,800 --> 00:05:36,702
所以你会得到我会想的。这是一个伟大的语言。

114
00:05:36,770 --> 00:05:38,770
这只是在过去两三年才发明的

115
00:05:38,839 --> 00:05:40,806
这种融合了最好的很多不同

116
00:05:40,874 --> 00:05:44,475
语言。所以我会有一种闪电战的教导

117
00:05:44,544 --> 00:05:48,547
你在前几个礼拜框架：基本上是这样

118
00:05:48,615 --> 00:05:51,450
像Cocoa Touch UIKit框架。

119
00:05:51,519 --> 00:05:52,884
这是所有的按钮和其它东西的地方。

120
00:05:52,953 --> 00:05:54,452
基础（Foundation）是，那种，

121
00:05:54,521 --> 00:05:56,021
主要是核心服务层。

122
00:05:56,089 --> 00:05:58,356
但是还有很多其他的核心数据框架（CoreData），

123
00:05:58,425 --> 00:05:59,625
面向对象的数据库，

124
00:05:59,694 --> 00:06:01,293
我们将在作业五中这样做。

125
00:06:01,361 --> 00:06:05,730
我也谈到那个地图的东西，那就是框架

126
00:06:05,799 --> 00:06:08,534
称为MapKit。还有CoreMotion,

127
00:06:08,602 --> 00:06:11,470
可以获取设备中的加速度计和陀螺仪

128
00:06:11,538 --> 00:06:13,071
所有这些事情，我会教你很多，

129
00:06:13,140 --> 00:06:15,540
许多这些框架，我们继续下去。和

130
00:06:15,609 --> 00:06:17,676
最后，但绝对并非最不重要，

131
00:06:17,745 --> 00:06:20,145
非常重要的是设计策略

132
00:06:20,214 --> 00:06:23,315
如何构建应用程序，它被称为MVC，模型(Model)-视图(View)-控制器(Controller)。

133
00:06:23,384 --> 00:06:25,484
有多少人已经知道MVC，

134
00:06:25,552 --> 00:06:27,152
在不同的班上学到了吗？

135
00:06:27,220 --> 00:06:30,288
看，差不多有一般人学过了。我会用第一部分

136
00:06:30,357 --> 00:06:33,659
星期三的演讲告诉你有关MVC和它是什么。

137
00:06:33,727 --> 00:06:38,696
当我们开发iOS应用程序时，我们有100.0％必须使用MVC。

138
00:06:38,765 --> 00:06:41,300
真的没有其他的方法来做，如果你做任何其他的

139
00:06:41,368 --> 00:06:43,902
方式，那也只是逆水游泳

140
00:06:43,970 --> 00:06:47,239
iOS，它是...你最终会有一堆应用程序，

141
00:06:47,308 --> 00:06:50,275
好的，所以我们也会一起完成。这个演示

142
00:06:50,343 --> 00:06:53,045
我要做，我们要建一个计算器。

143
00:06:53,113 --> 00:06:56,181
一个计算器很棒，因为它有一个相当简单的UI，

144
00:06:56,250 --> 00:06:58,617
但是里面有一点难度，

145
00:06:58,686 --> 00:07:00,319
实际计算部分。所以

146
00:07:00,387 --> 00:07:03,355
它只是复杂到开始显示你MVC和

147
00:07:03,424 --> 00:07:06,557
很多语言功能和类似的东西。但不是这样

148
00:07:06,626 --> 00:07:09,928
复杂的，我不能做一个整个计算器，基本上，

149
00:07:09,997 --> 00:07:13,131
在两个节课中，好的，开始到完成。所有这些话题

150
00:07:13,200 --> 00:07:14,933
在这里，你不必现在看他们。

151
00:07:15,002 --> 00:07:18,203
这是我今天讲课后的幻灯片

152
00:07:18,272 --> 00:07:20,239
说，我是否知道，是的，

153
00:07:20,307 --> 00:07:22,173
我想我得到了所以

154
00:07:22,242 --> 00:07:25,177
这是我将要做的总结。因为我不是

155
00:07:25,246 --> 00:07:27,045
从演示结束回到幻灯片，

156
00:07:27,114 --> 00:07:28,614
这将是演讲的结束。

157
00:07:28,682 --> 00:07:30,615
我会告诉你一点点出来。

158
00:07:30,684 --> 00:07:33,251
星期三，我会继续这个演示，但是

159
00:07:33,320 --> 00:07:35,654
直到我给你这个关于MVC的谈话之后，

160
00:07:35,723 --> 00:07:38,690
因为我们在计算器上要做的是应用MVC

161
00:07:38,758 --> 00:07:41,760
在星期三。和你的第一个

162
00:07:41,829 --> 00:07:44,696
编程任务将在星期三出来，也就是说

163
00:07:44,765 --> 00:07:47,198
几乎复制了我今天所做的工作

164
00:07:47,267 --> 00:07:51,069
星期三好吗？我会给你一个演示的视频，

165
00:07:51,138 --> 00:07:54,840
所以你会看到它，你可以看到它。和

166
00:07:54,908 --> 00:07:57,709
那么在星期五，我们有一个可选的部分。

167
00:07:57,778 --> 00:07:59,211
所以在这个课程的周五部分，

168
00:07:59,280 --> 00:08:01,046
你可以不去，如果你不想。

169
00:08:01,115 --> 00:08:03,248
但是很多时候，他们非常有价值。

170
00:08:03,317 --> 00:08:07,085
功能如果您没有在Xcode 8中使用调试器

171
00:08:07,154 --> 00:08:10,022
你真的想去星期五的演讲。

172
00:08:10,090 --> 00:08:12,790
它的位置和时间将被发布在课堂上

173
00:08:12,859 --> 00:08:15,994
论坛希望明天。我问过房间和

174
00:08:16,062 --> 00:08:18,196
还没有得到它，希望明天。和

175
00:08:18,264 --> 00:08:20,565
那么不要忘记下周一是假期，所以我们不是

176
00:08:20,634 --> 00:08:23,067
星期一会议我们这个星期三之后的下一班

177
00:08:23,136 --> 00:08:28,540
将在下周三。所以我们来演示演示...

178
00:08:28,608 --> 00:08:31,743
我说我们要建一个计算器，让我真的

179
00:08:31,811 --> 00:08:36,315
给你一个计算器。这是MacOS的计算器

180
00:08:36,383 --> 00:08:39,050
我们的计算器会看起来非常相似，对吧？

181
00:08:39,119 --> 00:08:42,520
它必须显示在顶部，它有键盘

182
00:08:42,589 --> 00:08:46,058
输入数字，它有这些操作按钮。和

183
00:08:46,126 --> 00:08:49,294
比如我们现在按 乘，8，等于

184
00:08:49,362 --> 00:08:50,395
它执行操作，

185
00:08:50,464 --> 00:08:52,463
这几乎是我们的计算器要做的。

186
00:08:52,532 --> 00:08:55,100
它不会看起来像这样。会有

187
00:08:55,169 --> 00:08:58,370
一个更适合iOS设备的外观，

188
00:08:58,439 --> 00:09:03,041
但这通常是这样的。我答应Xcode会的

189
00:09:03,110 --> 00:09:05,210
你的一站式做所有的开发，所以

190
00:09:05,278 --> 00:09:08,847
我们将花费我们整个时间在这里工作在Xcode。

191
00:09:08,916 --> 00:09:12,117
现在Xcode是一个你刚刚去Mac App Store的应用程序，

192
00:09:12,186 --> 00:09:13,952
你下载它免费。

193
00:09:14,020 --> 00:09:16,688
当你第一次启动它的时候，它会出现这样的

194
00:09:16,757 --> 00:09:18,724
欢迎界面就像你在这里看到的。

195
00:09:18,792 --> 00:09:21,927
所有的项目都将开始积累

196
00:09:21,995 --> 00:09:26,265
在这个灰色地带的右侧。和

197
00:09:26,333 --> 00:09:29,634
你可以在这里做另外三件事情。您可以使用

198
00:09:29,703 --> 00:09:32,004
一个playgroud，我会在星期三演示playgroud，

199
00:09:32,072 --> 00:09:35,440
它是iOS编程的一个小游戏区。您

200
00:09:35,509 --> 00:09:38,911
可以从源代码控制中检查现有项目

201
00:09:38,979 --> 00:09:41,079
我们不会做的管理系统

202
00:09:41,148 --> 00:09:44,249
虽然我们可能有一个星期五部分

203
00:09:44,318 --> 00:09:48,186
做一个源代码控制。所以我们要成为

204
00:09:48,255 --> 00:09:50,956
在这里做这个选项，创建一个新的Xcode项目。

205
00:09:51,024 --> 00:09:53,158
事实上，当我在这个课程中做演示时，

206
00:09:53,227 --> 00:09:55,760
我几乎总是从头开始。

207
00:09:55,829 --> 00:09:56,895
我不想让你不得不喜欢，

208
00:09:56,963 --> 00:09:59,430
加快一些我先给你的代码，

209
00:09:59,499 --> 00:10:03,368
然后，从那里学习。所以我们尝试从头开始，

210
00:10:03,436 --> 00:10:06,271
看看我们可以这样做。所以我要点击这个，

211
00:10:06,340 --> 00:10:09,107
开始一个新的应用程序这是问，什么样的

212
00:10:09,175 --> 00:10:11,176
的应用程序，我们想要建立，或什么样的项目，和

213
00:10:11,245 --> 00:10:13,979
在这里你可以看到，我们可以做Watch Watch，Apple TV apps，

214
00:10:14,048 --> 00:10:17,616
甚至Mac OS应用程序，但我们正在做iOS，事实上，

215
00:10:17,684 --> 00:10:21,453
我们总是选择这个单一视图应用程序(single view application)

216
00:10:21,522 --> 00:10:23,322
模板。这是最简单的模板，

217
00:10:23,390 --> 00:10:25,290
其中一些其他模板在那里有代码

218
00:10:25,359 --> 00:10:27,525
其实是想告诉你如何写自己而不是

219
00:10:27,594 --> 00:10:30,195
有模板只是让代码出现，好吗？

220
00:10:30,264 --> 00:10:32,464
所以我们要做单视图应用程序。

221
00:10:32,532 --> 00:10:35,000
现在它需要一些我们的应用程序的细节，

222
00:10:35,068 --> 00:10:37,302
最重要的是它的名字。好，

223
00:10:37,371 --> 00:10:39,470
我们正在建立一个计算器，所以我们叫它

224
00:10:39,539 --> 00:10:42,341
计算器，好吧，这将是我们的应用程序的名称。

225
00:10:42,409 --> 00:10:45,343
现在这个第二行这里，团队，那就是团队

226
00:10:45,412 --> 00:10:48,547
那些要在这个项目上工作的开发者，那就是

227
00:10:48,616 --> 00:10:52,050
成为一个团队，这是你。好的，当你启动

228
00:10:52,119 --> 00:10:54,486
Xcode，这可能不会是一个下拉列表。

229
00:10:54,555 --> 00:10:57,021
它将成为添加帐户或

230
00:10:57,090 --> 00:11:00,925
像这样，添加团队。你点击这一切，所有你会的

231
00:11:00,994 --> 00:11:04,696
需要的是一个Apple ID，任何Apple ID都会做，不会花费你的

232
00:11:04,765 --> 00:11:07,866
钱。并通过对话框和

233
00:11:07,935 --> 00:11:11,636
它会为您添加一个团队，您可以在这里使用。好的？

234
00:11:11,705 --> 00:11:13,838
这个组织名称可以是你想要的任何东西。

235
00:11:13,907 --> 00:11:16,408
它只会出现在版权符号的顶部

236
00:11:16,477 --> 00:11:19,510
你的源代码文件就是这样。但这一个，

237
00:11:19,579 --> 00:11:24,316
这是非常重要的，这是您的唯一标识符。

238
00:11:24,384 --> 00:11:30,021
好的？所以我强烈推荐做edu.stanford.cs193p。

239
00:11:30,090 --> 00:11:35,160
你的SUNetID在这里，好吗？如果你把它放在那里，

240
00:11:35,228 --> 00:11:36,895
你几乎得到保证，如果你是斯坦福大学的学生，

241
00:11:36,963 --> 00:11:38,830
因为这是独一无二的。如果你不是斯坦福大学的学生，

242
00:11:38,899 --> 00:11:41,733
你在iTunes U上看这个，选择其他的东西

243
00:11:41,801 --> 00:11:43,768
唯一标识你。希望，

244
00:11:43,837 --> 00:11:46,638
反向DNS符号也会在您的情况下工作。

245
00:11:48,575 --> 00:11:51,009
我所说的语言就像我说的是Swift。

246
00:11:51,078 --> 00:11:53,812
iOS最初是用不同的语言写的

247
00:11:53,880 --> 00:11:56,681
Objective-C的。原来你可以使用Objective-C和

248
00:11:56,750 --> 00:11:59,384
Swift在同一个应用程序中。

249
00:11:59,453 --> 00:12:04,222
他们使用完全相同的底层iOS API。所以

250
00:12:04,291 --> 00:12:06,257
您在Swift的这个课程中会学到的一切，

251
00:12:06,326 --> 00:12:09,495
如果你以后去学习Objective-C，所有的学习

252
00:12:09,563 --> 00:12:11,863
会有效吗？实际上，这是确切的，

253
00:12:11,932 --> 00:12:15,367
它是完全相同的代码库，它不只是相同的API。

254
00:12:15,435 --> 00:12:18,437
Swift设计的方式与之相当兼容

255
00:12:18,505 --> 00:12:20,639
Objective-C的API。而在过去的几年里，

256
00:12:20,707 --> 00:12:23,742
他们甚至加强了Objective-C的追赶

257
00:12:23,810 --> 00:12:27,078
Swift做的一些先进的东西。我们的应用程序

258
00:12:27,147 --> 00:12:29,081
我们要建立，我们的计算器将会

259
00:12:29,149 --> 00:12:31,549
是普遍的这意味着它将在iPhone和iPhone上运行

260
00:12:31,618 --> 00:12:36,255
在iPad上第一个几个星期，它只会是iPhone，但是

261
00:12:36,323 --> 00:12:40,158
那么最终我们还会添加iPad的支持。

262
00:12:40,227 --> 00:12:42,127
我们不会在计算器中使用数据库，

263
00:12:42,195 --> 00:12:45,297
但我们将在你的任务五。而谈到

264
00:12:45,366 --> 00:12:47,499
测试，这是非常重要的，再次，我希望

265
00:12:47,568 --> 00:12:49,634
有一个星期五部分告诉你很多关于测试，

266
00:12:49,703 --> 00:12:53,238
尤其是UI测试框架真的很棒，

267
00:12:53,307 --> 00:12:55,874
好的，希望我们有机会向您展示。所以

268
00:12:55,943 --> 00:12:58,777
我只需点击下面创建我的应用程序。

269
00:12:58,846 --> 00:13:01,746
它说，你想把这个项目放在哪里？我建议

270
00:13:01,815 --> 00:13:06,952
你把它放在一个名为Developer的文件夹中。好的？

271
00:13:07,021 --> 00:13:09,688
那么所有的应用程序都将在这里堆积起来。

272
00:13:09,756 --> 00:13:12,324
这几乎是一个规范的地方

273
00:13:12,393 --> 00:13:13,658
我强烈推荐和

274
00:13:13,727 --> 00:13:17,429
那么再次来源控制更多的是为其工作的团队。

275
00:13:17,497 --> 00:13:18,897
你会自己做这个

276
00:13:18,966 --> 00:13:20,332
你可以把它关掉。

277
00:13:21,569 --> 00:13:24,202
好的，到此我们就完成了

278
00:13:24,271 --> 00:13:25,670
有你的第一个IOS应用程序，

279
00:13:25,739 --> 00:13:29,141
好的？现在让我解释一下Xcode和

280
00:13:29,210 --> 00:13:32,144
在这里如何布置所以如果你还没有看到它...

281
00:13:32,213 --> 00:13:35,546
之前有多少人曾在Xcode工作过？看，

282
00:13:35,615 --> 00:13:38,584
差不多大概一半你们这么多。对于那些

283
00:13:38,652 --> 00:13:41,620
没有用过到，分为这三个主要部分

284
00:13:41,689 --> 00:13:46,525
这里。中间的这个主要部分是主要的地方

285
00:13:46,594 --> 00:13:48,760
你将要做所有的源代码编辑和

286
00:13:48,828 --> 00:13:52,264
像这样的东西。这是你做大部分工作的地方。

287
00:13:52,332 --> 00:13:55,600
这部分在这里左边，这个蓝色部分是

288
00:13:55,669 --> 00:13:59,871
称为导航(Navigator)。您可以使用它来导航你的项目。

289
00:13:59,940 --> 00:14:02,140
在这里你看到它在一个基于文件的视图，

290
00:14:02,209 --> 00:14:04,242
我在看我所有的文件

291
00:14:04,311 --> 00:14:06,778
但是您可以通过搜索导航，

292
00:14:06,847 --> 00:14:09,314
好的，有一个搜索面板。如果你正在调试，

293
00:14:09,383 --> 00:14:11,183
您可以浏览所有的断点

294
00:14:11,252 --> 00:14:15,120
所以，你会学到关于不同的一切

295
00:14:15,189 --> 00:14:18,389
随着学期推移，您可以浏览的方式。

296
00:14:18,458 --> 00:14:22,127
在右边，你看到这个小区域，

297
00:14:22,196 --> 00:14:23,729
这被称为实用程序(Utilities)窗口。

298
00:14:23,797 --> 00:14:26,398
大概五分钟之内，我会谈论这一切，

299
00:14:26,467 --> 00:14:29,234
好的，我们会很详细地使用这个。我要

300
00:14:29,303 --> 00:14:32,837
告诉你一些如何在这里管理你的空间。

301
00:14:32,906 --> 00:14:35,407
如果你在右上角看到这里的按钮。

302
00:14:35,475 --> 00:14:38,010
您可以点击这里一个隐藏和

303
00:14:38,078 --> 00:14:41,280
显示。那个工具窗口。同样的事情在这里

304
00:14:41,348 --> 00:14:45,650
导航仪。这样可以为您带来更多的空间。

305
00:14:45,719 --> 00:14:48,253
好的，这里还有另一个，这个中间。

306
00:14:48,322 --> 00:14:50,122
这隐藏着底部的东西。

307
00:14:51,324 --> 00:14:53,892
这是您左侧的调试器窗口

308
00:14:53,961 --> 00:14:56,595
您的控制台，这是您可以登录的地方

309
00:14:56,663 --> 00:14:59,631
在调试的时候，在右边的字符串。和

310
00:14:59,700 --> 00:15:03,335
我们也会在一会儿看到。好的，所以

311
00:15:03,404 --> 00:15:04,636
我们来看看这些文件吧？

312
00:15:04,704 --> 00:15:07,071
我们在左边的文件导航器中。和

313
00:15:07,140 --> 00:15:08,874
这里有六个文件

314
00:15:08,942 --> 00:15:11,343
其中四个真的只是支持文件，而且

315
00:15:11,411 --> 00:15:13,778
我们甚至不会在计算器上看到他们。

316
00:15:13,847 --> 00:15:16,914
随着学期到增长，我们会看看他们中的几个，

317
00:15:16,983 --> 00:15:18,850
它们不是主要文件。

318
00:15:18,918 --> 00:15:24,088
例如，这一个Assets.xcassets，资源库(Xcode assets)。

319
00:15:24,157 --> 00:15:27,492
这是可能嵌入您的应用程序的图像和视频。

320
00:15:27,561 --> 00:15:29,027
你可以看到它是应用程序的图标，

321
00:15:29,095 --> 00:15:34,699
我没有设置任何我的应用程序图标，你可以看到他们。但

322
00:15:34,768 --> 00:15:39,570
这个xcassets和启动屏幕(Launch Screen)和这个Info.plist和

323
00:15:39,639 --> 00:15:43,007
这个AppDelegate在这里。顺便说一下，我正在按住command多选，

324
00:15:43,076 --> 00:15:45,644
在我屏幕左下角有显示

325
00:15:45,713 --> 00:15:48,947
我们要同时操作这几个文件

326
00:15:49,016 --> 00:15:51,182
要实现多选

327
00:15:51,251 --> 00:15:52,784
就要按住command键

328
00:15:52,853 --> 00:15:54,653
点击右键

329
00:15:54,721 --> 00:15:57,289
到这里，New Group From Selection。还有吧

330
00:15:57,357 --> 00:16:00,291
将这四个文件放入自己的小文件夹中。

331
00:16:00,360 --> 00:16:03,796
在那里，它做到了，我会称它支持文件(Supporting Files)，

332
00:16:03,864 --> 00:16:06,898
好的。我可以在导航仪中移动它们。

333
00:16:06,967 --> 00:16:09,501
看到那里，隐藏在那里。我们不会看

334
00:16:09,569 --> 00:16:12,471
那些。我们将在这两个文件中集中精力，

335
00:16:12,539 --> 00:16:18,209
好的？这个文件，是你第一次看Swift。这里是。

336
00:16:18,278 --> 00:16:20,979
这里有一些非常重要的方法

337
00:16:21,047 --> 00:16:24,850
会删除好的？他们很重要，但事实是这样

338
00:16:24,919 --> 00:16:26,151
我删除它们并不是它们不重要。

339
00:16:26,220 --> 00:16:28,220
只是我不会教你们的

340
00:16:28,288 --> 00:16:28,987
另外几个星期。

341
00:16:29,056 --> 00:16:31,824
所以我们不会在计算器中使用它们。其实，

342
00:16:31,892 --> 00:16:35,460
我将更详细地了解这个Swift代码

343
00:16:35,528 --> 00:16:37,128
一会儿。但在我这样做之前，

344
00:16:37,197 --> 00:16:41,332
我想在这里重点关注这个文件，Main.storyboard。

345
00:16:41,401 --> 00:16:44,703
这是您的用户界面(UI)。这是计算器的用户

346
00:16:44,771 --> 00:16:47,406
界面(UI)。有一件事你注意到，当我点击，

347
00:16:47,474 --> 00:16:51,710
这里没有代码。构建用户界面时

348
00:16:51,779 --> 00:16:55,280
在Xcode中的iOS应用中，您不需要编写代码。

349
00:16:55,348 --> 00:16:57,216
我们要用鼠标构建它。我们要去

350
00:16:57,284 --> 00:16:59,651
拖一些东西。我们要使用一些检查器

351
00:16:59,719 --> 00:17:03,188
设置我们想要的对象我们想要他们的方式这就是如何

352
00:17:03,256 --> 00:17:06,024
我们要建立我们的UI。你看到的代码。

353
00:17:06,092 --> 00:17:09,094
这只会控制UI的行为。

354
00:17:09,163 --> 00:17:11,864
当您触摸按钮时会发生什么？像这样的东西。

355
00:17:11,932 --> 00:17:13,699
那是什么将被该代码控制。但

356
00:17:13,767 --> 00:17:16,468
所有按钮的实际布局和所有的东西。

357
00:17:16,537 --> 00:17:19,671
将在这个图形视图中完成。

358
00:17:19,739 --> 00:17:22,841
现在你可以看到左边有这个区域，好吗？

359
00:17:22,910 --> 00:17:25,277
这就像，这就是所谓的文件大纲。

360
00:17:25,346 --> 00:17:27,546
如果你在这里，你会看到一个小按钮。

361
00:17:27,615 --> 00:17:29,514
文件大纲。文件大纲有

362
00:17:29,582 --> 00:17:32,918
用户界面中的所有内容都以轮廓形式显示。

363
00:17:32,986 --> 00:17:34,486
这将是非常有用的

364
00:17:34,554 --> 00:17:37,856
现在我先把它隐藏起来

365
00:17:37,925 --> 00:17:39,858
这就是这里的小按钮。它隐藏和

366
00:17:39,926 --> 00:17:42,026
显示它。我们会隐藏这个空间。

367
00:17:42,095 --> 00:17:45,430
我们不会在计算器中使用它。所以

368
00:17:45,499 --> 00:17:47,165
在这里留下这个空间，

369
00:17:47,233 --> 00:17:49,101
如果我在这里放大一点，

370
00:17:49,169 --> 00:17:52,671
或者缩小。你可以看到我开始看到一些东西

371
00:17:52,739 --> 00:17:55,941
看起来像一个iPhone。好吧，有点iPhone

372
00:17:56,010 --> 00:18:00,211
形状，我也可以按住选项键和

373
00:18:00,280 --> 00:18:04,316
使用我的鼠标滚轮在这里放大。好的，所以这就像

374
00:18:04,384 --> 00:18:06,985
一个iPhone，特别是iPhone 7。

375
00:18:07,054 --> 00:18:09,788
你在下面看到它的底部，它说视图为iPhone

376
00:18:09,857 --> 00:18:14,493
7，好吗？如果我点击查看为iPhone 7，

377
00:18:14,561 --> 00:18:19,531
您会看到所有其他iOS设备出现 -  iPad，

378
00:18:19,600 --> 00:18:24,202
例如。或者旧的iPhone 4s，他们真的有点小。

379
00:18:24,271 --> 00:18:26,938
他们不仅在那里，而且可以切换他们

380
00:18:27,007 --> 00:18:31,209
方向，好吗？现在，当您构建iOS应用程序时，

381
00:18:31,278 --> 00:18:35,414
您希望所有这些设备上的UI看起来都很好。和

382
00:18:35,482 --> 00:18:37,482
你不想写很多特别的，如果，

383
00:18:37,550 --> 00:18:41,720
然后在整个地方编写代码，使其工作。所以这

384
00:18:41,788 --> 00:18:45,390
整个系统，建立我们的UI，顺便说一下，

385
00:18:45,459 --> 00:18:48,426
是调用Interface Builder。这部分Xcode被称为

386
00:18:48,495 --> 00:18:52,030
Interface Builder，面向大量功能

387
00:18:52,099 --> 00:18:55,567
让你，让它，所以你可以建立你的UI一次和

388
00:18:55,636 --> 00:18:59,037
它将适用于所有这些设备。现在，我不会

389
00:18:59,106 --> 00:19:01,540
实际上开始这样做，直到演讲结束

390
00:19:01,608 --> 00:19:04,643
在星期三。所以，现在我们要建立我们的UI，

391
00:19:04,711 --> 00:19:07,279
它会变得有点混乱我们会在任何地方放按钮

392
00:19:07,347 --> 00:19:11,250
按钮随便放哪里都行

393
00:19:11,318 --> 00:19:14,319
暂时也不需要考虑横屏(landscape: 横屏 portrait：竖屏)

394
00:19:14,387 --> 00:19:17,289
也不考虑屏幕大小，好吗？我们不会担心

395
00:19:17,358 --> 00:19:19,925
但你只是想预览这个事实

396
00:19:19,994 --> 00:19:22,427
我们最终要建立这个通用的UI

397
00:19:22,495 --> 00:19:26,365
所有这些都有效果。所以这是我们的iPhone 7。

398
00:19:26,433 --> 00:19:30,969
我们想开始构建我们的UI。我们需要什么？我们需要

399
00:19:31,038 --> 00:19:33,871
按钮，我们需要一个顶部的显示。

400
00:19:33,940 --> 00:19:36,641
让我们从按钮开始吧。我们在哪里得到这些按钮？

401
00:19:36,710 --> 00:19:39,711
那么，承诺。我会谈谈这个工具(utilities)区

402
00:19:39,779 --> 00:19:42,414
这个工具区有一个顶部和

403
00:19:42,483 --> 00:19:45,316
一个底部你看到了吗而在底部，

404
00:19:45,385 --> 00:19:50,121
就在这里，在这个地区叫做对象(控件)库，就是

405
00:19:50,190 --> 00:19:53,759
一个IOS对象的库，你可以构建你的应用程序。

406
00:19:53,827 --> 00:19:57,262
它有像按钮这样的东西。输入框(Text fields)，

407
00:19:57,331 --> 00:20:00,298
它有更复杂的事情，如图像视图和

408
00:20:00,367 --> 00:20:04,102
文本视图，它是多行和可编辑的文本，它

409
00:20:04,171 --> 00:20:07,239
甚至有像我告诉你的地图事情的东西。

410
00:20:07,308 --> 00:20:10,242
或者一个网页视图，这基本上是一些Safari

411
00:20:10,310 --> 00:20:13,511
长方形。所以它有很多强大的东西和

412
00:20:13,580 --> 00:20:16,481
这里有很多人。我们会尽量覆盖

413
00:20:16,549 --> 00:20:19,551
其中绝大多数在本学期。

414
00:20:19,619 --> 00:20:22,888
但这几乎真的太多了。所以

415
00:20:22,956 --> 00:20:25,557
我们将通过简单的按钮开始。和

416
00:20:25,625 --> 00:20:27,959
如果我想在我的用户界面中有一个按钮，我只是拿起它

417
00:20:28,028 --> 00:20:32,630
鼠标，好的，并拖动它。现在当我拖动它，看

418
00:20:32,699 --> 00:20:37,536
这些蓝线正试图帮助我把它放在一个好地方。

419
00:20:37,604 --> 00:20:40,839
你看到了吗现在，我们不会那么注意

420
00:20:40,907 --> 00:20:43,007
现在，因为我告诉你我们正在做这件事

421
00:20:43,076 --> 00:20:45,577
我们正在构建适用于所有设备的应用。但

422
00:20:45,646 --> 00:20:47,012
当我们开始思考

423
00:20:47,080 --> 00:20:49,180
将其放在适用于所有设备的应用程序上

424
00:20:49,249 --> 00:20:52,751
真的想使用这些虚线的蓝线。好的，因为如果

425
00:20:52,819 --> 00:20:55,320
你说像我想要的东西在中心。

426
00:20:55,389 --> 00:20:57,389
那么现在它将在每个设备的中心，

427
00:20:57,457 --> 00:21:00,025
不管这个大小的屏幕，你看到吗？所以

428
00:21:00,093 --> 00:21:03,461
这些蓝线辅助你构建

429
00:21:03,530 --> 00:21:07,032
页面，你想要在确切的中心。再次，

430
00:21:07,100 --> 00:21:08,500
所以现在我们不会担心

431
00:21:08,569 --> 00:21:11,303
我要把它放在无处不在的地方。但

432
00:21:11,371 --> 00:21:14,473
再次，这些蓝线将是非常重要的

433
00:21:14,541 --> 00:21:17,542
好的，所以我们在这里有这个按钮。

434
00:21:17,611 --> 00:21:20,179
不是[笑]一个非常好的按钮，

435
00:21:20,247 --> 00:21:24,383
因为它有点小，它表示按钮。

436
00:21:24,451 --> 00:21:27,186
我们希望让我们说我们的数字按钮之一。

437
00:21:27,254 --> 00:21:28,520
好的，我们该怎么办？

438
00:21:28,589 --> 00:21:31,590
那么我们可以双击它。和

439
00:21:31,659 --> 00:21:34,860
键入我们的一个号码，我会让这是我的7按钮，所以

440
00:21:34,928 --> 00:21:38,330
这将是我的计算器上的7按钮。我可以

441
00:21:38,398 --> 00:21:40,899
调整大小，你会看到当我选择它，我得到这些尺寸控点。

442
00:21:40,967 --> 00:21:43,168
所以我可以把它放在一个角落，调整大小。

443
00:21:43,236 --> 00:21:45,837
当我做的时候，它甚至会告诉我什么大小。

444
00:21:45,906 --> 00:21:48,840
所以让我们选择一个像mm，64 x 64的大小？

445
00:21:48,909 --> 00:21:53,678
这是一个很好的计算机科学大小可以

446
00:21:53,747 --> 00:21:57,916
有点棘手。在那里，那里，我们去。

447
00:21:57,985 --> 00:21:59,050
好的，所以现在我们得到64 x 64。

448
00:21:59,119 --> 00:22:01,586
实际上，从长远来说，尺寸甚至不是很重要，

449
00:22:01,655 --> 00:22:04,156
因为在像iPhone 4这样的小型设备上，它会成为

450
00:22:04,224 --> 00:22:05,357
缩小了

451
00:22:05,425 --> 00:22:08,060
在另一台设备上，它会缩小。但是现在，

452
00:22:08,128 --> 00:22:11,196
会选择一些使用合​​理的数量

453
00:22:11,264 --> 00:22:14,366
iPhone 7上的屏幕真实状态。这仍然是

454
00:22:14,435 --> 00:22:17,469
有点小七。我们想要更大。所以当我们想做

455
00:22:17,538 --> 00:22:20,472
像这样的设置我们看到右边上半部分。

456
00:22:20,541 --> 00:22:22,874
我把这下面半部分拖下来隐藏到这里

457
00:22:22,943 --> 00:22:26,711
我们现在右边这个工具区

458
00:22:26,780 --> 00:22:28,647
这是检查器(inspector)，有不同的种类

459
00:22:28,715 --> 00:22:31,382
检查器。我们要使用属性检查器

460
00:22:31,451 --> 00:22:34,018
在这里，但是还有一个尺寸检查器。

461
00:22:34,087 --> 00:22:36,688
当我点击它，你会看到有64 x 64，

462
00:22:36,757 --> 00:22:39,524
我其实可以直接在这里输入数字

463
00:22:39,593 --> 00:22:43,528
设置准确的尺寸。好的。属性检查器

464
00:22:43,597 --> 00:22:45,330
是一个面向对象的检查器。

465
00:22:45,398 --> 00:22:47,732
你可以看到它知道一个按钮被选中，所以

466
00:22:47,801 --> 00:22:49,268
它显示你的按钮的东西。

467
00:22:49,336 --> 00:22:51,069
你可以设置一个按钮的事情。但

468
00:22:51,137 --> 00:22:53,872
一个按钮是一个类，继承了控件

469
00:22:53,940 --> 00:22:56,574
所以一个控件的基本设置也出现在这里

470
00:22:56,643 --> 00:22:58,910
控件继承自视图，所以视图的设置也在这里

471
00:22:58,979 --> 00:23:01,112
所以这个检查器是面向对象的

472
00:23:01,181 --> 00:23:03,815
不仅能显示控件本身的属性

473
00:23:03,884 --> 00:23:06,919
还能显示继承的属性。要更改按钮的

474
00:23:06,987 --> 00:23:10,355
字体大小，我只是往下看，标题，这里是。

475
00:23:10,424 --> 00:23:12,791
字体。在这里我会点击这个和

476
00:23:12,859 --> 00:23:15,660
我要把这个改为30点吧。好的。

477
00:23:15,729 --> 00:23:18,730
看起来不错现在，也许我想拥有

478
00:23:18,799 --> 00:23:23,501
这个按钮的背景。所以，如果我在这里看的话

479
00:23:23,570 --> 00:23:25,970
那个背景图片。我不想要一个背景图像。

480
00:23:26,039 --> 00:23:27,572
我其实想要一个背景颜色。所以

481
00:23:27,641 --> 00:23:29,274
按钮中没有什么可以做到的。

482
00:23:29,343 --> 00:23:32,277
但是，如果我去看看。我可以在这里看到背景

483
00:23:32,346 --> 00:23:35,447
这是一种颜色。如果我点击这个，我可以选一种颜色，

484
00:23:35,516 --> 00:23:38,049
这些预定义的颜色之一，或其他颜色，让

485
00:23:38,118 --> 00:23:41,519
我从颜色选择器中选择一点蜡笔盒或任何东西。

486
00:23:41,588 --> 00:23:46,057
所以我只是从这里选择浅灰色。

487
00:23:46,126 --> 00:23:48,193
这看起来像一个很好的背景颜色。所以

488
00:23:48,261 --> 00:23:50,629
现在我有一个按钮，好吗？这是一个很好的按钮。

489
00:23:50,697 --> 00:23:53,798
事实上，我们甚至可以运行，看看我们的应用程序的样子。

490
00:23:53,867 --> 00:23:56,902
只需一个按钮。现在谈到运行，

491
00:23:56,971 --> 00:23:59,671
你决定要运行你的程序的方式，

492
00:23:59,740 --> 00:24:02,240
因为您可以在你的设备上运行它，也可以实际运行

493
00:24:02,309 --> 00:24:04,843
它在一个模拟器上。好的，在最初的几个星期

494
00:24:04,912 --> 00:24:06,611
这门课可以使用模拟器。

495
00:24:06,680 --> 00:24:07,812
到期末，我会

496
00:24:07,881 --> 00:24:09,414
要求你开始在​​你的设备上运行

497
00:24:09,483 --> 00:24:12,383
让你们也熟练掌握这个过程。选择设备的方法是

498
00:24:12,452 --> 00:24:15,853
在这左上角，写着 Calculator > iPhone 7 Plus

499
00:24:15,922 --> 00:24:18,523
如果你点击它，你会看到一个整

500
00:24:18,592 --> 00:24:21,493
一堆模拟器。这些都是所有这些的模拟器

501
00:24:21,562 --> 00:24:25,530
可以运行iOS 10的不同设备。然后就可以了

502
00:24:25,599 --> 00:24:28,333
在这里的顶部，你可以选择，如果你有一个真实的设备

503
00:24:28,401 --> 00:24:31,236
连接到您的Mac，您可以选择一个物理设备。

504
00:24:31,304 --> 00:24:33,105
我会在几周内告诉你，

505
00:24:33,173 --> 00:24:36,240
以及。所以，让我们在iPhone 7上运行，好的，

506
00:24:36,309 --> 00:24:39,744
所以我只是选择了iPhone 7，现在我要按这个一点

507
00:24:39,813 --> 00:24:43,382
播放按钮在这里运行它。好的，现在要

508
00:24:43,450 --> 00:24:47,753
启动模拟器。现在这个模拟器是一个完整的iPhone

509
00:24:47,821 --> 00:24:52,357
模拟器，所以它不只是在一个窗口中运行我们的应用程序。

510
00:24:52,426 --> 00:24:55,327
我们去找吧。在这里，和

511
00:24:55,396 --> 00:25:00,699
现在显示的界面太大了，等会儿我们把它缩小点

512
00:25:00,768 --> 00:25:03,301
我们向上看，能找到放大了的按钮

513
00:25:03,370 --> 00:25:05,604
现在iPhone 7有很高的分辨率，而且

514
00:25:05,672 --> 00:25:07,772
我正在一个小分辨率的屏幕上运行。但

515
00:25:07,841 --> 00:25:10,542
你实际上可以在这里缩小比例

516
00:25:10,610 --> 00:25:14,846
缩小。好像又太小了，我稍微放大些

517
00:25:14,915 --> 00:25:19,150
是啊。所以我们看到这里有一个iPhone 7的50％的大小。

518
00:25:19,219 --> 00:25:21,520
那里有7个按钮。好的，

519
00:25:21,588 --> 00:25:24,056
现在，您可以按Home键

520
00:25:24,124 --> 00:25:28,026
在这个iPhone 7上去Hardware>Home。和

521
00:25:28,095 --> 00:25:30,796
当你这样做，看看。这看起来就像一个iPhone。

522
00:25:30,864 --> 00:25:33,332
你有设置您可以进入并设置一些设置。

523
00:25:33,401 --> 00:25:36,968
好的？再回家Cmd + Shift + H在家。

524
00:25:37,037 --> 00:25:38,269
然后你可以回到你的应用程序，

525
00:25:38,338 --> 00:25:41,373
这是这里的计算器。所以

526
00:25:41,441 --> 00:25:45,543
如果你正在编写一个应用程序，例如使用GPS和

527
00:25:45,612 --> 00:25:49,414
您需要进入设置才能启用GPS定位。

528
00:25:49,483 --> 00:25:52,951
你可以在模拟器上这样做，好吗？

529
00:25:53,019 --> 00:25:56,855
好的，所以我们得到了7按钮，让我们点击它。好的，

530
00:25:56,924 --> 00:26:01,326
好吧，它是闪烁的，所以它看起来像它的工作，但是

531
00:26:01,394 --> 00:26:04,196
当然，它没有做任何事情。我们没有告诉我们

532
00:26:04,264 --> 00:26:07,599
7按钮做什么，所以它什么也没做，好吗？所以

533
00:26:07,668 --> 00:26:10,301
让我们去做一些事情。现在我告诉

534
00:26:10,370 --> 00:26:15,139
你的UI行为是用代码编写的。所以

535
00:26:15,208 --> 00:26:20,278
这就是这个家伙在这里，这个ViewController.swift。

536
00:26:20,347 --> 00:26:23,615
这就是我们要做的行为的代码。所以，

537
00:26:23,683 --> 00:26:29,988
我们如何将此UI连接到此代码？那么这样做

538
00:26:30,057 --> 00:26:31,990
我们需要在屏幕上同时得到它们，

539
00:26:32,059 --> 00:26:35,193
好吧？而我们这样做的方式是用这个按钮，

540
00:26:35,262 --> 00:26:37,362
在这里，Assistant Editor按钮。

541
00:26:37,431 --> 00:26:41,599
所以我要点击它，我们得到两个。我可以点击

542
00:26:41,668 --> 00:26:44,969
例如，一方面显示我的UI。和

543
00:26:45,038 --> 00:26:47,539
它会自动显示另一个代码

544
00:26:47,608 --> 00:26:49,341
侧。好吧，它已经，

545
00:26:49,410 --> 00:26:51,910
它知道我可能想这样做。和

546
00:26:51,979 --> 00:26:54,212
这样做是因为，右边需要上面这里选中了

547
00:26:54,281 --> 00:26:57,749
Automatic，自动选择。或者你也可以调成

548
00:26:57,818 --> 00:27:00,752
Manual，手动选择你想要打开的文件

549
00:27:00,820 --> 00:27:03,721
通常情况选 Automatic

550
00:27:03,790 --> 00:27:06,525
它会自动选择最有效的东西

551
00:27:06,594 --> 00:27:08,960
当前最有用的文件

552
00:27:09,029 --> 00:27:12,231
我们会在那里调大一些空间。好吧？所以

553
00:27:12,299 --> 00:27:14,866
同时把 UI 界面也缩小点

554
00:27:14,935 --> 00:27:17,536
我们可以看到整个iPhone 7，

555
00:27:17,604 --> 00:27:20,372
好的，所以让我们先看看这个代码，因为这样

556
00:27:20,441 --> 00:27:22,007
是你第一次看到Swift。

557
00:27:22,075 --> 00:27:24,910
Swift真的很好，因为它很简洁

558
00:27:24,979 --> 00:27:28,914
在选择的关键字等方面非常通俗易懂

559
00:27:28,982 --> 00:27:31,717
import 就像是其它语言中的 include

560
00:27:31,785 --> 00:27:34,920
意思是说我想使用这个框架的UIKit。

561
00:27:34,989 --> 00:27:39,124
现在，这是我们的控制UI的代码。

562
00:27:39,193 --> 00:27:41,793
所以当然需要使用UIKit，

563
00:27:41,861 --> 00:27:44,896
好的？如果我们要写一个更像是的对象

564
00:27:44,965 --> 00:27:46,899
计算器的内部逻辑

565
00:27:46,967 --> 00:27:47,966
UI独立，

566
00:27:48,035 --> 00:27:50,401
那么我们可能会在这里import Foundation 。

567
00:27:50,470 --> 00:27:52,804
Foundation是那个核心服务层的，

568
00:27:52,873 --> 00:27:55,840
不是UI。你永远不想在其中之一导入UIKit

569
00:27:55,909 --> 00:27:59,978
那些非UI类的类。你会看到，当我们这样做

570
00:28:00,047 --> 00:28:04,082
MVC周三。当然有其他的事情我们可以

571
00:28:04,151 --> 00:28:07,753
import其它库，例如地图套件(MapKit)，这样的东西。好吧，

572
00:28:07,821 --> 00:28:11,190
所以在这里你看到你的第一个声明

573
00:28:11,258 --> 00:28:15,393
的Swift类。好的？关键字类，当然。

574
00:28:15,462 --> 00:28:19,364
名称，这是类的名称。 ViewController是

575
00:28:19,433 --> 00:28:21,966
类的名称，它是一种通用名称。

576
00:28:22,035 --> 00:28:24,302
可能会给它一个更好的名字，如果我有

577
00:28:24,371 --> 00:28:27,205
一个机会，但这是模板给了我的。

578
00:28:27,274 --> 00:28:29,541
你不可以通过键入来重命名，

579
00:28:29,609 --> 00:28:33,044
因为它与您的UI相关联。我会告诉你怎么样

580
00:28:33,113 --> 00:28:37,115
稍后重命名这个类。但是现在我们要继续下去了

581
00:28:37,183 --> 00:28:42,120
用这个通用名称。这个： UIViewController

582
00:28:42,189 --> 00:28:45,623
ViewController继承的类，好吗？这是

583
00:28:45,692 --> 00:28:47,960
面向对象编程，这是继承。

584
00:28:48,028 --> 00:28:49,895
再次，你必须知道面向对象的编程

585
00:28:49,963 --> 00:28:52,931
坐在这个房间里所以你知道这是什么意思？

586
00:28:52,999 --> 00:28:56,201
Swift 也是单一继承，也就是只继承一个类

587
00:28:56,269 --> 00:28:59,070
ViewController 就只继承自 UIViewController

588
00:28:59,139 --> 00:29:03,608
这个类的功能，它知道如何控制一个UI。

589
00:29:03,677 --> 00:29:06,811
这就是为什么它被称为视图控制器(ViewController)。

590
00:29:06,880 --> 00:29:09,114
这个类知道如何控制这边的视图

591
00:29:09,182 --> 00:29:12,017
正是继承了父类的所有功能

592
00:29:12,086 --> 00:29:13,351
才让它知道如何控制。那真是挺不错的

593
00:29:13,420 --> 00:29:16,120
因为这正是我们想要做的。和

594
00:29:16,189 --> 00:29:18,790
然后在花括号里面，我们要把所有的都放在这里

595
00:29:18,859 --> 00:29:23,161
我们的实例变量和方法。好的？

596
00:29:23,230 --> 00:29:25,430
希望大家都知道一个实例变量和

597
00:29:25,499 --> 00:29:27,199
一个实例变量就像在其中的变量的存储

598
00:29:27,200 --> 00:29:28,900
一种方法是对吗？

599
00:29:28,969 --> 00:29:32,270
方法就是类里的函数

600
00:29:32,339 --> 00:29:35,640
还有，在 Swift 中实例变量叫做属性

601
00:29:35,709 --> 00:29:37,108
如果你听到我说属性

602
00:29:37,177 --> 00:29:39,411
我的意思是实例变量。好的，

603
00:29:39,480 --> 00:29:44,049
我们称之为方法，方法。那么我现在真的想要什么

604
00:29:44,117 --> 00:29:47,853
每当按下这个按钮，我想让它调用

605
00:29:47,921 --> 00:29:52,424
这个类里的一个方法

606
00:29:52,493 --> 00:29:54,625
这样我就能够把其它我想要执行的代码

607
00:29:54,694 --> 00:29:55,794
都放在那个方法里

608
00:29:55,863 --> 00:29:56,928
这正是我们要做的。

609
00:29:56,997 --> 00:30:01,266
你绝对猜不到这新奇的连接方法

610
00:30:01,335 --> 00:30:03,935
要按住Ctrl键。你看到我在那里按住Ctrl。

611
00:30:04,004 --> 00:30:09,808
我要把这个按钮拖到我的代码中，

612
00:30:09,877 --> 00:30:13,611
好的？这是我要连接它。当我放开时，

613
00:30:13,680 --> 00:30:17,349
它说你想在你的UI和之间建立连接

614
00:30:17,418 --> 00:30:19,284
这段代码，但它们之间具体是什么关系？

615
00:30:19,353 --> 00:30:20,952
这里有两个选项

616
00:30:21,021 --> 00:30:23,722
一个是 Outlet，连接为属性

617
00:30:23,790 --> 00:30:25,857
也就是作为类的实例变量

618
00:30:25,926 --> 00:30:28,793
能进行操作。另一个是 Action

619
00:30:28,862 --> 00:30:31,896
作为一个方法，当按钮被点击

620
00:30:31,965 --> 00:30:35,066
就调用这个方法。明白了吗？

621
00:30:35,135 --> 00:30:37,169
好，这里填方法的名字

622
00:30:37,238 --> 00:30:40,105
我打算把这个方法称为touchDigit。

623
00:30:40,173 --> 00:30:44,909
好的，touchDigit。而这种方法，它可以有参数，

624
00:30:44,978 --> 00:30:47,612
也可以不带参数，也可以一个参数

625
00:30:47,681 --> 00:30:50,582
告诉我按下的是哪个按钮。现在我需要

626
00:30:50,651 --> 00:30:53,151
保留这个参数，因为我要用

627
00:30:53,220 --> 00:30:56,088
一个方法来处理所有的按钮

628
00:30:56,156 --> 00:30:59,157
所以我需要知道到底是哪个按钮调用的这个方法

629
00:30:59,225 --> 00:31:00,759
你的标题是什么，是 7

630
00:31:00,828 --> 00:31:02,427
还是 5？究竟是哪个按钮？

631
00:31:02,496 --> 00:31:05,430
所以我要保留 Sender 这个参数。这里的 Type

632
00:31:05,498 --> 00:31:09,101
表示参数的类型是 Any

633
00:31:09,169 --> 00:31:12,237
如果你现在正在休息一下，你什么时候醒来

634
00:31:12,306 --> 00:31:14,706
做功课的时候，不能把这个留成 Any

635
00:31:14,775 --> 00:31:17,342
我们知道只有谁会调用这个方法

636
00:31:17,411 --> 00:31:20,312
只有 UIButton，所以大家一定要改

637
00:31:20,381 --> 00:31:23,448
把 Any 改成 UIButton。如果你漏了这一步

638
00:31:23,516 --> 00:31:26,018
当你进去的时候，你的代码会被搞砸，

639
00:31:26,086 --> 00:31:29,121
因为发件人的参数类型是任何的(Any)，

640
00:31:29,189 --> 00:31:32,223
基本上就是没有指定类型

641
00:31:32,292 --> 00:31:34,426
这不好所以请确保将其更改为UIButton。

642
00:31:35,695 --> 00:31:37,695
现在，当我们连接它，它创建一个方法。所以

643
00:31:37,764 --> 00:31:41,133
我们来看看你定义的第一个 Swift 方法

644
00:31:41,202 --> 00:31:44,202
@IBAction 这实际上不是Swift的一部分，好的。

645
00:31:44,271 --> 00:31:47,372
这是 Xcode 的标记，为了

646
00:31:47,440 --> 00:31:49,641
在左边显示个小圆圈

647
00:31:49,710 --> 00:31:51,410
你在那里看到那个圆圈了吗？

648
00:31:51,479 --> 00:31:54,546
如果我把鼠标放在那个圆圈上，看看会发生什么。

649
00:31:54,615 --> 00:31:57,449
我没有点击它，我只是把鼠标放在它上面。你看，

650
00:31:57,518 --> 00:32:00,118
它会显示这个方法和谁建立了连接

651
00:32:00,187 --> 00:32:03,956
也就是哪些 UI 控件会调用这个方法

652
00:32:04,024 --> 00:32:08,961
所以这并不是 Swift 语言的一部分

653
00:32:09,029 --> 00:32:15,334
这只是 Xcode 的标记。剩下的部分就是方法了

654
00:32:15,402 --> 00:32:18,737
好的？所以我们来看一下Swift方法的部分，

655
00:32:18,806 --> 00:32:20,571
你们好理解 Swift 函数的语法

656
00:32:20,640 --> 00:32:23,775
为此我另外写一个方法

657
00:32:23,844 --> 00:32:26,778
选一个更好的例子，比方说

658
00:32:26,847 --> 00:32:31,983
函数名叫drawHorizo​​ntalLine(画一条横线)

659
00:32:32,052 --> 00:32:36,054
它从一些起始位置，

660
00:32:36,123 --> 00:32:39,691
一个 Double 类型的小数，到某个终点

661
00:32:39,759 --> 00:32:42,627
又一个 Double。也许还使用

662
00:32:42,696 --> 00:32:46,865
某种颜色，类型是 UIColor

663
00:32:46,934 --> 00:32:50,468
有一个Swift方法的例子。请注意，

664
00:32:50,537 --> 00:32:54,006
这有三个参数(startX，endX，color)。你看？这一个，这个和

665
00:32:54,074 --> 00:32:59,645
这个。这个“：Double”是这个参数的类型。

666
00:32:59,713 --> 00:33:02,147
所以这是一个双精度浮点数。那是

667
00:33:02,216 --> 00:33:05,083
该参数的类型。这也是Double。

668
00:33:05,152 --> 00:33:09,854
这是一个UIColor。好的，这是一种不同的类型。

669
00:33:09,923 --> 00:33:12,891
现在，关于参数真正有趣的是

670
00:33:12,960 --> 00:33:17,930
每个参数都有两个名字。看，from startX，

671
00:33:17,998 --> 00:33:21,233
to endX，using color。每个有两个，那么什么

672
00:33:21,301 --> 00:33:25,937
怎么会有两个名字呢？前面的这个

673
00:33:26,006 --> 00:33:29,741
第一个是函数外部的实参标签(argument label)

674
00:33:29,809 --> 00:33:33,912
第二个是函数内部的形参名称(parameter name)

675
00:33:33,980 --> 00:33:35,546
像startX，endX和

676
00:33:35,615 --> 00:33:38,884
color。这些名称是在函数里使用的名称

677
00:33:38,953 --> 00:33:42,721
比如，distance = endX- startX，或者

678
00:33:42,789 --> 00:33:46,057
这样的东西看到我正在使用endX和startX

679
00:33:46,126 --> 00:33:50,095
里面这个方法吧？它的一部分实现。

680
00:33:50,163 --> 00:33:52,764
这些外部名称由调用者使用，

681
00:33:52,833 --> 00:33:55,500
那些调用的人用的实参标签。

682
00:33:55,569 --> 00:33:58,537
比如我在 touchDigit 中使用  drawHorizontalLine

683
00:33:58,605 --> 00:34:01,006
现在，顺便说一句，Xcode喜欢为你打字(自动补全)。

684
00:34:01,075 --> 00:34:04,776
我只打了 drawH，再按 tab 键，再按一下

685
00:34:04,845 --> 00:34:07,345
Xcode 帮我输入了整个 drawHorizontalLine

686
00:34:07,414 --> 00:34:09,481
并显示所有要填的参数

687
00:34:09,550 --> 00:34:13,385
选择第一个，所以我可以键入它。所以注意到

688
00:34:13,453 --> 00:34:16,054
就像我刚才说的，from，to 和 using

689
00:34:16,123 --> 00:34:20,758
出现在了这里。如果我说从 5.0 画横线到 8.5

690
00:34:20,827 --> 00:34:25,930
使用颜色UIColor.blue(蓝色)

691
00:34:25,999 --> 00:34:30,335
from，to 和 using 是调用这个方法时用的

692
00:34:30,404 --> 00:34:34,706
还要注意，这些东西是强制性的。他们必须去

693
00:34:34,774 --> 00:34:38,043
在这里。你不能这样调用drawHorizo​​ntalLine，

694
00:34:38,112 --> 00:34:42,714
drawHorizontalLine(5.0, 8.5, .blue)

695
00:34:42,783 --> 00:34:46,685
这是行不通的

696
00:34:46,754 --> 00:34:48,987
你必须把这些外部名字放在那里。

697
00:34:50,290 --> 00:34:52,357
选择标签的时候要尽量保证行文通畅

698
00:34:52,425 --> 00:34:57,329
这看起来像读英语。从5.0画一条水平线

699
00:34:57,398 --> 00:35:01,700
到8.5使用蓝色，好吗？Swift 强烈建议让代码

700
00:35:01,769 --> 00:35:05,604
像一种对话

701
00:35:05,673 --> 00:35:09,141
接近自然语言

702
00:35:09,209 --> 00:35:13,445
这只是简单的介绍。我给你们的

703
00:35:13,513 --> 00:35:15,747
阅读作业里有更详细的解释

704
00:35:15,816 --> 00:35:18,750
但最基础的就这些。好，我们看看

705
00:35:18,819 --> 00:35:21,553
顺便说一下，如果你的函数返回一些东西(返回值)，

706
00:35:21,622 --> 00:35:26,191
你就这样写，好吗？ - > String 像这样，

707
00:35:26,260 --> 00:35:29,861
这箭头就像是在说，这东西会生成一个字符串

708
00:35:29,930 --> 00:35:34,132
所以也就被作为了表示返回值类型的语法

709
00:35:34,201 --> 00:35:36,501
好的，现在我们来看touchDigit，

710
00:35:36,570 --> 00:35:40,205
touchDigit有些与众不同，它也有两个参数，好吗？

711
00:35:40,274 --> 00:35:43,408
不过第一个是 _，下划线

712
00:35:43,477 --> 00:35:47,212
难道我要这样写么？touchDigit_:

713
00:35:47,281 --> 00:35:51,783
并不是。下划线表示不需要标签

714
00:35:51,852 --> 00:35:53,952
也就是你只需要写

715
00:35:54,021 --> 00:35:56,821
touchDigit(someButton) 就行了

716
00:35:56,890 --> 00:35:59,558
只需要写某个按钮，你并不需要写个

717
00:35:59,627 --> 00:36:01,693
你并不需要写任何的东西。如果这里是 foo

718
00:36:01,762 --> 00:36:03,628
那我们这里也要写 foo，好吗？

719
00:36:03,697 --> 00:36:06,831
既然不是 foo 而是下划线

720
00:36:06,900 --> 00:36:11,703
就什么都不写。为什么会有这种情况呢？

721
00:36:11,772 --> 00:36:15,173
这种情况标签多半存在于

722
00:36:15,242 --> 00:36:18,242
函数的名称或参数的类型，

723
00:36:18,311 --> 00:36:20,879
你传入的参数多半包含了，所以不需要补充说明

724
00:36:20,947 --> 00:36:24,916
下划线一般最多只用在第一个参数的标签

725
00:36:24,985 --> 00:36:27,018
不会用在第二个，第三个，第四个等等

726
00:36:27,087 --> 00:36:29,588
第一个会用，但也不是都会用

727
00:36:29,657 --> 00:36:32,190
第一个偶尔会，但绝对不会用为之后参数的标签。

728
00:36:32,258 --> 00:36:36,194
好的？现在在你的阅读作业中，

729
00:36:36,262 --> 00:36:39,631
我也要你阅读一个解释的文档(Swift API Design Guidelines)

730
00:36:39,700 --> 00:36:42,334
如何做这个命名。规则是什么，

731
00:36:42,403 --> 00:36:43,535
什么时候使用下划线，

732
00:36:43,604 --> 00:36:46,605
什么时候不用，熟练掌握文档中

733
00:36:46,673 --> 00:36:48,273
在这学期结束前

734
00:36:48,342 --> 00:36:51,276
你会成为一个专业的iOS开发者

735
00:36:51,345 --> 00:36:55,780
这是关键。但是这个touchDigit，好的，所以

736
00:36:55,849 --> 00:36:59,617
这个函数，好的方法，我，只是要清楚，方法，

737
00:36:59,686 --> 00:37:02,220
我们使用关键字func。好吧，是的

738
00:37:02,289 --> 00:37:05,123
方法是在类里的函数。是方法名。参数

739
00:37:05,192 --> 00:37:07,692
像这样的放括号中，如果可以用逗号分隔

740
00:37:07,761 --> 00:37:11,663
我们有多个。这是这里的第一个参数

741
00:37:11,732 --> 00:37:15,100
首先也是唯一。它的类型是UIButton，因为当然，

742
00:37:15,169 --> 00:37:18,470
一个UIButton正在发送这个方法。对，

743
00:37:18,539 --> 00:37:21,940
它正在调用这个方法。所以发件人是这个UIButton。

744
00:37:22,009 --> 00:37:23,942
sender 是参数名称。

745
00:37:24,011 --> 00:37:27,179
这就是我们在这里使用的名称来访问它。

746
00:37:28,549 --> 00:37:31,215
好吧？但在我们开始这样做之前，让我们来吧

747
00:37:31,284 --> 00:37:33,918
这样做可以像打印输出到控制台那样简单。

748
00:37:33,987 --> 00:37:38,824
所以我要说，打印“touchDigit被叫”，

749
00:37:38,893 --> 00:37:41,093
好的？我们要在控制台上打印出来。

750
00:37:41,161 --> 00:37:42,293
每当有人触摸一个按钮，

751
00:37:42,362 --> 00:37:43,495
它会引起这种方法。

752
00:37:43,564 --> 00:37:44,663
它将在控制台上打印。

753
00:37:44,731 --> 00:37:45,564
所以我们来做这个。

754
00:37:54,007 --> 00:37:58,743
好吧？所以有我们的UI，iPhone 7.点击并touchDigit

755
00:37:58,812 --> 00:38:01,680
在控制台下方出现在底部，好吗？

756
00:38:01,749 --> 00:38:04,383
现在控制台与调试器共享空间，

757
00:38:04,451 --> 00:38:07,352
左侧的这个区域是调试器。所以你可以这样

758
00:38:07,421 --> 00:38:10,122
分开这个空间来回，你也可以完全

759
00:38:10,190 --> 00:38:14,693
在这里使用这些按钮隐藏这个空间，好吗？

760
00:38:14,762 --> 00:38:18,062
所以我们只是在这里做控制台。我们回去吧

761
00:38:18,131 --> 00:38:20,832
我们的模拟器所以每次我们按这个，

762
00:38:20,901 --> 00:38:22,701
我们得到touchDigit被再次打印出来。

763
00:38:22,770 --> 00:38:24,702
每个人都明白这里发生了什么，

764
00:38:24,771 --> 00:38:26,538
我们如何将这个方法连接到按钮？真，

765
00:38:26,606 --> 00:38:30,042
真的很简单好的，现在我们有了

766
00:38:30,110 --> 00:38:33,612
我们知道我们需要的不仅仅是这一个按钮，

767
00:38:33,680 --> 00:38:36,281
我们需要一个全键盘的按钮。所以我会，

768
00:38:36,350 --> 00:38:38,717
我想这些其他按钮看起来完全一样，所以

769
00:38:38,786 --> 00:38:42,020
我要复制粘贴。所以我只是复制和粘贴，

770
00:38:42,089 --> 00:38:45,858
在这里粘贴另一个。我甚至可以一次选择三个，

771
00:38:45,926 --> 00:38:48,594
并复制粘贴，好吗？粘贴另一个。

772
00:38:48,662 --> 00:38:51,730
现在在这里注意到我正在使用蓝线来辅助我

773
00:38:51,798 --> 00:38:55,400
好的，真的很好蓝线真的非常好用

774
00:38:55,469 --> 00:38:59,537
现在我可以重命名这些按钮

775
00:38:59,606 --> 00:39:01,974
只需双击它们即可。

776
00:39:09,983 --> 00:39:12,651
好的，所以我在这里有一个美丽的键盘。

777
00:39:12,719 --> 00:39:16,688
真正好的是，这种方法是连接着

778
00:39:16,757 --> 00:39:19,992
所有按钮。好的，因为当你复制和

779
00:39:20,060 --> 00:39:23,228
粘贴一个按钮，它保持与任何方法的连接

780
00:39:23,297 --> 00:39:26,565
它有，好吗？这样很酷所以

781
00:39:26,633 --> 00:39:28,901
现在所有这些按钮都会发送这个touchDigit。

782
00:39:28,969 --> 00:39:33,438
所以现在如果我跑，你会看到，如果我按任何一个

783
00:39:33,507 --> 00:39:38,476
这些按钮，不只是我们的7个按钮。对，这是7，

784
00:39:38,545 --> 00:39:41,780
工作，但也是5，0，他们都在调用，

785
00:39:41,849 --> 00:39:46,285
这个touchDigit被调用了。好的，那真是太棒了

786
00:39:46,353 --> 00:39:49,855
但当然，我们想知道哪个按钮被调用，

787
00:39:49,923 --> 00:39:51,757
正在向我们发送这个消息，对吧？

788
00:39:51,825 --> 00:39:54,059
我们知道，因为这个参数

789
00:39:54,127 --> 00:39:57,996
是sender，好吗？所以我们在这里添加一个局部变量。

790
00:39:58,065 --> 00:40:00,065
所以现在你在Swift中看到你的局部变量

791
00:40:00,134 --> 00:40:03,902
第一次。看起来像这样，var digit，好吗？

792
00:40:03,971 --> 00:40:07,105
Var表示这是一个局部变量。Digit是这个名字。

793
00:40:07,174 --> 00:40:09,741
现在，如果我们想输入它，我们可以在这里放一个类型

794
00:40:09,810 --> 00:40:14,379
可能键入字符串。就像我们把一个参数一样

795
00:40:14,448 --> 00:40:18,583
在这里，我们可以在这里给出一个类型，我们的局部变量。

796
00:40:18,652 --> 00:40:22,821
但是，我们通常不会这样做，因为Swift

797
00:40:22,890 --> 00:40:26,258
是非常强的类型语言，换句话说，

798
00:40:26,326 --> 00:40:28,060
你必须指定一切的类型。

799
00:40:28,129 --> 00:40:29,862
它想知道一切的类型。

800
00:40:29,930 --> 00:40:34,366
它将从上下文中推断出你想要的类型。

801
00:40:34,435 --> 00:40:36,668
常常。好？所以这是权衡，

802
00:40:36,737 --> 00:40:39,938
如果你有一个非常强的类型的语言，你有

803
00:40:40,007 --> 00:40:43,575
输入一切如果编译器真的很好

804
00:40:43,644 --> 00:40:46,077
将会为你找出什么类型的东西。

805
00:40:46,146 --> 00:40:48,847
所以，通常情况下，我们可以随时离开这些类型。

806
00:40:48,916 --> 00:40:50,315
现在，我们不能这样做

807
00:40:50,384 --> 00:40:54,286
函数和方法的参数是我们自己决定的

808
00:40:54,354 --> 00:40:57,088
但对于局部变量

809
00:40:57,157 --> 00:41:00,993
大部分时候都是可以省略声明类型的

810
00:41:01,061 --> 00:41:02,828
有了这个 digit，我想给它赋值

811
00:41:02,897 --> 00:41:03,962
它是等于什么？

812
00:41:04,031 --> 00:41:06,865
它要等于按钮的标题

813
00:41:06,934 --> 00:41:09,301
这是给我的消息。所以这个家伙，

814
00:41:09,369 --> 00:41:12,037
这是一个按钮，我想知道它的标题。

815
00:41:12,106 --> 00:41:15,473
现在，您如何向Swift的另一个对象发送消息？

816
00:41:15,542 --> 00:41:17,776
那么你只需输入你想要的对象

817
00:41:17,844 --> 00:41:20,545
发送消息，然后按点(.)。好的，所以这是

818
00:41:20,614 --> 00:41:23,949
像Java和很多其他语言，只是对象和

819
00:41:24,017 --> 00:41:27,218
点，这是你发送消息的方式。现在不幸的是，

820
00:41:27,287 --> 00:41:31,156
XCode正在帮助我，告诉我所有的方法和

821
00:41:31,225 --> 00:41:35,660
按钮的属性。看这个清单，

822
00:41:35,729 --> 00:41:37,795
我才滑倒 F 开头的，好的，我还在滚动，

823
00:41:37,864 --> 00:41:42,333
仍然滚动。有很多方法和属性

824
00:41:42,402 --> 00:41:45,103
我能怎么办？只想要按钮的标题，

825
00:41:45,172 --> 00:41:47,705
好的，当然我可以查阅文档，

826
00:41:47,774 --> 00:41:48,573
开始阅读它，

827
00:41:48,642 --> 00:41:49,340
试图弄清楚

828
00:41:49,409 --> 00:41:51,476
是哪个函数还是属性

829
00:41:51,545 --> 00:41:53,445
Xcode中有一些技巧。

830
00:41:53,514 --> 00:41:55,881
这是，只需键入你想要的东西的名字，

831
00:41:55,950 --> 00:41:57,816
输入你的想法，看看会发生什么。

832
00:41:57,885 --> 00:42:00,618
所以，我要打标题。现在没有办法或

833
00:42:00,687 --> 00:42:02,787
属性在按钮称为标题。

834
00:42:02,856 --> 00:42:05,891
但是你可以看到Xcode已经向我展示了所有的方法

835
00:42:05,959 --> 00:42:08,326
属性以标题Or开头

836
00:42:08,395 --> 00:42:13,398
那里有字标题。或者甚至有“t”

837
00:42:13,467 --> 00:42:16,902
“it”，“le”在里面，好吗？所以它正在做的一切

838
00:42:16,971 --> 00:42:19,637
可以告诉你一切可能与之相配的事情

839
00:42:19,706 --> 00:42:22,340
你打了现在，我们来看看这些，看看我们是否

840
00:42:22,409 --> 00:42:24,575
可以找到一个会给我们的按钮的标题，好吗？

841
00:42:24,644 --> 00:42:29,448
标题标签(titleLabel)看起来不是很好。

842
00:42:29,517 --> 00:42:30,715
那 title(for: UIControlState) 呢，看起来不错，

843
00:42:30,784 --> 00:42:33,685
返回与指定状态关联的标题。

844
00:42:33,754 --> 00:42:36,255
嗯，看起来不错，但让我们继续寻找，因为我

845
00:42:36,323 --> 00:42:37,589
但我对这个状态一无所知

846
00:42:37,658 --> 00:42:39,991
看起来不错，但让我们继续摸索。

847
00:42:40,060 --> 00:42:44,696
不是edge insets,，不是，添加颜色，不是，阴影。当前的标题，

848
00:42:44,764 --> 00:42:45,664
当前的标题(Current title),

849
00:42:45,733 --> 00:42:47,433
显示在按钮上，

850
00:42:47,501 --> 00:42:50,202
正是我想要的。所以

851
00:42:50,270 --> 00:42:52,171
我要通过双击来选择它。

852
00:42:52,239 --> 00:42:54,172
所以我要双击它。在那里，

853
00:42:54,241 --> 00:42:58,476
它填满了。现在我们正在发送currentTitle

854
00:42:58,545 --> 00:43:01,813
发送者。现在我们来了解有关currentTitle的更多信息，好吗？

855
00:43:01,882 --> 00:43:04,649
我们知道简介说的是现在显示当前标题

856
00:43:04,718 --> 00:43:06,150
我要按住Option。

857
00:43:06,219 --> 00:43:07,619
看屏幕左下角的Option，好吗？

858
00:43:07,688 --> 00:43:09,788
按住 Option 键的同时

859
00:43:09,857 --> 00:43:13,858
把鼠标悬浮在这些名称上时会变蓝

860
00:43:13,927 --> 00:43:15,293
还有下划线

861
00:43:15,362 --> 00:43:19,831
我点下去，就会弹出快速帮助，好吗？所以

862
00:43:19,900 --> 00:43:21,967
我从按钮中获得当前的标题显示，

863
00:43:22,035 --> 00:43:25,137
还有更详细的描述和

864
00:43:25,206 --> 00:43:28,172
以及它的定义

865
00:43:28,241 --> 00:43:30,508
你可以看到这不是一个func。

866
00:43:30,577 --> 00:43:33,912
这是一个var。所以现在你第一次看到，

867
00:43:33,980 --> 00:43:36,981
Swift 中属性的定义吧？

868
00:43:37,050 --> 00:43:39,952
一个实例变量。所以这是一个实例变量，

869
00:43:40,020 --> 00:43:42,620
在UIButton，好吗？叫var，有意义吗？

870
00:43:42,689 --> 00:43:45,123
它是一个变量，var。它被称为currentTitle，

871
00:43:45,192 --> 00:43:49,194
当然。它的类型是，字符串？

872
00:43:51,565 --> 00:43:54,032
不确定，也许按钮不确定是什么类型。

873
00:43:54,101 --> 00:43:55,267
不，我觉得按钮知道，但是，

874
00:43:55,336 --> 00:43:57,870
我们现在假设这是字符串。

875
00:43:57,938 --> 00:44:00,772
看看会给我们带来什么麻烦。还要注意这一点

876
00:44:00,841 --> 00:44:03,842
语法意味着你只能得到当前的标题，

877
00:44:03,911 --> 00:44:07,613
与这个属性。您无法设置当前标题。现在，

878
00:44:07,681 --> 00:44:11,016
如果我喜欢，我有兴趣我如何设置

879
00:44:11,085 --> 00:44:13,618
当前的标题？所以你会想，让我们说，

880
00:44:13,687 --> 00:44:16,521
去看文档。文档在哪里？

881
00:44:16,590 --> 00:44:18,556
这下面有个 More

882
00:44:18,625 --> 00:44:21,159
点这个 Property Reference

883
00:44:21,228 --> 00:44:23,929
文档就出现了

884
00:44:23,997 --> 00:44:26,765
这里是CurrentTitle的文档。

885
00:44:26,834 --> 00:44:30,034
很酷的这个，我可以点击许多的东西

886
00:44:30,103 --> 00:44:32,971
像String，我可以找到关于String。或者，看，

887
00:44:33,040 --> 00:44:36,608
我可以点击UIButton中定义的类。

888
00:44:36,677 --> 00:44:39,411
这是UIButton，看这个部分

889
00:44:39,479 --> 00:44:43,182
UIButton的开始叫做概述。这些都很棒，

890
00:44:43,250 --> 00:44:46,851
我强烈推荐你去使用的每一个课程

891
00:44:46,920 --> 00:44:48,453
花五分钟或

892
00:44:48,521 --> 00:44:51,022
最多十分钟阅读这些概述。

893
00:44:51,091 --> 00:44:53,458
那么你真的会明白这些课程是如何工作的。

894
00:44:53,527 --> 00:44:55,860
看这个东西它告诉我们

895
00:44:55,929 --> 00:44:58,530
示例如何配置按钮的外观。

896
00:44:58,599 --> 00:45:00,131
它告诉我们所有关于这个按钮的状态。

897
00:45:00,200 --> 00:45:01,733
记住，之前看到的 button(for: UIControlState)

898
00:45:01,802 --> 00:45:03,302
我们不清楚按钮的状态是什么

899
00:45:03,370 --> 00:45:05,904
这里就给出了解释。这个讲按钮的内容

900
00:45:05,973 --> 00:45:08,640
而且你可以在那里放置一个图像，显然和

901
00:45:08,709 --> 00:45:12,543
文本。这些边缘插图(edge insets,)，无论如何，解释。

902
00:45:12,612 --> 00:45:15,180
即使是界面构建器，也是检查器中的所有内容。

903
00:45:15,249 --> 00:45:17,249
看，这些都是详细解释的。

904
00:45:17,317 --> 00:45:19,651
所以这是一个很好的事情，只是读这个，

905
00:45:19,720 --> 00:45:22,787
了解所有常见的课程。和

906
00:45:22,856 --> 00:45:26,090
当然，所有的方法也列在这里。对于

907
00:45:26,159 --> 00:45:26,925
例如，看看这个，

908
00:45:26,993 --> 00:45:29,995
的setTitle。嗯，这可能是设置标题的一种方式。和

909
00:45:30,064 --> 00:45:33,532
如果我点击这个，我将得到一个完整的描述。和

910
00:45:33,600 --> 00:45:36,668
我甚至看到状态在这里，所以我可以点击

911
00:45:36,736 --> 00:45:39,771
就这样而现在我可以看到控制状态，当然，

912
00:45:39,840 --> 00:45:41,973
有正常(normal)，突出显示(highlighted)的按钮，禁用(disabled)按钮，

913
00:45:42,042 --> 00:45:44,275
一个选定的按钮。他们每个人都有自己的标题，

914
00:45:44,344 --> 00:45:47,779
酷。但是，您只需点击即可看到我正在导航

915
00:45:47,848 --> 00:45:49,614
通过各种类型和

916
00:45:49,683 --> 00:45:53,017
所有这一切，你真的想要更快地做到这一点

917
00:45:53,086 --> 00:45:55,954
好的，做一个好的iOS开发人员真的很重要

918
00:45:56,022 --> 00:46:00,325
能够有效地使用文档。好的，所以

919
00:46:00,394 --> 00:46:04,262
我们回到这里，我们得到这个东西currentTitle。就这样

920
00:46:04,331 --> 00:46:07,265
键入字符串问号。我告诉你，迅速的会

921
00:46:07,334 --> 00:46:10,101
推断类型。一定要看，一个数字。它的

922
00:46:10,170 --> 00:46:12,770
类型是字符串问号。当然，因为我刚刚设定

923
00:46:12,839 --> 00:46:14,606
它等于是字符串问号的东西，所以

924
00:46:14,675 --> 00:46:17,476
它知道它是字符串问号。所以，我们继续吧

925
00:46:17,545 --> 00:46:18,944
打印这个数字。好的，

926
00:46:19,013 --> 00:46:21,513
这是说触摸数字被称为。让我们尝试打印

927
00:46:21,582 --> 00:46:24,883
出。现在用另一种语言，你可以使用printf。

928
00:46:24,952 --> 00:46:30,022
你可能会说像％s的东西被触动了。

929
00:46:30,091 --> 00:46:31,856
然后你会把数字放在这里，

930
00:46:31,925 --> 00:46:36,160
好的？现在不幸的是，你不能在Swift这样做，好吗？

931
00:46:36,229 --> 00:46:39,931
没有百分比的生意，好吗？没有printf。代替，

932
00:46:40,000 --> 00:46:43,701
我们还是打印，好吗？但是，而不是百分比。

933
00:46:43,770 --> 00:46:48,840
我们实际上可以使用非常神奇的\()括号。

934
00:46:48,909 --> 00:46:50,842
如果你把它放在一个字符串中，

935
00:46:50,910 --> 00:46:53,778
那么你可以把任何你想要的东西放在那里

936
00:46:53,847 --> 00:46:55,947
转换成字符串。和

937
00:46:56,016 --> 00:46:57,682
它会包括它在那里。包含，

938
00:46:57,751 --> 00:47:00,886
一个字符串本身。显然可以转换成一个字符串。所以

939
00:47:00,954 --> 00:47:03,521
这样，您可以将字符串嵌入其他字符串。

940
00:47:03,590 --> 00:47:06,190
或者甚至嵌入更复杂的知道如何转动的对象

941
00:47:06,259 --> 00:47:09,194
自己变成一个字符串，变成字符串。好的，所以这是怎么回事

942
00:47:09,263 --> 00:47:13,331
这就是取代 printf 的方法

943
00:47:13,400 --> 00:47:17,702
现在我也注意到，我们有一个警告。这个黄色的东西是

944
00:47:17,771 --> 00:47:20,438
一个警告，好吗？他们可以是黄色，这是警告

945
00:47:20,507 --> 00:47:23,041
在这种情况下，它将编译并运行。但是，你还是要去

946
00:47:23,110 --> 00:47:25,310
修复它，你不能在这个班上提交任何作业

947
00:47:25,379 --> 00:47:28,647
有警告。你听到我吗或者他们可以是红色的

948
00:47:28,715 --> 00:47:31,917
在红色的情况下，它甚至不会运动(build)。所以这个黄色。

949
00:47:31,985 --> 00:47:35,320
我们如何知道它是什么？嗯，我们只是点击它。

950
00:47:35,389 --> 00:47:38,390
当我们点击它，它在这里说变量数字

951
00:47:38,459 --> 00:47:41,359
从来没有变异意味着它从未改变。

952
00:47:41,428 --> 00:47:45,597
它说，考虑改变不变。好的？和

953
00:47:45,666 --> 00:47:48,166
你可以看到它甚至说你要我解决它吗？我可以

954
00:47:48,235 --> 00:47:50,736
用let替换var，甚至显示出来

955
00:47:50,804 --> 00:47:53,905
看起来要用let来替换var。它有多么有用。所以

956
00:47:53,974 --> 00:47:55,874
其实我也要这样做我要点击，

957
00:47:55,943 --> 00:47:59,143
改变它让，警告消失。现在这是什么

958
00:47:59,212 --> 00:48:04,215
点了之后说 Variable 'digit' was never mutated，它从来没有改变，

959
00:48:04,284 --> 00:48:08,353
好的？所以数字基本上是一个常数。

960
00:48:08,421 --> 00:48:11,089
我们给它一个初始值。它从来没有改变。

961
00:48:11,157 --> 00:48:14,359
当你声明一个常数，你总是想使用let。

962
00:48:14,428 --> 00:48:17,462
现在为什么我们有一个不同的词为一个常数比

963
00:48:17,531 --> 00:48:21,133
一个var？那么，因为一个常量不是var。

964
00:48:21,202 --> 00:48:24,603
它不变，常数是常数。

965
00:48:24,672 --> 00:48:28,273
而让我们读一读就是一个伟大的词汇。Let digit

966
00:48:28,342 --> 00:48:32,277
等于调用函数的按钮当前标题。好的，读的很不错

967
00:48:32,345 --> 00:48:35,914
区分常量和变量的原因归根到底是为什么？

968
00:48:35,982 --> 00:48:39,450
两个原因。如果你读其它人的代码

969
00:48:39,519 --> 00:48:42,554
看到 let 就知道这是个常量

970
00:48:42,623 --> 00:48:44,822
知道这个 digit 一定不会变

971
00:48:44,891 --> 00:48:46,525
事实上，如果有人做了修改，或者

972
00:48:46,593 --> 00:48:49,527
如果你尝试改变别人的代码并进行修改，

973
00:48:49,596 --> 00:48:52,330
编译器会产生一个错误，好的。你不能修改

974
00:48:52,399 --> 00:48:55,534
这是不变的。但更为重要的是，

975
00:48:55,603 --> 00:48:58,203
它告诉Swift，这是一个常数

976
00:48:58,271 --> 00:49:01,272
你希望这是个常量。之后

977
00:49:01,341 --> 00:49:05,209
如果你尝试修改它，即使它是一个数组或

978
00:49:05,278 --> 00:49:08,213
一个字典，你试图把一些东西放在数组中

979
00:49:08,282 --> 00:49:10,715
好的？或者添加一些字典。

980
00:49:10,784 --> 00:49:13,251
它知道，你打算成为一个常数。所以，

981
00:49:13,320 --> 00:49:17,656
你知道，错误。所以这是告诉Swift你打算什么的一种方式。

982
00:49:17,724 --> 00:49:21,093
现在，可变数组之间的区别，

983
00:49:21,162 --> 00:49:22,961
一个数组，你可以添加东西，和

984
00:49:23,029 --> 00:49:26,464
一个不变的，是巨大的，占的空间很大。Swift 中

985
00:49:26,533 --> 00:49:30,869
数组是通过拷贝来实现值传递，传递数组就是复制数组的过程

986
00:49:30,938 --> 00:49:33,438
与其他语言相比，这是非常不寻常的

987
00:49:33,507 --> 00:49:35,306
其中数组只是堆中的对象

988
00:49:35,375 --> 00:49:37,676
你只是传递一个指针。你正在传给他们

989
00:49:37,744 --> 00:49:40,244
每次将它们传递给一个功能时都将它们复制。

990
00:49:40,313 --> 00:49:44,583
现在，如果它们都是可变的，那将是非常低效的。疯狂

991
00:49:44,652 --> 00:49:46,718
你实际上必须复制它们，以防有人改变它。

992
00:49:46,786 --> 00:49:48,853
但是Swift知道哪些是可变的，哪些不可变。

993
00:49:48,922 --> 00:49:51,623
当你通过一个不变的它只 - 但是

994
00:49:51,692 --> 00:49:53,225
没有真正有效的复制，好的，

995
00:49:53,293 --> 00:49:55,794
它实际上并没有复制该元素。其实直到

996
00:49:55,863 --> 00:49:59,163
您通过说var等于将其分配给可变变量

997
00:49:59,232 --> 00:50:01,766
那甚至不用担心。然后呢

998
00:50:01,835 --> 00:50:04,703
当你真正改变它时，可以做写复制。好的，

999
00:50:04,771 --> 00:50:07,639
所以这是var / let的东西，习惯了，

1000
00:50:07,708 --> 00:50:10,441
总是让常数好的，让我们跑吧

1001
00:50:10,510 --> 00:50:14,012
这个现在看看这里发生了什么这应该是正常的吗？

1002
00:50:14,080 --> 00:50:16,648
我们正在获得当前的标题。我们在说，

1003
00:50:16,717 --> 00:50:19,084
那么，无论什么标题都被点击了。

1004
00:50:19,152 --> 00:50:23,454
应该没问题。我试试，按下 7。怎么回事？

1005
00:50:23,523 --> 00:50:27,692
好的，这很有用。

1006
00:50:27,761 --> 00:50:29,695
我的意思是它肯定会做不同的事情

1007
00:50:29,764 --> 00:50:30,763
它有点知道哪个按钮。

1008
00:50:30,831 --> 00:50:33,732
但是为什么会有 Optional("") 呢？

1009
00:50:33,801 --> 00:50:38,504
这是什么造成的？

1010
00:50:38,572 --> 00:50:43,675
这是因为 digit 不是字符串，是 String?

1011
00:50:43,744 --> 00:50:47,946
那什么是 String? 呢？String?

1012
00:50:48,014 --> 00:50:52,951
和普通字符串不一样。它的类型叫做可选（Optional）

1013
00:50:53,019 --> 00:50:55,987
是非常重要的。再次，睡着的同学可以醒了。

1014
00:50:56,056 --> 00:50:59,958
好的？这是非常重要的。很少有语言有这个

1015
00:51:00,027 --> 00:51:04,195
概念。这是一个很好的概念。它真的使API真的

1016
00:51:04,264 --> 00:51:06,931
所有的iOS都可以理解。但它需要一点点

1017
00:51:07,000 --> 00:51:10,869
有点习惯，好吗？那么这个类型是可选的？

1018
00:51:10,937 --> 00:51:15,340
类型可选只有两个值，设置和

1019
00:51:15,408 --> 00:51:18,810
没有设置好吗？只会有这两种情况

1020
00:51:18,879 --> 00:51:22,681
不可能是其它的值。当可选类型的为有值的时候

1021
00:51:22,749 --> 00:51:26,518
它可以有一个关联的值。好的？

1022
00:51:26,586 --> 00:51:29,521
它会有一个关联值

1023
00:51:29,590 --> 00:51:31,857
另一个和这个可选一起存储的值

1024
00:51:31,925 --> 00:51:34,826
您声明该关联值是什么类型。

1025
00:51:34,895 --> 00:51:37,896
所以这个，关联的值是一个字符串。

1026
00:51:37,964 --> 00:51:40,832
当然了，我说的是按钮的标题

1027
00:51:40,900 --> 00:51:42,167
我们把这个 digit 的类型

1028
00:51:42,236 --> 00:51:45,771
叫做 Optional String，可选字符串

1029
00:51:45,839 --> 00:51:48,773
一个在有值状态下关联值为字符串的可选类型

1030
00:51:48,842 --> 00:51:54,312
我们现在的情况是一定会有值

1031
00:51:54,381 --> 00:51:56,648
但我只想要这个关联值

1032
00:51:56,717 --> 00:51:59,551
我只要那个标题就可以了

1033
00:51:59,620 --> 00:52:01,619
怎么才能解析出这个值呢？最简单的方法

1034
00:52:01,688 --> 00:52:06,191
后面加一个英文叹号 !

1035
00:52:06,260 --> 00:52:09,327
如果你在可选类型的后面加上叹号

1036
00:52:09,396 --> 00:52:12,730
在可选类型有值的情况下，隐式解析出关联值

1037
00:52:12,799 --> 00:52:16,301
然后返还给你。我们再看看 digit 的类型

1038
00:52:16,370 --> 00:52:20,104
太好了，只是普通的字符串了。Swift 如此推测的原因是

1039
00:52:20,173 --> 00:52:25,944
你已经把可选类型强制解包了，所以你会得到一个字符串

1040
00:52:26,013 --> 00:52:31,850
但是如果你在可选类型的后面加了一个叹号

1041
00:52:31,919 --> 00:52:35,320
但是这个可选类型却缺省值呢？

1042
00:52:35,389 --> 00:52:37,856
因为在缺省值的时候是没有关连值的

1043
00:52:37,924 --> 00:52:39,958
只有在有值的时候才存在关联值。强制解包会发生什么呢？

1044
00:52:40,026 --> 00:52:45,797
任何人想猜猜会发生什么？崩溃。好的？

1045
00:52:45,866 --> 00:52:50,702
KABOOM。现在，我确信你们有保守的

1046
00:52:50,771 --> 00:52:52,470
现在在想，好吧我受够了

1047
00:52:52,539 --> 00:52:54,806
我绝对不会用感叹号的

1048
00:52:54,875 --> 00:52:57,042
我不想让我的应用程序崩溃，这太可怕了。

1049
00:52:57,111 --> 00:53:00,312
但是实际上你的应用在开发过程中崩溃了

1050
00:53:00,381 --> 00:53:03,081
可以很好，因为你会发现错误

1051
00:53:03,149 --> 00:53:05,784
快速的，你会被直接放入调试器

1052
00:53:05,853 --> 00:53:07,652
发生奔溃的时候，您可以确定发生的情况。

1053
00:53:07,721 --> 00:53:09,454
这怎么可能发生了？

1054
00:53:09,522 --> 00:53:12,224
所以在这种情况下，正在谈论一个按钮的标题，

1055
00:53:12,293 --> 00:53:14,393
这意味着按钮的标题从未设置

1056
00:53:14,461 --> 00:53:17,462
这是触摸数字。这绝对不会发生。好的

1057
00:53:17,530 --> 00:53:20,098
如果按钮没有标题软件就卖给了客户

1058
00:53:20,167 --> 00:53:22,033
客户一定会抱怨

1059
00:53:22,102 --> 00:53:24,302
有一个没有标题的按钮，

1060
00:53:24,371 --> 00:53:25,737
点下去之后就崩溃

1061
00:53:25,806 --> 00:53:27,072
你知道我在说什么？

1062
00:53:27,141 --> 00:53:28,574
所以，你想找到那些在开发中。

1063
00:53:28,642 --> 00:53:30,642
所以奔溃(crash)可能有时候是好的。

1064
00:53:30,711 --> 00:53:33,444
当然你并应该每次解包可选类型的时候都导致崩溃

1065
00:53:33,513 --> 00:53:36,215
我还会再讲讲如何解包

1066
00:53:36,283 --> 00:53:39,084
获取可选类型的关联值

1067
00:53:39,152 --> 00:53:42,654
正常情况下都应该确认可选类型是否有值

1068
00:53:42,723 --> 00:53:44,789
暂时我们先这样吧，先运行代码看看现在是什么情况

1069
00:53:44,858 --> 00:53:47,793
应该没有问题了，我们已经解包了这个可选变量

1070
00:53:47,862 --> 00:53:48,893
得到了其关联价值。

1071
00:53:48,962 --> 00:53:51,663
而且我们知道现在的标题应该始终如此设置

1072
00:53:51,732 --> 00:53:53,798
我们不必担心这里崩溃。和

1073
00:53:53,867 --> 00:53:56,868
肯定有7被点击了，9，3，

1074
00:53:56,937 --> 00:54:00,705
5，6，好吗？好的，所以我们很了不起

1075
00:54:00,774 --> 00:54:04,710
我们可以从用户那里收集数字。

1076
00:54:04,779 --> 00:54:07,546
现在让我们把它们放在计算器显示中。

1077
00:54:07,615 --> 00:54:09,581
所以我们需要在我们的计算器上添加一个显示。

1078
00:54:09,650 --> 00:54:12,083
所以我们会回到我们的工具区。

1079
00:54:12,152 --> 00:54:15,186
把下半部分的对象库拽出来。注意我们要使用的

1080
00:54:15,255 --> 00:54:17,856
不是这里的这个 Text Field。那是用来输入文字的

1081
00:54:17,924 --> 00:54:20,025
正常的计算器是不应该

1082
00:54:20,093 --> 00:54:22,728
让你点击显示屏修改结果的。你应该按数字按钮

1083
00:54:22,796 --> 00:54:25,164
我们将在这里使用这个标签(Label)。

1084
00:54:25,232 --> 00:54:27,065
顺便说一句，如果你点击其中之一和

1085
00:54:27,134 --> 00:54:28,199
然后把鼠标就停留在那里

1086
00:54:28,268 --> 00:54:30,903
它会给你们详细的解释这些

1087
00:54:30,971 --> 00:54:34,473
列表中的对象。所以我只会选一个标签

1088
00:54:34,542 --> 00:54:35,740
并将其拖到这里到顶部，

1089
00:54:35,809 --> 00:54:39,844
稍微多给它留点空间，把这些挪下来些

1090
00:54:39,913 --> 00:54:42,714
所以我们有这个标签我(Label)，还是像之前一样

1091
00:54:42,783 --> 00:54:45,049
按钮我要改变大小。

1092
00:54:45,118 --> 00:54:48,086
也许我想从零开始。更大的字体。

1093
00:54:48,155 --> 00:54:51,689
我们来这里甚至可能是真正的大字体，如40或

1094
00:54:51,758 --> 00:54:55,927
这样的东西在一个计算器中，文字是正确的

1095
00:54:55,996 --> 00:54:58,797
对齐。对？文字从右边出来，所以

1096
00:54:58,866 --> 00:55:01,266
我们想在这里使用这个对齐方式。

1097
00:55:01,334 --> 00:55:05,470
右对齐好的？也许有一些颜色。

1098
00:55:05,539 --> 00:55:07,773
让我们来吧，让我们的背景变蓝。

1099
00:55:07,842 --> 00:55:10,576
但我真的不喜欢黑色的蓝色，所以

1100
00:55:10,644 --> 00:55:14,179
我们会去这里，将颜色改为白色。好的？

1101
00:55:14,248 --> 00:55:17,583
所以这是一个相当体面的显示

1102
00:55:17,651 --> 00:55:21,419
在那里，现在反正。现在，如果我们有这些

1103
00:55:21,488 --> 00:55:24,322
按钮被按下，我们需要和这个显示器进行交谈

1104
00:55:24,391 --> 00:55:25,390
告诉它数字是什么

1105
00:55:25,459 --> 00:55:27,292
那么我们该怎么办呢？再好，

1106
00:55:27,361 --> 00:55:30,161
我们需要在该显示和之间建立连接

1107
00:55:30,230 --> 00:55:32,564
我们的代码但这是不一样的连接。

1108
00:55:32,633 --> 00:55:34,966
因为我们不碰那个标签，而且

1109
00:55:35,035 --> 00:55:38,970
它调用一个方法，我们需要一个实例变量，或者

1110
00:55:39,039 --> 00:55:41,806
属性，指的是那个东西，所以我们可以谈谈

1111
00:55:41,875 --> 00:55:44,609
每当我们想要，我们必须把这些数字。

1112
00:55:44,678 --> 00:55:48,180
好的？所以我们还要使用相同的机制

1113
00:55:48,248 --> 00:55:50,782
做一个连接，按下 Control 键

1114
00:55:50,851 --> 00:55:54,519
拖在这里。好的？这一次我们要使用

1115
00:55:54,588 --> 00:55:58,223
outlet。outlet是指指向这一点的属性。

1116
00:55:58,292 --> 00:56:01,526
我要调用这个显示器。这是我们的显示器。

1117
00:56:01,594 --> 00:56:05,030
它在这里得到了类型。是弱类型(weak)而不强类型(strong)

1118
00:56:05,099 --> 00:56:07,065
不是特别了解这个下周我会谈谈

1119
00:56:07,133 --> 00:56:11,436
好的。所以别担心所以，这是

1120
00:56:11,504 --> 00:56:15,841
我们的类的第一个变量。喔喔！好的？

1121
00:56:15,910 --> 00:56:19,678
这里就是Xcode的一些东西

1122
00:56:19,747 --> 00:56:25,150
扔在那里，所以你得到这个，对吧？这个，

1123
00:56:25,219 --> 00:56:28,320
我告诉你忽略，好吗？所以

1124
00:56:28,388 --> 00:56:31,222
这是我们属性的声明

1125
00:56:31,291 --> 00:56:36,194
当然这是一个var，可以让它。如果你想

1126
00:56:36,263 --> 00:56:38,330
一个实例变量在开头设置

1127
00:56:38,399 --> 00:56:40,833
永不改变，可以使用let。这很罕见，但是

1128
00:56:40,901 --> 00:56:45,070
你可以做，通常他们是var。显示，

1129
00:56:45,139 --> 00:56:49,841
这就是名字。 “：UILabel”是类型，

1130
00:56:49,910 --> 00:56:53,144
好的？所以你可能会猜到，这与之有关

1131
00:56:53,213 --> 00:56:57,749
可选，好吗？这有点令人困惑

1132
00:56:57,818 --> 00:57:00,585
一开始就要马上理解是不可能的，虽然这个感叹号

1133
00:57:00,654 --> 00:57:04,623
一般是用来强制解包的，但显然这里

1134
00:57:04,691 --> 00:57:07,459
我们不是在解包，我们是在定义变量

1135
00:57:07,527 --> 00:57:10,262
这个的意思和问号是差不多的

1136
00:57:10,331 --> 00:57:12,063
实际上，现在我要把它改成问号

1137
00:57:12,132 --> 00:57:14,565
之后再改回来

1138
00:57:14,634 --> 00:57:17,869
然后你就能看出区别了。但无论如何

1139
00:57:17,938 --> 00:57:21,873
是可选的UIlabel。现在，为什么这是一个可选的UIlabel？

1140
00:57:21,942 --> 00:57:24,342
为什么这不是一个UIlabel？

1141
00:57:24,411 --> 00:57:27,913
为什么必须是可选的？因为这个UI

1142
00:57:27,982 --> 00:57:31,883
首先出现，iOS需要几纳秒才能加载

1143
00:57:31,952 --> 00:57:35,387
所以当这个UI第一次出现的时候，

1144
00:57:35,456 --> 00:57:39,191
它是缺省值的。关连完之后

1145
00:57:39,259 --> 00:57:42,093
之后就是有值的了

1146
00:57:42,162 --> 00:57:45,397
之后一直都是有值的。

1147
00:57:45,465 --> 00:57:47,966
这就是我刚才去掉的那个感叹号的作用

1148
00:57:48,035 --> 00:57:50,768
现在只要理解这是可选类型就行了

1149
00:57:50,837 --> 00:57:53,405
每次使用的时候都要解包

1150
00:57:53,473 --> 00:57:57,342
仅此而已。现在我们

1151
00:57:57,411 --> 00:57:59,545
不打印数字到控制台了

1152
00:57:59,613 --> 00:58:01,846
将这些数字放入显示器中，

1153
00:58:01,915 --> 00:58:04,416
真的每次按一个数字，我们想把它

1154
00:58:04,485 --> 00:58:07,352
在显示器的最后，如果有56在那里我们

1155
00:58:07,420 --> 00:58:12,758
我们要加个 2，就是 562；再加个 8，就是 5268

1156
00:58:12,826 --> 00:58:16,127
我们就一直往后面加。所以我们就要获取当前

1157
00:58:16,196 --> 00:58:18,663
display 显示的文字，然后把数字加到后面

1158
00:58:18,732 --> 00:58:20,899
所以我要添加另一个小的局部变量。所以我们还需要一个局部变量

1159
00:58:20,968 --> 00:58:26,205
这是一个常量，也称为textcurrentlyInDisplay和

1160
00:58:26,273 --> 00:58:29,541
得到它的值，是通过发送消息到 display

1161
00:58:29,610 --> 00:58:31,143
当然要先解包

1162
00:58:32,646 --> 00:58:34,612
然后再发送消息

1163
00:58:34,681 --> 00:58:38,183
然后这些就是标签所有会响应的消息了

1164
00:58:38,252 --> 00:58:41,452
也是有一大堆，好吧。还是用老方法

1165
00:58:41,521 --> 00:58:45,457
我输入 text，文字就是我想要的

1166
00:58:45,526 --> 00:58:48,459
第一个，标签显示的文字。

1167
00:58:48,528 --> 00:58:52,197
这是一个可选的字符串。好的，我会拿它，好的。

1168
00:58:52,266 --> 00:58:54,399
所以，现在我已经有了文本，但它是可选的。所以，

1169
00:58:54,467 --> 00:58:59,470
我需要解包，好吗？所以现在textCurrentlyInDisplay。

1170
00:58:59,539 --> 00:59:02,541
如果我按 Option 键再点击它，类型就只是字符串了

1171
00:59:02,609 --> 00:59:05,610
我现在就只需要把 display 解包

1172
00:59:05,679 --> 00:59:08,814
赋值 text 为 display 现在的文字

1173
00:59:08,882 --> 00:59:12,684
加上数字。注意当我赋值给一个可选类型时

1174
00:59:12,753 --> 00:59:16,421
text是可选的，对吗？当我把它赋值的时候

1175
00:59:16,489 --> 00:59:20,558
顺便说一句，text 是可读写的

1176
00:59:20,627 --> 00:59:24,929
不像只读的 currentTitle。所以我们能够更改标签的文字

1177
00:59:24,998 --> 00:59:27,999
也能得到它。当我赋值给可选类型的时候

1178
00:59:28,068 --> 00:59:31,403
我并不需要先解包

1179
00:59:31,471 --> 00:59:32,904
所以赋值给可选类型的时候不需要解包

1180
00:59:32,973 --> 00:59:35,807
你直接赋值就可以了。因为可选类型已经知道了

1181
00:59:35,875 --> 00:59:39,043
这个值也一定是可选字符串类型的

1182
00:59:39,112 --> 00:59:42,047
所以我可以直接赋值给它，这样就可以了

1183
00:59:42,116 --> 00:59:51,489
让我们看看有没有用

1184
00:59:51,558 --> 00:59:55,560
我们的界面显示出来了，显示屏也在上面

1185
00:59:55,629 --> 01:00:01,132
我们来试试8，好吧6，好吧，它工作了。

1186
01:00:01,201 --> 01:00:02,601
因为我们按的数字确实添加在了后面

1187
01:00:02,670 --> 01:00:04,303
不过一开始的那个 0

1188
01:00:04,371 --> 01:00:08,406
那是不对的，那并不是我输入的一部分

1189
01:00:08,475 --> 01:00:10,175
那个 0 是我一开始默认显示的

1190
01:00:10,243 --> 01:00:13,078
所以它并不应该一直显示在前面

1191
01:00:13,146 --> 01:00:14,413
这里的问题真的很简单。

1192
01:00:14,481 --> 01:00:17,548
只是我们没有教我们的计算器知道

1193
01:00:17,617 --> 01:00:19,117
哪个部分才是用户输入的

1194
01:00:19,185 --> 01:00:20,652
什么时候用户正在输入

1195
01:00:20,721 --> 01:00:22,488
什么时候它刚开始运行

1196
01:00:22,556 --> 01:00:25,123
或者显示屏刚显示运算的结果

1197
01:00:25,192 --> 01:00:27,625
当然我们输入的时候

1198
01:00:27,694 --> 01:00:30,361
并不希望 0 出现在前面。所以我们

1199
01:00:30,430 --> 01:00:32,931
要让计算器有不同的状态

1200
01:00:32,999 --> 01:00:34,466
知道用户是否在输入的过程中

1201
01:00:34,535 --> 01:00:37,302
实现的方法是定于另一个属性

1202
01:00:37,371 --> 01:00:43,141
称为userIsInTheMiddleOfTyping。

1203
01:00:43,210 --> 01:00:47,546
哪个将是一个Bool。现在我在这里打了一个长名字。舞台

1204
01:00:47,614 --> 01:00:51,183
的效果。我们就叫它 typing 就行了

1205
01:00:53,119 --> 01:00:57,288
你知道，在清晰和简洁之间有权衡。

1206
01:00:57,357 --> 01:01:00,458
好的，简洁是重要的，但清晰度更是如此

1207
01:01:00,527 --> 01:01:05,597
重要。所以，也许isTyping已经够了。

1208
01:01:05,665 --> 01:01:08,967
但是，在清晰度方面，我会略有错误。所以我

1209
01:01:09,036 --> 01:01:10,936
使用这个长的。另一件事，我打了这个原因

1210
01:01:11,005 --> 01:01:13,304
很长时间是告诉你，我从来不会打这个

1211
01:01:13,373 --> 01:01:16,375
再次，因为 Xcode 会帮我自动补全

1212
01:01:16,443 --> 01:01:19,711
当我用到的时候就你们就知道了

1213
01:01:19,779 --> 01:01:22,915
这个漂亮的var，这个Bool。好吧，一个Bool，顺便说一句，

1214
01:01:22,983 --> 01:01:24,315
只是一些可以是true 和 false的东西，

1215
01:01:24,384 --> 01:01:28,353
当然。我有错误。看看那个错误。

1216
01:01:28,422 --> 01:01:31,857
这里的这个小标记，出现在了这一行

1217
01:01:31,926 --> 01:01:34,760
做我刚刚做的什么？这就奇怪了

1218
01:01:34,829 --> 01:01:37,562
这是什么？它说Class'View Controller'

1219
01:01:37,631 --> 01:01:40,999
没有初始化。好的，那是什么呢？

1220
01:01:41,068 --> 01:01:42,634
这与var无关吗？

1221
01:01:42,703 --> 01:01:45,637
好吧，事情是这样的

1222
01:01:45,705 --> 01:01:50,475
Swift 要求所有的属性都要初始化。每个都要

1223
01:01:50,543 --> 01:01:54,246
一个都不能少。可以使用两种方法

1224
01:01:54,315 --> 01:01:57,516
来初始化类和结构体里的属性

1225
01:01:57,585 --> 01:01:59,717
一个是初始化器。

1226
01:01:59,786 --> 01:02:03,055
初始化器是一种特殊的方法，它被称为init，

1227
01:02:03,123 --> 01:02:06,525
在里面。你可以有任何数量的参数

1228
01:02:06,593 --> 01:02:09,895
课堂需要，但在其实现中必须

1229
01:02:09,963 --> 01:02:14,599
初始化所有未初始化的属性。好的？现在，

1230
01:02:14,668 --> 01:02:16,234
我们今天不会谈论初始化器。

1231
01:02:16,303 --> 01:02:18,270
下周三我会谈谈一下，

1232
01:02:18,339 --> 01:02:21,373
其实。所以，我们不会使用一个初始化器。因为

1233
01:02:21,442 --> 01:02:23,976
有第二种方法来初始化，这只是为了

1234
01:02:24,044 --> 01:02:27,445
给它直接赋值。好的，是false，对吧？用户的

1235
01:02:27,514 --> 01:02:30,449
因为一开始的时候用户肯定没有在输入

1236
01:02:30,518 --> 01:02:34,052
所以是 false。错误就解决了

1237
01:02:34,120 --> 01:02:39,324
好的？其实我们也不需要这个。你明白为什么吗

1238
01:02:39,393 --> 01:02:43,094
因为false，只能是一个Bool，所以

1239
01:02:43,163 --> 01:02:48,566
Swift可以推断，这必须是Bool。然后再次，

1240
01:02:48,635 --> 01:02:51,836
我们不希望这些东西在这里，如果我们可以帮助它。现在，

1241
01:02:51,905 --> 01:02:55,473
这家伙呢？这没有初始化他是怎么来的

1242
01:02:55,542 --> 01:02:58,076
为什么没有报错呢？这不公平

1243
01:02:58,145 --> 01:03:01,880
使用了初始化器么？其实原因是因为它是

1244
01:03:01,949 --> 01:03:05,283
一个可选的。可选类型是特别的

1245
01:03:05,352 --> 01:03:08,820
初始化。初始化的时候会被自动

1246
01:03:08,889 --> 01:03:13,659
初始化为 nil，nil 表示缺省值

1247
01:03:13,727 --> 01:03:16,027
nil 在 Swift 里的意思就是缺省值

1248
01:03:16,096 --> 01:03:20,031
表示可选类型没有被赋值。所以在定义

1249
01:03:20,100 --> 01:03:23,001
可选类型时都会自动被初始化为 nil

1250
01:03:23,069 --> 01:03:24,836
这是很有道理的。你有一个可选类型

1251
01:03:24,905 --> 01:03:27,138
一开始是没有值的，直到你赋值给它

1252
01:03:27,207 --> 01:03:30,943
当然你也可以初始化为某个 UILabel 实例

1253
01:03:31,011 --> 01:03:33,812
一开始就有值是可能的

1254
01:03:33,881 --> 01:03:40,351
但如果没有的话，那就是缺省值

1255
01:03:40,420 --> 01:03:43,588
好，大家都明白了。我们可以使用这个userIsInTheMiddleOfTyping

1256
01:03:43,657 --> 01:03:45,023
如果用户正在输入的中途

1257
01:03:45,092 --> 01:03:46,992
打字(userIsInTheMiddleOfTyping)

1258
01:03:47,061 --> 01:03:51,863
然后我们再进行下面的这些操作

1259
01:03:51,931 --> 01:03:54,733
如果并没有开始输入怎么办？那我们就是

1260
01:03:54,802 --> 01:03:58,236
赋值显示屏的文字为当前按下的数字

1261
01:03:58,305 --> 01:04:03,275
我们从头开始输入一个数字。这种情况下

1262
01:04:03,343 --> 01:04:08,580
用户就在输入的过程中了，为 true

1263
01:04:08,649 --> 01:04:11,783
大家都还跟的上吧？这就是我们确保

1264
01:04:11,852 --> 01:04:13,651
计算器正常显示的方法。让我们运行

1265
01:04:13,720 --> 01:04:16,555
看看开头显示 0 的问题是否解决了

1266
01:04:16,624 --> 01:04:18,423
应该是的，因为一开始的时候

1267
01:04:18,492 --> 01:04:20,192
用户并不是在输入的过程中

1268
01:04:20,261 --> 01:04:22,460
当我们输入第一个数字

1269
01:04:22,529 --> 01:04:25,497
就替换为了我们这个数字。但如果我们在输入的过程中

1270
01:04:25,566 --> 01:04:31,135
我们会向后面添加数字

1271
01:04:31,204 --> 01:04:32,671
我们这一步算是完成了

1272
01:04:32,740 --> 01:04:36,442
接下来，我要放一些运算符在这里

1273
01:04:36,510 --> 01:04:39,411
我们可以输入数字，下一步就是运算。

1274
01:04:39,479 --> 01:04:42,147
我会做一个非常糟糕的事情，

1275
01:04:42,215 --> 01:04:46,317
这是我要复制并粘贴7按钮。

1276
01:04:46,386 --> 01:04:48,687
你会明白为什么那么糟糕。和

1277
01:04:48,756 --> 01:04:52,824
我就加一个非常简单的运算符pi吧，π，Option+P

1278
01:04:52,893 --> 01:04:55,293
pi就是在显示屏中显示pi的数值

1279
01:04:55,362 --> 01:04:59,598
这就是它的功能。我还是按住 Control 然后拖到代码里

1280
01:04:59,666 --> 01:05:03,368
让它关连一个方法。选的是 Action，不是 Outlet

1281
01:05:03,437 --> 01:05:05,871
就像是 touchDigit 一样的方法

1282
01:05:05,940 --> 01:05:07,372
我会叫它performOperation，

1283
01:05:07,440 --> 01:05:09,474
这是它的作用，它执行一个运算。

1284
01:05:09,543 --> 01:05:12,177
我会像作业里要求你们的那样

1285
01:05:12,246 --> 01:05:14,947
把这个改成 UIButton

1286
01:05:15,015 --> 01:05:17,615
然后我要连接。所以现在我有这个新的方法

1287
01:05:17,684 --> 01:05:21,820
在这里，它被连接到pi，所以这很好。

1288
01:05:21,889 --> 01:05:22,821
在这里我想做什么？

1289
01:05:22,890 --> 01:05:25,791
我可以像之前一样

1290
01:05:25,859 --> 01:05:30,329
问这个按钮你是什么运算。要不然用 let mathematicalSymbol

1291
01:05:30,397 --> 01:05:34,199
因为这些按钮的标题就是数学运算符

1292
01:05:34,268 --> 01:05:38,036
把 sender.currentTitle! 赋值给这个常量

1293
01:05:38,105 --> 01:05:40,572
好，我现在得到pi了，不过我像给你们看看

1294
01:05:40,641 --> 01:05:43,242
就像我之前说的那样，教你们如何解包

1295
01:05:43,310 --> 01:05:46,344
又不用导致崩溃。我就用这个来演示。让我们来判断

1296
01:05:46,413 --> 01:05:49,915
这是否是个空白的按钮，这个按钮是否有标题

1297
01:05:49,983 --> 01:05:53,085
如果是的话我们什么都不做就行了，不崩溃

1298
01:05:53,154 --> 01:05:54,319
我们什么运算都不进行

1299
01:05:54,388 --> 01:05:55,921
就像用户就没按这个按钮一样，好吗？

1300
01:05:55,990 --> 01:05:59,190
所以，再次，可选类型是如此重要。你可以看到，

1301
01:05:59,259 --> 01:06:03,629
看看这些东西的语法是多么微妙，对吧？

1302
01:06:03,697 --> 01:06:06,197
问号。感叹号。使用可选类型并不需要

1303
01:06:06,266 --> 01:06:08,867
额外太多的代码。我们想要在解包

1304
01:06:08,936 --> 01:06:10,969
可选类型前，判断其是否为空

1305
01:06:11,038 --> 01:06:13,004
而不是将感叹号放在最后，

1306
01:06:13,073 --> 01:06:18,510
我们只要在前面加两个字母，if

1307
01:06:18,578 --> 01:06:22,881
连起来读。如果我能让数学符号符号相等

1308
01:06:22,950 --> 01:06:26,385
sender的currentTitle，然后。所以，

1309
01:06:26,453 --> 01:06:29,054
也就是如果我能够解包这个可选类型，得到它的关联值，

1310
01:06:29,123 --> 01:06:30,255
那么我会做点什么，

1311
01:06:30,324 --> 01:06:32,291
那么你可以把你想要的任何代码放在这里，

1312
01:06:32,359 --> 01:06:33,558
在这里，

1313
01:06:33,627 --> 01:06:37,161
mathematicalSymbol 就是关联值，那个普通的字符串

1314
01:06:37,230 --> 01:06:40,598
已经解包的可选类型，对吗？在这些花括号外，

1315
01:06:40,667 --> 01:06:43,067
mathematicalSymbol 是未定义的，所以没关系。

1316
01:06:43,136 --> 01:06:45,437
它甚至没有定义所以

1317
01:06:45,506 --> 01:06:48,740
在这个mathematicalSymbol，我可以

1318
01:06:48,808 --> 01:06:53,878
说如果数学符号等于，pi，然后做某事。

1319
01:06:53,947 --> 01:06:57,215
否则如果数学符号等于别的东西，

1320
01:06:57,284 --> 01:06:59,952
好的？但是，如果还有的话，如果还有的话，如果那么的话

1321
01:07:00,020 --> 01:07:02,621
将是非常糟糕的代码。所以我要用不同的

1322
01:07:02,690 --> 01:07:05,156
另外一种表达式

1323
01:07:05,225 --> 01:07:08,160
我要使用的是 switch 语句，许多语言都有 switch

1324
01:07:08,228 --> 01:07:10,562
我会尝试匹配这个数学符号

1325
01:07:10,631 --> 01:07:14,532
并不是所有的语言都能匹配字符串的，有些能

1326
01:07:14,601 --> 01:07:17,936
比如 Swift 语言就可以。我能直接用 case "π"

1327
01:07:18,005 --> 01:07:21,573
如果是pi的话，我就这样做

1328
01:07:21,642 --> 01:07:23,274
不幸的是，我在这里收到错误。

1329
01:07:23,343 --> 01:07:25,143
那我该怎么办？我们还是先把这部分加进去吧

1330
01:07:25,212 --> 01:07:29,948
我们就让显示屏的文字

1331
01:07:30,017 --> 01:07:34,152
赋值为pi，3.1415926。这样直接输入挺不规范的

1332
01:07:34,221 --> 01:07:35,520
我们等会儿来解决这个问题

1333
01:07:35,589 --> 01:07:37,856
但这基本上是我想做的，对吧？

1334
01:07:37,925 --> 01:07:40,925
将显示设置为pi。现在我收到一个错误。

1335
01:07:40,994 --> 01:07:43,629
什么是错误？它说 Switch must be exhaustive

1336
01:07:43,697 --> 01:07:46,631
是这样的，用 switch 语句的时候，一定要

1337
01:07:46,700 --> 01:07:50,402
能包含所有的情况。我们也许可以花上

1338
01:07:50,471 --> 01:07:54,172
接着的几节课的时间，输入比如 case "aaa"

1339
01:07:54,241 --> 01:07:58,510
输入所有可能出现的字符串。这当然是不可能的

1340
01:07:58,578 --> 01:08:03,015
幸运的是，我们可以用 default(默认)

1341
01:08:03,083 --> 01:08:05,417
默认(default)只是意味着所有其他情况。

1342
01:08:05,486 --> 01:08:06,651
我就 break，跳出这个 switch 语句

1343
01:08:06,720 --> 01:08:10,755
就用 break 关键字。注意到我这里

1344
01:08:10,824 --> 01:08:13,257
缩进在这里有点混乱。这应该

1345
01:08:13,326 --> 01:08:16,661
真的是这样的缩进。一个很酷的功能

1346
01:08:16,730 --> 01:08:20,298
选择你想要的任何文本，甚至是整个文件，和

1347
01:08:20,367 --> 01:08:24,402
做Control+I缩进缩进，它会重新缩进一切

1348
01:08:24,471 --> 01:08:27,072
我建议你在所有源文件上这样做

1349
01:08:27,141 --> 01:08:29,274
当你打开你的家庭作业只需选择全部，

1350
01:08:29,342 --> 01:08:34,079
缩进。所以我们得到这个pi在这里。让我们看看这是否有效。

1351
01:08:43,857 --> 01:08:45,424
按钮还是没问题

1352
01:08:45,493 --> 01:08:49,995
再试试pi，这很奇怪。

1353
01:08:50,063 --> 01:08:53,899
显示了我这里输入的pi的值

1354
01:08:53,968 --> 01:08:57,069
但为什么后面还有一个pi的符号呢？

1355
01:08:57,137 --> 01:09:02,140
这似乎很奇怪让我们尝试一个新的数字。所以，不，没关系。

1356
01:09:02,209 --> 01:09:05,376
当我输入更多的数字时，它会添加到最后。所以

1357
01:09:05,445 --> 01:09:06,945
即使pi符号不在那里，

1358
01:09:07,014 --> 01:09:08,847
我可以改变pi的值，

1359
01:09:08,916 --> 01:09:12,885
随便给它加个几位数，这可不行

1360
01:09:12,953 --> 01:09:15,954
再看看这个，我再多加几位小数

1361
01:09:16,022 --> 01:09:19,024
它就不显示了，这可真是一团糟

1362
01:09:19,093 --> 01:09:21,226
这里有三大问题。一，那个pi

1363
01:09:21,294 --> 01:09:23,095
二，能向pi后面加小数位

1364
01:09:23,164 --> 01:09:24,730
三，会出现省略号

1365
01:09:24,798 --> 01:09:25,730
那么我们如何解决这些问题？

1366
01:09:25,799 --> 01:09:28,967
我们抓紧时间一起解决吧

1367
01:09:29,036 --> 01:09:31,670
先是这个结尾出现pi的问题

1368
01:09:31,739 --> 01:09:34,239
我在哪里更改过显示屏的内容？这里

1369
01:09:34,308 --> 01:09:36,708
但pi肯定不是从这里来的

1370
01:09:36,777 --> 01:09:40,712
这里也改过，但是这里只会是显示一个数字

1371
01:09:40,781 --> 01:09:43,015
肯定不是这里，因为我这里不只是一位数

1372
01:09:43,083 --> 01:09:49,087
那只剩下这里了

1373
01:09:49,156 --> 01:09:54,392
这就是问题。你看到pi按钮在那里吗？

1374
01:09:54,461 --> 01:09:58,964
它也和这个函数关连上了，也关连了这个函数

1375
01:09:59,033 --> 01:10:03,201
所以两个函数的内容都在执行。先是执行这个部分，显示了pi的数值

1376
01:10:03,270 --> 01:10:05,971
然后又调用了这个方法，把pi加到了后面

1377
01:10:06,040 --> 01:10:10,575
数字是pi，好吗？所以，那很糟糕现在，我们怎么样

1378
01:10:10,644 --> 01:10:15,080
要解决这个问题？题？ >>你是怎么设定的

1379
01:10:15,149 --> 01:10:15,681
顺序范围？是的，

1380
01:10:15,749 --> 01:10:16,915
问题是调用方法的顺序是怎么决定的？

1381
01:10:16,984 --> 01:10:18,983
答案是不确定的

1382
01:10:19,052 --> 01:10:21,019
据我的经验，通常是按字母顺序

1383
01:10:21,087 --> 01:10:23,989
但并没有一个统一的标准。所以你最好不要依靠调用的顺序

1384
01:10:24,058 --> 01:10:26,191
这里 performOperation 是在 touchDigit 之前

1385
01:10:26,260 --> 01:10:29,461
我也不知道。一般来说不会像这样

1386
01:10:29,529 --> 01:10:31,563
和两个方法都关连起来。我们这里肯定是有问题的

1387
01:10:31,631 --> 01:10:35,000
导致程序出了问题，所以我们需要解决这个问题。

1388
01:10:35,068 --> 01:10:37,502
怎么办？其实还有另一种查看关连的方法

1389
01:10:37,571 --> 01:10:40,772
除了用这个小圆点之外，还能直接右键点击

1390
01:10:40,841 --> 01:10:43,976
界面里的控件。比如我右键点击pi

1391
01:10:44,044 --> 01:10:47,345
就出现这个很大的窗口，列出了所有和它的关连

1392
01:10:47,414 --> 01:10:49,614
这将是所有的实例变量，所有的方法，

1393
01:10:49,683 --> 01:10:52,817
我们可以看到，这里也列出了所有 Touch Up Inside

1394
01:10:52,886 --> 01:10:56,521
也就是手指抬起的时候

1395
01:10:56,590 --> 01:11:00,692
如果在按钮内部，就发出消息

1396
01:11:00,760 --> 01:11:02,727
给 touchDigit 和 performOperation

1397
01:11:02,796 --> 01:11:05,763
我们显然不希望pi按钮调用 touchDigit

1398
01:11:05,832 --> 01:11:09,635
但我为什么会有这个关连呢？因为我复制和粘贴了7。

1399
01:11:09,703 --> 01:11:12,404
记住我说这是一个坏主意？是的，这就是为什么。所以

1400
01:11:12,473 --> 01:11:16,508
让我们断开它只需点击这个小x，好吧，

1401
01:11:16,577 --> 01:11:22,181
现在就只会发消息给 performOperation，不会给 touchDigit 了

1402
01:11:22,249 --> 01:11:24,649
第一个问题就解决了。那我能够

1403
01:11:24,718 --> 01:11:28,387
给pi再加个几位的问题呢？

1404
01:11:28,455 --> 01:11:31,089
这也很容易解决。我什么时候可以向显示屏

1405
01:11:31,158 --> 01:11:34,258
加数字？当用户正在输入的时候

1406
01:11:34,327 --> 01:11:35,960
用户按下pi之后

1407
01:11:36,029 --> 01:11:39,364
还在输入的过程中吗？没有

1408
01:11:39,433 --> 01:11:41,933
他们已经输入完pi了，他们并不是在输入pi的过程中

1409
01:11:42,002 --> 01:11:43,402
实际上，他们正在输入一个数字。

1410
01:11:43,471 --> 01:11:45,904
事实上，任何时候我们都执行任何操作，

1411
01:11:45,973 --> 01:11:49,007
就可以让 userIsInTheMiddleOfTyping = false

1412
01:11:49,076 --> 01:11:51,476
因为用户显然已经还在输入的过程中了

1413
01:11:51,545 --> 01:11:53,745
显示的内容只会是运算的结果

1414
01:11:53,813 --> 01:11:57,849
好，解决了第二个问题。那省略号呢

1415
01:11:57,918 --> 01:12:00,385
那些被截断的数字呢

1416
01:12:00,453 --> 01:12:03,956
我们解决的方法挺机智的。标签里有个很酷的功能

1417
01:12:04,024 --> 01:12:06,024
叫做 Autoshrink，自动缩小，看到了吗

1418
01:12:06,093 --> 01:12:08,460
选中一个标签，调出检查器

1419
01:12:08,528 --> 01:12:11,730
找到这里的 Autoshrink。你可以选择缩小到

1420
01:12:11,798 --> 01:12:14,632
例如，最小字体大小，就是说9字体。

1421
01:12:14,701 --> 01:12:16,468
我们现在数字多起来之后

1422
01:12:16,536 --> 01:12:19,571
它就会自动缩小，而不是显示省略号了

1423
01:12:19,639 --> 01:12:21,940
但这并不一定是最好的解决方案

1424
01:12:22,009 --> 01:12:24,576
更好的方法是，让计算器只显示

1425
01:12:24,644 --> 01:12:27,112
一定长度的数字，或是只到小数点后几位

1426
01:12:27,181 --> 01:12:28,780
可能会更好。和

1427
01:12:28,849 --> 01:12:30,782
这会作为你们作业里的加分项

1428
01:12:30,851 --> 01:12:33,685
祝你们好运吧。我们稍作修改

1429
01:12:33,754 --> 01:12:35,454
解决了所有的问题，来实际看看吧

1430
01:12:43,964 --> 01:12:48,533
数字键还是正常的。pi，太好了，没有结尾的符号了

1431
01:12:48,602 --> 01:12:52,537
再按数字键也不是加在pi后面了

1432
01:12:52,606 --> 01:12:54,673
再看看如果有很多数字呢

1433
01:12:55,810 --> 01:12:57,642
是的，看看，它是自动收缩。

1434
01:12:57,711 --> 01:12:59,144
好的，我们不会丢失任何数字。

1435
01:12:59,213 --> 01:13:00,812
是的，可能不是最好的解决方案，但是

1436
01:13:00,881 --> 01:13:05,083
我会告诉你自动收缩。好的，下一步是什么

1437
01:13:05,151 --> 01:13:09,254
我们要在这里解决这个小问题。好的？

1438
01:13:09,323 --> 01:13:12,757
这真的很丑，真的是我想要的是这样的

1439
01:13:12,826 --> 01:13:17,061
在Swift，Double.pi，pi在双精度下的浮点值

1440
01:13:17,130 --> 01:13:20,798
当然我不能直接就这样写

1441
01:13:20,867 --> 01:13:23,735
Cannot assign value of type 'Double' to type 'String?'

1442
01:13:23,804 --> 01:13:26,638
不能把双精度类型的值赋给可选字符串

1443
01:13:26,707 --> 01:13:30,008
因为可选字符串的值不是 nil 的话

1444
01:13:30,077 --> 01:13:33,278
就只能是字符串。所以我们要设置的就是那个关联值

1445
01:13:33,347 --> 01:13:36,047
有谁知道，我今天讲过的哪个内容

1446
01:13:36,116 --> 01:13:42,821
能够把这个转换成字符串？没有人自告奋勇？

1447
01:13:42,890 --> 01:13:46,258
没错，就是反斜线，左括号

1448
01:13:46,326 --> 01:13:48,861
右括号，就是这个窍门

1449
01:13:48,929 --> 01:13:52,230
你可以把Double.pi放在这里。

1450
01:13:52,299 --> 01:13:55,033
双精度小数可以转换成一个字符串，宾果。

1451
01:13:55,102 --> 01:13:59,737
现在，这有点丑，好吗？这真的看起来不好看

1452
01:13:59,806 --> 01:14:03,609
因为这个适用于把其它东西插入到字符串里

1453
01:14:03,677 --> 01:14:06,644
而不是把它转换成字符串的方法

1454
01:14:06,713 --> 01:14:08,814
真正创建一个新字符串的方法是创建

1455
01:14:08,882 --> 01:14:11,816
一个新的字符串。所以，在这里你看到什么语法

1456
01:14:11,885 --> 01:14:16,288
是创建一个新的对象，一个新的结构体或一个新的类，

1457
01:14:16,356 --> 01:14:19,625
好的？类的名称，然后括号。

1458
01:14:19,693 --> 01:14:23,494
现在，在这些括号内，可以是任何类

1459
01:14:23,563 --> 01:14:27,565
可以用来构造对象的参数

1460
01:14:27,634 --> 01:14:30,401
任何支持的参数。还记得我提到那些初始化器吗？

1461
01:14:30,470 --> 01:14:33,138
这些就是初始化器的参数

1462
01:14:33,206 --> 01:14:34,706
你有多个初始化器。

1463
01:14:34,775 --> 01:14:36,875
String有一大堆初始化器。

1464
01:14:36,944 --> 01:14:39,444
其中一个

1465
01:14:39,513 --> 01:14:44,749
能接受一个双精度小数。所以这才是

1466
01:14:44,818 --> 01:14:46,484
把双精度小数(double)转换为字符串(string)的方法

1467
01:14:46,553 --> 01:14:48,820
在代码中看起来好多了，对吧。

1468
01:14:48,889 --> 01:14:52,524
更明显的是我们在做什么，好吗？

1469
01:14:52,592 --> 01:14:55,527
好的，我们在这里添加另一个运算，

1470
01:14:55,596 --> 01:14:59,030
平方根。我需要这个符号

1471
01:14:59,099 --> 01:15:01,967
从菜单里的 Edit > Emoji & Symbols

1472
01:15:02,035 --> 01:15:06,338
然后搜索。虽然我们可以就用这个笑脸符号

1473
01:15:06,407 --> 01:15:10,275
但我们还是把平方根找出来。square root，出来了

1474
01:15:10,344 --> 01:15:14,846
我们就使用这个平方根符号

1475
01:15:14,914 --> 01:15:16,748
然后 Command+C 复制到剪贴板，等会在代码里用

1476
01:15:16,817 --> 01:15:18,050
好的，所以我们有这个平方根按钮，

1477
01:15:18,118 --> 01:15:21,753
与且仅与 performOperation 关连

1478
01:15:21,821 --> 01:15:25,724
我们 switch 再加一个情况，如果是平方根，case "√"

1479
01:15:25,793 --> 01:15:29,160
我们就把显示的文字

1480
01:15:29,229 --> 01:15:32,964
赋值为某个数的平方根

1481
01:15:33,033 --> 01:15:35,600
我们希望这是什么的平方根？

1482
01:15:35,669 --> 01:15:39,370
应该是目前显示屏内容的平方根

1483
01:15:39,439 --> 01:15:45,710
能直接把 display!.text 作为参数吗

1484
01:15:45,779 --> 01:15:49,047
不行，因为那是个字符串，怎么计算一个字符串的平方根啊

1485
01:15:49,116 --> 01:15:53,818
还有一个问题，sqrt 的返回值是双精度型的

1486
01:15:53,887 --> 01:15:56,855
我们不能把它赋值给一个字符串

1487
01:15:56,924 --> 01:16:00,892
所以我们至少需要用 String 的初始化器

1488
01:16:00,961 --> 01:16:04,662
但这个部分还是字符串。先把这个部分单独出来

1489
01:16:04,731 --> 01:16:06,131
存到一个局部变量 operand

1490
01:16:06,200 --> 01:16:10,569
我们可以这样做，好吗？所以我们需要这个操作数，

1491
01:16:10,638 --> 01:16:15,574
我们能把它转换为双精度小数(Doblue)吗？

1492
01:16:15,642 --> 01:16:21,079
我们能把它转换为双精度小数吗？

1493
01:16:21,148 --> 01:16:24,083
能像我们转字符串那样吗？能反过来吗？

1494
01:16:25,219 --> 01:16:29,922
答案是肯定的。更准确地说，大部分时候可以

1495
01:16:29,990 --> 01:16:34,326
因为，如果那个字符串是 hello

1496
01:16:34,395 --> 01:16:39,164
你要怎么把 hello 转成小数？这是做不到的

1497
01:16:39,233 --> 01:16:43,936
所以这个双精度的初始化器，参数是字符串

1498
01:16:44,004 --> 01:16:48,340
返回值是一个可选的双精度。可以理解吧

1499
01:16:48,408 --> 01:16:50,709
给它个字符串，如果没法转换

1500
01:16:50,778 --> 01:16:53,511
返回就会缺省值。也就是表示无法转换

1501
01:16:53,580 --> 01:16:57,516
所以我们可以看到这个 operand，是 Double? 类型的

1502
01:16:57,585 --> 01:16:59,618
好的？和上面字符串的初始化器是不一样的

1503
01:16:59,687 --> 01:17:01,619
字符串不需要返回可选字符串，

1504
01:17:01,688 --> 01:17:04,323
因为它总是可以将double转换成字符串。

1505
01:17:04,391 --> 01:17:06,224
但是你不能总是把一个字符串转换成一个double，

1506
01:17:06,293 --> 01:17:08,427
它必须看起来像double。好的？

1507
01:17:08,495 --> 01:17:10,395
所以，我们要这样做，我要去

1508
01:17:10,464 --> 01:17:13,231
直接用感叹号强制解包

1509
01:17:13,300 --> 01:17:16,068
假设显示的内容

1510
01:17:16,136 --> 01:17:19,804
总是能转换的。虽然这个假设很大胆

1511
01:17:19,873 --> 01:17:23,007
但现在先这样吧。还是顺便用 Ctrl+I

1512
01:17:23,076 --> 01:17:26,511
把代码缩进。都还能理解吧？

1513
01:17:26,580 --> 01:17:29,280
这样就完成了，operand 是 Double 型的

1514
01:17:29,349 --> 01:17:31,015
我就能直接求它的平方根了

1515
01:17:31,084 --> 01:17:33,285
再转成字符串显示出来

1516
01:17:33,353 --> 01:17:36,121
好的，哇，这很麻烦好的，

1517
01:17:36,190 --> 01:17:39,123
那真的很杂乱的代码，我必须解决这个问题，但是

1518
01:17:39,192 --> 01:17:41,960
从概念上讲，你希望了解现在的情况

1519
01:17:42,028 --> 01:17:47,833
那里。所以我们来做这个，我们来试试81平方根。

1520
01:17:47,901 --> 01:17:51,069
再次平方根。再次平方根。 pi的平方根如何？

1521
01:17:51,138 --> 01:17:55,106
78平方根？好的，这是完美的。

1522
01:17:55,175 --> 01:17:59,511
但是，我们的代码在这里真的是一团糟。你可以想象，

1523
01:17:59,580 --> 01:18:02,113
如果我们要做另外一种情况和另一种情况。

1524
01:18:02,182 --> 01:18:04,416
我们总是这样做，换成 Double 再转回 String

1525
01:18:04,485 --> 01:18:07,285
无处不在，每个地方都强制解包。好的，

1526
01:18:07,354 --> 01:18:09,254
这里有太多不安全的感叹号

1527
01:18:09,323 --> 01:18:11,123
这是第一个问题。第二个问题是

1528
01:18:11,191 --> 01:18:12,524
转换过来转换过去太麻烦了

1529
01:18:12,592 --> 01:18:15,227
两个问题都要解决。从感叹号开始

1530
01:18:15,295 --> 01:18:19,230
仔细观察，我每次用 display 的时候

1531
01:18:19,299 --> 01:18:20,732
可以看出我到处都在用

1532
01:18:20,800 --> 01:18:23,268
每次用都有感叹号

1533
01:18:23,337 --> 01:18:27,372
每次都强制解包，即使我知道

1534
01:18:27,441 --> 01:18:32,243
只要 iOS 系统完成初始化之后

1535
01:18:32,312 --> 01:18:34,780
display 总是存在的，不会出现缺省值的情况

1536
01:18:34,848 --> 01:18:38,850
我们回到这个问号

1537
01:18:38,919 --> 01:18:42,821
这就是在定义的时候使用感叹号的原因

1538
01:18:42,889 --> 01:18:46,258
对于定义可选类型而言，这个感叹号

1539
01:18:46,326 --> 01:18:50,795
和问号是差不多的。只不过每次使用的时候

1540
01:18:50,864 --> 01:18:53,831
会自动强制解包

1541
01:18:53,900 --> 01:18:56,969
因为会自动解包，所以我们把下面代码里

1542
01:18:57,037 --> 01:18:58,570
所有 display 后面的感叹号都去掉

1543
01:18:58,639 --> 01:19:01,539
还是能够正常运行的，因为都自动解包了

1544
01:19:01,608 --> 01:19:05,810
但即使如此，如果 display 缺省值的话，还是会崩溃的

1545
01:19:05,879 --> 01:19:09,481
因为这实际上会隐式解包这个 display

1546
01:19:09,550 --> 01:19:14,119
这就是所谓的 implicitly unwrapped optional

1547
01:19:14,188 --> 01:19:17,856
隐式解析可选类型

1548
01:19:17,924 --> 01:19:20,792
这意味着我们可以把所有的

1549
01:19:20,861 --> 01:19:23,795
display! 替换成 display

1550
01:19:23,864 --> 01:19:27,132
这使得我们的代码看起来更好一些。好的？

1551
01:19:27,200 --> 01:19:31,170
但我们还是要强制解包 text 的，没有办法

1552
01:19:31,238 --> 01:19:33,404
下面的这行需要保留感叹号

1553
01:19:33,473 --> 01:19:36,909
text 并不是一个隐式解包的可选类型

1554
01:19:36,977 --> 01:19:39,678
那这些来回转换的呢？

1555
01:19:39,746 --> 01:19:41,913
解决方法是如果我能有个变量var

1556
01:19:41,982 --> 01:19:44,216
叫 displayValue，显示的数值

1557
01:19:44,284 --> 01:19:49,454
是 Double 类型的变量

1558
01:19:49,522 --> 01:19:54,425
如果它能够和显示屏的数值保持同步

1559
01:19:54,494 --> 01:19:57,462
并以小数存储该多好。现在我们获取显示的值只能是字符串

1560
01:19:57,531 --> 01:19:59,764
也只能设置为一个字符串

1561
01:19:59,833 --> 01:20:02,634
我能不能有这样一个神奇的变量

1562
01:20:02,703 --> 01:20:05,404
值总是显示屏里的小数？因为我每次使用的时候

1563
01:20:05,472 --> 01:20:08,440
我总是需要小数，每次设置的时候也是小数

1564
01:20:08,508 --> 01:20:11,509
那要怎么做呢？Swift 里

1565
01:20:11,578 --> 01:20:16,582
有个很厉害的特性叫做，computed property，计算型属性

1566
01:20:16,650 --> 01:20:19,752
只需要把代码放到变量后面的那对大括号里

1567
01:20:19,820 --> 01:20:22,587
就能实时计算变量的值了，而不是依靠存储的值

1568
01:20:22,656 --> 01:20:25,290
userIsInTheMiddleOfTyping 这个变量的值

1569
01:20:25,359 --> 01:20:27,826
是存储在某个地方的，displayValue 则是我们计算的

1570
01:20:27,894 --> 01:20:33,098
我们既能计算，get，获取的值

1571
01:20:33,167 --> 01:20:39,838
也能计算，set，赋于的值。所以你可以有一些代码

1572
01:20:39,906 --> 01:20:42,841
负责计算获取的值，也可以有代码处理赋值的情况

1573
01:20:42,910 --> 01:20:44,843
所以我们不会在任何地方存储displayValue。

1574
01:20:44,912 --> 01:20:45,777
我们会处理访问和赋值的计算

1575
01:20:45,846 --> 01:20:48,046
计算的数据源又是哪里呢？

1576
01:20:48,114 --> 01:20:51,983
是标签显示的文字。那该怎么写 getter？

1577
01:20:52,052 --> 01:20:55,020
我们就 return，返回用小数表示的

1578
01:20:55,089 --> 01:20:59,024
显示屏的文字。不用解包 display

1579
01:20:59,093 --> 01:21:02,127
但是要解包 text。然后强制解包这个整体

1580
01:21:02,196 --> 01:21:06,331
我还是假设显示的内容

1581
01:21:06,400 --> 01:21:07,799
一定能被解析为一个双精度小数

1582
01:21:07,867 --> 01:21:09,935
也许之后我会改主意

1583
01:21:10,004 --> 01:21:12,070
但现在我还是这么做假设。那被赋值的时候怎么办呢？

1584
01:21:12,139 --> 01:21:16,075
在被赋值的时候，我让 display 的 text

1585
01:21:16,143 --> 01:21:19,010
赋值为一个字符串

1586
01:21:19,079 --> 01:21:22,213
字符串是我们想要显示屏接下来显示的值

1587
01:21:22,282 --> 01:21:25,917
也就是比如写 displayValue = 5

1588
01:21:25,986 --> 01:21:29,988
我们就把 5

1589
01:21:30,057 --> 01:21:34,659
转换成字符串显示到显示屏

1590
01:21:34,728 --> 01:21:38,364
那这个字符串构造器的参数写什么？

1591
01:21:38,432 --> 01:21:42,401
计算属性的 set 里

1592
01:21:42,469 --> 01:21:46,638
有个特殊的变量叫做 newValue

1593
01:21:46,707 --> 01:21:50,175
newValue 和这个变量是同一个类型的

1594
01:21:50,243 --> 01:21:53,145
它就是那个在赋值语句右边的

1595
01:21:53,214 --> 01:21:58,683
你让变量等于的那个值

1596
01:21:58,752 --> 01:22:00,319
现在我们有这个displayValue

1597
01:22:00,387 --> 01:22:02,954
会和显示屏保持同步，也能够在下面使用了

1598
01:22:03,023 --> 01:22:08,026
看这个代码，displayValue等于pi。

1599
01:22:08,095 --> 01:22:12,964
完成，摆脱这一切的混乱。 displayValue等于

1600
01:22:13,033 --> 01:22:17,669
displayValue的平方根。突然间，

1601
01:22:17,738 --> 01:22:21,540
这里的代码已经变得至关重要了，对吧？

1602
01:22:21,608 --> 01:22:25,410
这是你可能输入的最短的代码

1603
01:22:25,479 --> 01:22:30,782
来让显示器显示派

1604
01:22:30,851 --> 01:22:34,419
当我用 displayValue = 的时候，运行的是 set 里这段代码

1605
01:22:34,488 --> 01:22:38,891
我在这里访问 displayValue 的时候，运行的是 get 里这段代码

1606
01:22:38,959 --> 01:22:40,525
这就是计算型变量

1607
01:22:40,594 --> 01:22:41,926
它们无处不在

1608
01:22:41,995 --> 01:22:46,231
你已经在这里看到过一个了，就是这个 currentTitle

1609
01:22:46,300 --> 01:22:49,434
它就是个由按钮类计算的计算属性

1610
01:22:49,503 --> 01:22:52,003
它计算出现在按钮上的标题

1611
01:22:52,072 --> 01:22:55,273
然后返回给你。具体的实现

1612
01:22:55,342 --> 01:22:56,675
就会是 return 什么什么一类的

1613
01:22:56,743 --> 01:22:59,444
我怎么知道的？因为这是只读的，而只有计算属性能实现

1614
01:22:59,513 --> 01:23:03,448
完全只读的。（可以更改 setter 的访问级别来实现伪只读）

1615
01:23:03,517 --> 01:23:06,251
让我们来确认一下有没有导致新 bug

1616
01:23:06,320 --> 01:23:14,393
毕竟整理了代码。试试 89

1617
01:23:14,461 --> 01:23:18,463
平方根，81，平方根，平方根，平方根。

1618
01:23:18,532 --> 01:23:21,366
Pi 78平方根。好的，

1619
01:23:21,434 --> 01:23:25,537
它的工作好的，这是很多东西要消化，

1620
01:23:25,606 --> 01:23:29,107
我知道。你们花时间理解记忆。星期三开始，

1621
01:23:29,176 --> 01:23:31,610
我会和你谈谈MVC，这个设计范例，和

1622
01:23:31,679 --> 01:23:35,380
那么我们将添加MVC到这个和

1623
01:23:35,448 --> 01:23:37,983
我们还要确保该UI适用于所有设备。

1624
01:23:39,119 --> 01:23:40,752
好的，再见。 >>

1625
01:23:40,821 --> 01:23:50,228
更多，请访问我们在stanford.edu。

