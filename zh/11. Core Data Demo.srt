1
00:00:00,401 --> 00:00:04,569
[MUSIC]

2
00:00:04,638 --> 00:00:08,339
斯坦福大学

3
00:00:08,408 --> 00:00:11,075
>>欢迎来到斯坦福CS193P，

4
00:00:11,144 --> 00:00:13,978
开发iOS应用程序

5
00:00:14,047 --> 00:00:16,414
是2017年的冬天。

6
00:00:16,483 --> 00:00:19,083
这是11号演讲

7
00:00:19,152 --> 00:00:22,654
今天我们要做一个巨大的演示。

8
00:00:22,723 --> 00:00:25,390
上次我通过基本做的事让你受苦

9
00:00:25,459 --> 00:00:26,625
所有幻灯片

10
00:00:26,693 --> 00:00:30,895
现在，你可以一直享受所有的演示。

11
00:00:30,964 --> 00:00:33,464
它们都将是关于核心数据和应用所有

12
00:00:33,533 --> 00:00:36,268
我们在上一次演讲中学到的一些演示。

13
00:00:36,337 --> 00:00:38,870
然后，我们将会回到幻灯片，所以

14
00:00:38,938 --> 00:00:42,374
让我只是给你一个在这里发生的事情的头脑。

15
00:00:42,443 --> 00:00:45,043
星期五，我们有这个其他数据库机制

16
00:00:45,112 --> 00:00:46,712
在iCloud中存储数据。

17
00:00:46,780 --> 00:00:50,248
我高度推荐这个，在我们的星期五部分，

18
00:00:50,316 --> 00:00:51,883
正常的地方和时间

19
00:00:51,951 --> 00:00:52,918
星期一是假期，所以

20
00:00:52,986 --> 00:00:55,353
不要在周一出现在这里我不会在这里。

21
00:00:55,422 --> 00:00:58,356
接下来的星期三，我会去最终

22
00:00:58,425 --> 00:01:01,226
项目要求，包括标题和

23
00:01:01,295 --> 00:01:03,795
我们也会做这个话题，autolayout。

24
00:01:03,863 --> 00:01:09,200
现在，你的任务五已经

25
00:01:09,269 --> 00:01:14,439
已经发布了，这是一个

26
00:01:14,508 --> 00:01:19,544
一周从今天开始讲课。

27
00:01:19,612 --> 00:01:23,882
所以这里是Smashtag从上周。

28
00:01:23,950 --> 00:01:26,952
记住我们有一个MVC，我们输入搜索

29
00:01:27,020 --> 00:01:29,354
字符串，#Stanford或其他，

30
00:01:29,423 --> 00:01:31,790
它拉下一堆tweets。

31
00:01:31,859 --> 00:01:34,592
现在我们要添加另一个MVC，

32
00:01:34,661 --> 00:01:35,961
一个核心数据驱动的MVC。

33
00:01:36,029 --> 00:01:40,198
而这个MVC将会显示所有的Twitter用户

34
00:01:40,267 --> 00:01:44,035
啾啾所有在这个MVC中显示的推文

35
00:01:44,104 --> 00:01:45,069
在这里

36
00:01:45,138 --> 00:01:48,072
所以，如果你输入一个特定的搜索字词，如#Stanford，

37
00:01:48,141 --> 00:01:49,674
斯坦福大学获得了一大堆推文。

38
00:01:49,743 --> 00:01:51,342
然后这个MVC上会有一个按钮，

39
00:01:51,411 --> 00:01:52,878
我们将把它放在标题栏中，

40
00:01:52,946 --> 00:01:54,780
我们会告诉你如何做到这一点。

41
00:01:54,848 --> 00:01:55,881
你会点击那个按钮。

42
00:01:55,949 --> 00:01:58,483
它将与所有的用户一起推出一个新的MVC

43
00:01:58,552 --> 00:02:00,552
我们也会放在那里多少次，

44
00:02:00,621 --> 00:02:02,187
他们推几个tweet。

45
00:02:02,256 --> 00:02:05,990
当我们这样做时，我们只会看着Twitter

46
00:02:06,059 --> 00:02:08,593
在这个结果中，这个搜索结果就在这里，

47
00:02:08,662 --> 00:02:11,329
或者从打字这个搜索字词来的。

48
00:02:11,398 --> 00:02:15,233
好的，所以这一切都是核心数据。

49
00:02:15,302 --> 00:02:17,469
所以我们在应用程序中需要核心数据。

50
00:02:17,537 --> 00:02:20,805
当我们构建Smashtag时，我们没有点击使用核心数据，所以

51
00:02:20,874 --> 00:02:23,708
我们将要经过我谈的程序

52
00:02:23,777 --> 00:02:28,514
关于上次添加核心数据到我们的应用程序。

53
00:02:28,582 --> 00:02:30,916
我们将通过创建一个虚拟对象来做到这一点

54
00:02:30,984 --> 00:02:31,749
应用程序在这里。

55
00:02:31,818 --> 00:02:33,885
我们去新的>项目。

56
00:02:33,954 --> 00:02:35,454
所以我们要创建一个虚拟项目，

57
00:02:35,522 --> 00:02:37,189
你可以打电话给这个项目任何你想要的。

58
00:02:37,257 --> 00:02:39,057
我会叫它Foo。

59
00:02:39,125 --> 00:02:42,528
只需确保在那里点击使用核心数据。

60
00:02:44,130 --> 00:02:46,397
我们可以把它放在任何我们想要的地方，我们将要转身

61
00:02:46,466 --> 00:02:47,866
在一段时间内将其删除。

62
00:02:47,934 --> 00:02:50,702
你可以看到它已经创建了这个虚拟项目。

63
00:02:50,771 --> 00:02:52,738
我们对这里真的很感兴趣

64
00:02:52,806 --> 00:02:55,507
来自AppDelegate的代码执行核心数据。

65
00:02:55,576 --> 00:02:58,610
你可以看到这个AppDelegate导入CoreData。

66
00:02:58,679 --> 00:03:01,345
现在我们没有谈论AppDelegate，我们会的。

67
00:03:01,414 --> 00:03:04,115
它是应用程序生命周期的一部分。

68
00:03:04,184 --> 00:03:05,016
但是，现在，

69
00:03:05,084 --> 00:03:07,452
我们需要知道的是，我们将在这里下去

70
00:03:07,521 --> 00:03:08,754
得到这个东西或核心数据，

71
00:03:08,822 --> 00:03:12,157
你从幻灯片中识别出来。

72
00:03:12,225 --> 00:03:16,094
并注意到这个应用程序将会终止调用

73
00:03:16,163 --> 00:03:17,295
saveContext。

74
00:03:17,364 --> 00:03:21,366
SaveContext是您获得的核心数据方法之一

75
00:03:21,434 --> 00:03:23,051
所以我实际上会选择它以及所有的休息

76
00:03:23,052 --> 00:03:24,669
在这里免费

77
00:03:24,738 --> 00:03:27,906
这个东西被标记为Core Data。

78
00:03:27,975 --> 00:03:29,307
我只是要复制它。

79
00:03:29,376 --> 00:03:31,776
我要关闭这个项目，我不需要它。

80
00:03:31,845 --> 00:03:35,547
我将在Smashtag中转到AppDelegate

81
00:03:35,616 --> 00:03:36,447
在这里

82
00:03:36,516 --> 00:03:39,017
而您可以看到它不会在那里导入核心数据

83
00:03:39,086 --> 00:03:39,584
在顶部。

84
00:03:39,653 --> 00:03:41,919
applicationWill也不会终止调用

85
00:03:41,988 --> 00:03:45,390
SaveContext，也没有任何其他的东西在那里。

86
00:03:45,459 --> 00:03:48,393
所以我只是把代码粘贴到这里。

87
00:03:48,461 --> 00:03:53,197
这个代码是通用的，它在所有应用程序中都有效。

88
00:03:53,266 --> 00:03:56,768
唯一具体的是这个字符串

89
00:03:56,837 --> 00:03:59,938
在这里，它告诉你数据模型，事情

90
00:04:00,007 --> 00:04:03,575
描述对象或数据库中的模式。

91
00:04:03,643 --> 00:04:06,044
现在你注意到我们在这里有一个错误，那就是

92
00:04:06,112 --> 00:04:08,780
因为它不能识别NSPeristentContainer。

93
00:04:08,848 --> 00:04:12,784
因为NSPeristentContainer在一个不同的框架

94
00:04:12,853 --> 00:04:15,019
比UIKit，它在CoreData中。

95
00:04:15,088 --> 00:04:18,657
所以每次在快速文件中使用CoreData时，

96
00:04:18,725 --> 00:04:22,494
您需要导入CoreData或者它不会在此识别

97
00:04:22,563 --> 00:04:27,466
管理对象或核心数据中的任何其他符号。

98
00:04:27,534 --> 00:04:31,303
这就是我们使用Core Data的一件事

99
00:04:31,371 --> 00:04:33,004
另一个实际上是创建数据模型本身。

100
00:04:33,005 --> 00:04:34,638
按钮没有。

101
00:04:34,708 --> 00:04:36,641
而我们使用File> New> File，所以

102
00:04:36,710 --> 00:04:38,276
我要去文件>新建>文件。

103
00:04:38,345 --> 00:04:42,080
而且我们通常会在这里挑选东西，但是我们会去

104
00:04:42,149 --> 00:04:46,651
向下滚动到Core Data并选择数据模型。

105
00:04:46,720 --> 00:04:48,787
我们不想要Mapping Model，我们要数据模型。

106
00:04:50,257 --> 00:04:52,324
这只是我们描述的东西

107
00:04:52,393 --> 00:04:55,026
我们的实体和属性。

108
00:04:55,095 --> 00:04:56,528
我们可以称之为我们想要的任何东西。

109
00:04:56,597 --> 00:04:59,330
只是要有点不同，我会称它为粉碎。

110
00:04:59,399 --> 00:05:02,567
这将是我的数据模型的名称。

111
00:05:02,636 --> 00:05:03,935
我不会放入支持文件。

112
00:05:04,004 --> 00:05:07,305
我会把它放在Smashtag中，

113
00:05:07,374 --> 00:05:10,308
这个级别在这里，然后单击创建。

114
00:05:10,376 --> 00:05:10,908
就是这里

115
00:05:10,977 --> 00:05:12,277
你可以认出这个，对吧？

116
00:05:12,346 --> 00:05:13,311
这是我们的实体和属性。

117
00:05:13,380 --> 00:05:15,046
我们没有把它们放在那里。

118
00:05:15,115 --> 00:05:18,583
现在，因为我称之为Smash而不是Foo，

119
00:05:18,652 --> 00:05:21,719
我必须回到我的AppDelegate和

120
00:05:21,788 --> 00:05:26,625
将此Foo字符串更改为“Smash”

121
00:05:26,693 --> 00:05:29,494
所以我几乎现在转载了一切

122
00:05:29,562 --> 00:05:31,263
使用核心数据按钮会做。

123
00:05:31,331 --> 00:05:33,631
唯一的区别就是使用核心数据

124
00:05:33,700 --> 00:05:34,966
称为我的xcdatamodeld文件。

125
00:05:35,034 --> 00:05:36,868
它会称之为Smashtag，

126
00:05:36,937 --> 00:05:40,205
cuz是我的应用程序的名称，但我喜欢称之为Smash。

127
00:05:41,674 --> 00:05:45,210
好的，所以现在我们有这个很好的数据模型文件，

128
00:05:45,279 --> 00:05:47,678
让我们继续创建我们的模式。

129
00:05:47,747 --> 00:05:51,383
现在，我很快就这样做，因为我已经展示过了

130
00:05:51,451 --> 00:05:54,151
你如何做所有这一切，你可以只是看着它

131
00:05:54,220 --> 00:05:55,487
发生真快。

132
00:05:55,555 --> 00:05:58,756
我不会告诉你我没有显示的任何东西

133
00:05:58,825 --> 00:06:00,391
你在最后的讲座。

134
00:06:00,460 --> 00:06:03,027
我要先在这里添加一个实体

135
00:06:03,096 --> 00:06:04,980
好的，这个实体我要重命名它。

136
00:06:04,981 --> 00:06:06,865
底端。

137
00:06:06,933 --> 00:06:10,368
我会做微博和Twitter用户，我会去

138
00:06:10,437 --> 00:06:13,204
拥有Twitter用户之后的那个表格。

139
00:06:13,273 --> 00:06:15,073
但显然这些Twitter用户是决定的

140
00:06:15,142 --> 00:06:17,108
一堆tweets，所以那些是我需要的两个实体。

141
00:06:17,176 --> 00:06:19,945
所以我们先把Tweet放在这里

142
00:06:20,013 --> 00:06:21,446
我们将添加推文的属性。

143
00:06:21,515 --> 00:06:24,382
我会在这里点击这个小加号添加他们。

144
00:06:24,451 --> 00:06:28,953
所以我们有一个字符串的文本属性。

145
00:06:29,022 --> 00:06:33,157
我们有我们的推文，如果我们搜索怎么办

146
00:06:33,226 --> 00:06:34,792
#Stanford连续两次？

147
00:06:34,861 --> 00:06:36,694
我们可能会得到相同的推文。

148
00:06:36,763 --> 00:06:38,763
我们希望我们的数据库拥有独特的推文，

149
00:06:38,832 --> 00:06:40,865
我们不想每次我们搜索越来越多，而且

150
00:06:40,934 --> 00:06:42,400
在那里更多的是相同的推文。

151
00:06:42,469 --> 00:06:44,702
所以我需要一些独特的

152
00:06:44,771 --> 00:06:47,472
属性在我的数据库中将是一个字符串。

153
00:06:47,541 --> 00:06:51,743
幸运的是Twitter的Twitter信息

154
00:06:51,811 --> 00:06:53,911
框架，它有一个唯一的标识符在那里

155
00:06:53,980 --> 00:06:56,481
推文，所以很容易设置。

156
00:06:56,549 --> 00:06:57,982
我不会使用这个，但是

157
00:06:58,051 --> 00:07:02,286
例如，如果我想要一个创建的属性，它将是一个日期。

158
00:07:02,355 --> 00:07:03,287
我只是点击日期。

159
00:07:03,356 --> 00:07:06,490
我把它放在这里cuz我只是想告诉你什么

160
00:07:06,559 --> 00:07:08,426
它就像在代码中设置日期。

161
00:07:08,495 --> 00:07:09,461
这看起来有点棘手。

162
00:07:09,530 --> 00:07:10,528
所以我要添加另一个，或者

163
00:07:10,597 --> 00:07:12,596
实际上我们可以在编辑风格中看这里。

164
00:07:12,665 --> 00:07:14,332
所以这是完全一样的

165
00:07:14,401 --> 00:07:15,500
编辑风格。

166
00:07:15,569 --> 00:07:16,334
当你在编辑风格，

167
00:07:16,403 --> 00:07:19,170
你几乎总是会有你的检查员

168
00:07:19,239 --> 00:07:22,140
在这里打开，以便您可以点击事情

169
00:07:22,209 --> 00:07:24,742
改变他们的类型和类似的东西。

170
00:07:24,811 --> 00:07:27,378
我会在这里创建另一个实体，它将要去

171
00:07:27,447 --> 00:07:30,215
成为我们的Twitter用户，我会打给Twitter用户。

172
00:07:33,253 --> 00:07:34,752
并注意当我移动这些，

173
00:07:34,821 --> 00:07:37,422
它移动它周围的任何其他实体。

174
00:07:37,491 --> 00:07:39,357
我会连接这两个和

175
00:07:39,425 --> 00:07:42,160
创造一种关系，你会看到它

176
00:07:42,228 --> 00:07:43,829
在我们画画的时候继续绘画。

177
00:07:44,864 --> 00:07:46,697
所以我们在这里添加一些属性。

178
00:07:46,766 --> 00:07:48,200
所以我要点击添加属性。

179
00:07:50,804 --> 00:07:57,475
抱歉。

180
00:07:57,544 --> 00:07:59,244
它不是删除，我们回到编辑器风格在这里。

181
00:08:04,751 --> 00:08:08,019
顺便说一下，我有时候会注意到在选择时

182
00:08:08,087 --> 00:08:12,356
事情，并不总是那么好，

183
00:08:12,425 --> 00:08:13,657
它不会做那么好的工作。

184
00:08:13,726 --> 00:08:15,927
我不知道它是如何建立数据建模者的

185
00:08:15,996 --> 00:08:17,629
这样，但你会点击某事，

186
00:08:17,697 --> 00:08:19,564
它不会点击那个东西，

187
00:08:19,633 --> 00:08:21,232
它点击了实体或其他东西。

188
00:08:21,300 --> 00:08:23,268
所以有一个例子，我点击这个

189
00:08:23,336 --> 00:08:25,503
属性，但它不会让我删除它。

190
00:08:25,572 --> 00:08:27,171
在这里我有Twitter用户选择，

191
00:08:27,240 --> 00:08:28,539
希望添加属性。

192
00:08:28,608 --> 00:08:30,741
是的，它将其添加到Twitter用户。

193
00:08:30,810 --> 00:08:34,078
我的Twitter用户唯一的属性

194
00:08:34,147 --> 00:08:38,683
是手柄，这是你的@whatever，然后你的名字。

195
00:08:40,153 --> 00:08:43,021
那些都是字符串，所以

196
00:08:43,089 --> 00:08:46,524
我们将在这里，并将其作为字符串类型。

197
00:08:46,593 --> 00:08:51,595
而且我们还将使句柄为字符串。

198
00:08:51,664 --> 00:08:54,499
所以这就是属性。

199
00:08:54,567 --> 00:08:56,834
而我们唯一要做的就是关系

200
00:08:56,903 --> 00:08:57,735
在这两个之间。

201
00:08:57,804 --> 00:08:59,437
我会按住Ctrl键

202
00:08:59,506 --> 00:09:02,540
在这两个之间拖动。

203
00:09:02,608 --> 00:09:06,544
你看到它在双方建立了新的关系。

204
00:09:06,613 --> 00:09:07,344
但是我们不想要，

205
00:09:07,413 --> 00:09:10,615
这个Twitter用户在这里，这个关系就是tweets

206
00:09:10,684 --> 00:09:12,850
这个Twitter用户已经推特。

207
00:09:12,919 --> 00:09:15,887
而对于tweet而言，这种关系是tweeter，

208
00:09:16,990 --> 00:09:19,157
发推文的人

209
00:09:19,226 --> 00:09:21,826
这个tweets关系在这里我们知道是一个“太多”

210
00:09:21,895 --> 00:09:24,729
关系因为Twitter用户会有多个

211
00:09:24,798 --> 00:09:25,930
推文

212
00:09:25,999 --> 00:09:27,599
这就是为什么在那里拿到小双箭头。

213
00:09:29,703 --> 00:09:32,403
这就是我们现在所需要的整个数据模型。

214
00:09:32,472 --> 00:09:33,637
对于你的家庭作业，

215
00:09:33,706 --> 00:09:35,540
你会在这里需要更多的东西。

216
00:09:35,609 --> 00:09:37,742
所以这不是足够的

217
00:09:37,811 --> 00:09:40,378
你将不得不添加更多的东西。

218
00:09:40,447 --> 00:09:43,914
但是对于我们简单的例子，这就是我们所需要的。

219
00:09:43,983 --> 00:09:47,852
现在，我们知道我们想要访问所有这些东西，

220
00:09:47,921 --> 00:09:50,988
不使用键值和设定值的键值。

221
00:09:51,057 --> 00:09:52,256
我们想要子类，

222
00:09:52,325 --> 00:09:53,958
一个叫TwitterUser和一个俱乐部的子类，

223
00:09:54,026 --> 00:09:55,392
子类称为Tweet。

224
00:09:55,461 --> 00:09:57,061
我们希望他们拥有这个var

225
00:09:57,130 --> 00:09:59,063
所有这些属性和关系。

226
00:09:59,132 --> 00:10:02,099
因此，我们需要生成代码。

227
00:10:02,168 --> 00:10:04,769
我们这样做的方式是我们只是选择答案，

228
00:10:04,838 --> 00:10:07,472
你看到我在这里选择了Tweet，实体Tweet。

229
00:10:07,541 --> 00:10:09,040
你到这里去Codegen，和

230
00:10:09,109 --> 00:10:11,442
默认情况下，此类定义。

231
00:10:11,511 --> 00:10:13,244
这意味着它已经完成了，

232
00:10:13,313 --> 00:10:15,814
它生成了一个叫tweet的类，

233
00:10:15,882 --> 00:10:17,782
它将与所有的关系中的vars一起工作。

234
00:10:17,851 --> 00:10:20,184
但这并不是我们想要的。

235
00:10:20,253 --> 00:10:22,987
我们想选择这个，只在那里

236
00:10:23,056 --> 00:10:27,826
创建一个扩展到tweet添加到vars的东西。

237
00:10:27,894 --> 00:10:30,127
那是因为我们想写这个类推文

238
00:10:30,196 --> 00:10:31,796
能够把自己的代码放在那里。

239
00:10:31,865 --> 00:10:35,066
一个人会自己写课程是很常见的

240
00:10:35,134 --> 00:10:36,100
主类。

241
00:10:36,169 --> 00:10:38,069
但是你仍然想要var魔术，所以

242
00:10:38,137 --> 00:10:40,104
你想要那些扩展。

243
00:10:40,173 --> 00:10:42,840
另一件事我在演讲中并没有真正提及

244
00:10:42,909 --> 00:10:45,376
真的，除非你进来，否则我不认为真的很重要

245
00:10:45,445 --> 00:10:47,845
像我们这样的工作空间，你知道我们有Twitter和

246
00:10:47,914 --> 00:10:50,248
粉碎点组织空间，这个模块名称就在这里。

247
00:10:50,317 --> 00:10:51,950
如果你在这里没有任何东西，

248
00:10:52,018 --> 00:10:54,719
那么它将为这些类使用全局命名空间，

249
00:10:54,788 --> 00:10:57,055
像推文，所以它会调用给类的tweet。

250
00:10:57,123 --> 00:11:00,391
但实际上，我们已经有一个Twitter.tweet了

251
00:11:00,460 --> 00:11:02,960
现在我们会有Smashtag.tweet。

252
00:11:03,029 --> 00:11:06,564
所以我们想把它改成当前的产品模块。

253
00:11:06,632 --> 00:11:07,532
所以别忘了这个。

254
00:11:08,702 --> 00:11:10,367
醒来，如果你不注意

255
00:11:10,436 --> 00:11:12,069
如果你不把这个放在这里，

256
00:11:12,138 --> 00:11:14,772
你可能会遇到大量的错误。

257
00:11:14,841 --> 00:11:17,074
各种冲突的类名，

258
00:11:17,143 --> 00:11:20,077
即使您的应用程序生成，也不会运行。

259
00:11:20,146 --> 00:11:21,145
可怕的事情会发生，所以

260
00:11:21,214 --> 00:11:22,446
你一定要这样做

261
00:11:22,515 --> 00:11:24,782
如果你不在，我不相信你需要这样做

262
00:11:24,851 --> 00:11:25,416
一个工作区

263
00:11:25,485 --> 00:11:27,552
我想如果你只有一个应用程序本身，

264
00:11:27,621 --> 00:11:30,288
你可以离开这个未定的，它会工作正常。

265
00:11:31,524 --> 00:11:34,292
所以我们在这里做了tweet吧

266
00:11:34,360 --> 00:11:36,261
现在我们来为Twitter用户做。

267
00:11:36,329 --> 00:11:38,929
Twitter用户在类定义中是默认的，

268
00:11:38,998 --> 00:11:41,699
我也希望这也是扩展，当然，

269
00:11:41,768 --> 00:11:45,336
我想要当前的产品模块。

270
00:11:45,404 --> 00:11:48,305
所以这就是我们需要做的，幕后的，

271
00:11:48,374 --> 00:11:51,408
Xcode已经大声写出这个扩展名

272
00:11:51,477 --> 00:11:52,310
vars工作。

273
00:11:52,378 --> 00:11:54,946
但是我们已经说过我们要写课了。

274
00:11:55,014 --> 00:11:57,348
所以让我们来做，让我们创建一个类

275
00:11:57,417 --> 00:11:58,616
微博用户和推特。

276
00:11:58,685 --> 00:12:00,918
所以我们要去文件>新建>文件，

277
00:12:00,987 --> 00:12:04,255
它只是我们创建任何类，它没有什么不同

278
00:12:04,324 --> 00:12:08,092
我们创建的任何其他类，Cocoa Touch Class。

279
00:12:08,161 --> 00:12:10,427
它不是一个TableViewController，

280
00:12:10,496 --> 00:12:14,698
这是一个NSManagedObject，所以我们在这里下来，在某种程度上

281
00:12:14,767 --> 00:12:19,103
按字母顺序排列，所以还是在这里，NSManagedObject。

282
00:12:19,172 --> 00:12:21,739
我们知道Twitter用户和推特是代表

283
00:12:21,808 --> 00:12:23,607
数据库为NSManagedObjects或

284
00:12:23,676 --> 00:12:26,010
我们正在创建它的子类。

285
00:12:26,079 --> 00:12:29,847
所以我们先创建一个tweet，然后我们点击Next。

286
00:12:29,916 --> 00:12:31,282
它说，你想把它放在哪里

287
00:12:31,350 --> 00:12:33,718
我们将它放在与其他一切相同的地方。

288
00:12:33,787 --> 00:12:36,821
在这里，我们知道我们在这里会有错误

289
00:12:36,890 --> 00:12:40,124
一旦这个事情绕到了建筑物，

290
00:12:40,193 --> 00:12:41,792
那就是NSManagedObject。

291
00:12:41,861 --> 00:12:45,095
它不会识别，它不会知道是什么

292
00:12:45,164 --> 00:12:47,132
直到我们说导入CoreData。

293
00:12:48,801 --> 00:12:52,036
不要忘记这个小子在你的子类。

294
00:12:52,105 --> 00:12:55,273
但现在我们可以把这些卷曲中的任何东西放进去

295
00:12:55,341 --> 00:12:57,976
大括号，我们将在那里放一个方法。

296
00:12:59,379 --> 00:13:02,347
所以我们来为Twitter用户做同样的事情。

297
00:13:04,117 --> 00:13:06,851
Twitter用户，以同样的方式，

298
00:13:06,919 --> 00:13:10,688
把所有东西放在同一个地方。

299
00:13:10,756 --> 00:13:15,193
这里是我们导入CoreData。

300
00:13:15,261 --> 00:13:19,096
现在，当你第一次创建你的模型文件和

301
00:13:19,165 --> 00:13:21,198
你选择那个扩展的东西，和

302
00:13:21,267 --> 00:13:24,435
希望你记得当前的项目模型，和

303
00:13:24,504 --> 00:13:26,503
所有的东西，你第一次建立，和

304
00:13:26,572 --> 00:13:30,007
我会在这里建立，你可能会收到一些错误。

305
00:13:30,076 --> 00:13:33,411
我们没有得到你得到的那种错误

306
00:13:33,480 --> 00:13:35,713
事情摆脱了挑战，但是如果事情出了问题，

307
00:13:35,781 --> 00:13:38,115
你可以做的一件事是去产品菜单，

308
00:13:38,184 --> 00:13:40,518
干净，干净一切。

309
00:13:40,586 --> 00:13:43,087
这将导致XCode重新生成这些扩展，

310
00:13:43,156 --> 00:13:44,188
例如：

311
00:13:44,256 --> 00:13:48,225
当您进入产品时，您甚至可以按住Option

312
00:13:48,294 --> 00:13:50,594
菜单，然后清理构建文件夹。

313
00:13:50,663 --> 00:13:52,997
这将清除您的所有驱动器数据

314
00:13:53,066 --> 00:13:55,466
重建绝对一切。

315
00:13:55,534 --> 00:13:56,668
所以，这些是选项。

316
00:13:56,736 --> 00:13:58,536
有时这些只是随时做的选择

317
00:13:58,604 --> 00:14:01,372
有点事情真的不正常。

318
00:14:01,441 --> 00:14:03,207
现在我们确实有一些错误，但是我们点击和

319
00:14:03,275 --> 00:14:05,175
看看这个错误是在这里。

320
00:14:05,244 --> 00:14:06,010
这是什么意思？

321
00:14:06,078 --> 00:14:08,946
这是说无法转换价值tweet指定

322
00:14:09,015 --> 00:14:10,981
值得推荐

323
00:14:11,050 --> 00:14:13,150
任何人都可以看到这一行可能是什么问题

324
00:14:13,219 --> 00:14:13,818
的代码在这里？

325
00:14:17,290 --> 00:14:19,823
>>没错

326
00:14:19,892 --> 00:14:23,627
是的，这是说鸣叫，不知道我们哪一个

327
00:14:23,696 --> 00:14:27,532
想要，twitter.tweet或smashtag.tweet。

328
00:14:27,600 --> 00:14:31,502
所以我们必须在Swift中完全指定我们想要哪一个。

329
00:14:31,571 --> 00:14:34,572
所以这一个是我们的twitter.tweet

330
00:14:34,640 --> 00:14:35,339
旧代码

331
00:14:35,407 --> 00:14:36,807
一旦我们解决了这个问题，

332
00:14:36,876 --> 00:14:41,045
那么现在它知道我们在说什么，一切都很好。

333
00:14:42,982 --> 00:14:43,948
好的，所以

334
00:14:44,017 --> 00:14:46,884
现在我们已经准备好了我们的核心数据。

335
00:14:46,953 --> 00:14:50,922
我们已经上课了，我们的数据模型已经解释了，

336
00:14:50,990 --> 00:14:52,289
所有的东西

337
00:14:52,358 --> 00:15:00,598
我们接下来要做的是让我们的主要MVC在这里，

338
00:15:00,667 --> 00:15:05,136
每次获取推文，

339
00:15:05,205 --> 00:15:12,776
我们将把这个推文放在数据库中。

340
00:15:12,845 --> 00:15:15,012
一旦它加载了数据库，那么我们可以构建另一个

341
00:15:15,080 --> 00:15:16,981
将查询数据库的MVC。

342
00:15:17,049 --> 00:15:18,916
所以这将是一种加载的。

343
00:15:18,984 --> 00:15:20,318
这将是查询的。

344
00:15:20,386 --> 00:15:23,854
现在，我可能会很乐意添加这个代码

345
00:15:23,923 --> 00:15:27,357
TweetTableViewController.sw- ift。

346
00:15:27,426 --> 00:15:29,627
记住我们在上一次讲课中所做的一切

347
00:15:29,695 --> 00:15:30,728
这美妙的东西？

348
00:15:30,797 --> 00:15:33,298
这将是一个明显的地方，例如在搜索中

349
00:15:33,366 --> 00:15:35,599
对于我收到推文的tweet，

350
00:15:35,668 --> 00:15:38,669
这将是加载数据库的明显的地方。

351
00:15:38,738 --> 00:15:41,472
但是，我不想在这里做。

352
00:15:41,541 --> 00:15:43,674
为什么我不想这样做？

353
00:15:43,743 --> 00:15:46,577
因为我有一个非常好的推文

354
00:15:46,646 --> 00:15:50,815
表视图控制器这里，一个真棒的MVC，非常可重用。

355
00:15:50,884 --> 00:15:53,518
你给它一个搜索词，它会加载tweet。

356
00:15:53,586 --> 00:15:55,219
我真的不想污染它

357
00:15:55,287 --> 00:15:58,823
在这里将其绑定到我的数据模型，使其不可重用，

358
00:15:58,892 --> 00:16:00,892
通过使其成为核心数据的东西。

359
00:16:02,395 --> 00:16:05,629
那么如何解决我想要保留的难题

360
00:16:05,698 --> 00:16:06,497
这东西可重用，

361
00:16:06,566 --> 00:16:09,600
但是我仍然需要将这些东西放在数据库中？

362
00:16:09,668 --> 00:16:13,938
答案是，我要把这个控制器子类化。

363
00:16:14,006 --> 00:16:17,308
我要再做一个继承的MVC

364
00:16:17,376 --> 00:16:19,944
这个很好的泛型的所有功能，和

365
00:16:20,013 --> 00:16:21,145
添加核心数据的东西。

366
00:16:22,682 --> 00:16:26,850
所以我要去文件>新文件。

367
00:16:26,919 --> 00:16:30,854
Cocoa Touch课程，我会让它不是任何的子类

368
00:16:30,923 --> 00:16:34,324
iOS类，但是TweetTableViewController的子类。

369
00:16:34,393 --> 00:16:36,627
这是我很好的通用可重用的一个，

370
00:16:36,696 --> 00:16:37,861
我要把它当成一个子类。

371
00:16:37,930 --> 00:16:42,533
我会叫它SmashTweetTableViewController。

372
00:16:42,602 --> 00:16:45,536
Cuz它使用我的粉碎数据模型。

373
00:16:45,605 --> 00:16:48,138
所以我只是要创造，在这里我们去，

374
00:16:48,207 --> 00:16:51,542
把它放在与其他东西一样的地方。

375
00:16:51,611 --> 00:16:52,810
我的意思是我们将在这里删除所有这些代码。

376
00:16:52,811 --> 00:16:54,010
这里是，

377
00:16:54,079 --> 00:16:56,980
我总是这样做，只是为了使你更清楚我是什么

378
00:16:57,049 --> 00:16:58,816
实际上添加了这些东西。

379
00:16:58,884 --> 00:17:02,086
所以我有这个SmashTweetTableViewController

380
00:17:02,155 --> 00:17:05,055
我可以去我的故事板做例子

381
00:17:05,124 --> 00:17:06,890
选择该控制器。

382
00:17:06,959 --> 00:17:07,892
并去身份认同，

383
00:17:07,961 --> 00:17:10,661
而不是使它成为一个TweetTableViewController，

384
00:17:10,729 --> 00:17:14,698
我要做一个SmashTweetTableViewController。

385
00:17:14,767 --> 00:17:17,234
所以现在，这将会做所有的事情

386
00:17:17,303 --> 00:17:18,802
TweetTableViewController确实，

387
00:17:18,871 --> 00:17:22,239
加上我在这个子类中的任何东西。

388
00:17:22,308 --> 00:17:25,642
现在不幸的是，我们没有

389
00:17:25,711 --> 00:17:29,614
一路走到设计我们的通用可重用的一个，

390
00:17:29,682 --> 00:17:32,249
所以它是真的很好和子类。

391
00:17:32,318 --> 00:17:35,253
具体来说，这将很难进行子类搜索

392
00:17:35,321 --> 00:17:39,923
对于tweets然后进入这里，在这个关闭和

393
00:17:39,992 --> 00:17:42,026
做这些tweet发生的事情。

394
00:17:42,095 --> 00:17:44,729
所以我要做我的通用的TweetTableViewController

395
00:17:44,798 --> 00:17:46,130
一点点子类。

396
00:17:46,198 --> 00:17:49,099
我要做的是把这个代码放在这里

397
00:17:49,168 --> 00:17:50,968
做一个小方法出来，

398
00:17:51,037 --> 00:17:53,171
插入tweets我要叫它

399
00:17:55,541 --> 00:17:59,477
好的，我只是要创建一个名为insertTweets的新方法

400
00:17:59,545 --> 00:18:02,980
那就要做我刚刚剪出来的代码，

401
00:18:03,048 --> 00:18:04,414
我们把它放在这里。

402
00:18:04,483 --> 00:18:09,253
Func insertsTets，可以采取一些新的推文

403
00:18:09,321 --> 00:18:13,824
这将是Twitter.tweet的数组。

404
00:18:13,893 --> 00:18:16,861
在那里会有相同的代码，显然我没有

405
00:18:16,929 --> 00:18:19,830
在这里需要这个weak self，因为我不在里面

406
00:18:19,899 --> 00:18:22,200
这里的闭包，它会做到这一点。

407
00:18:24,070 --> 00:18:26,737
我要离开这个本质上是内在的，

408
00:18:26,805 --> 00:18:28,906
记住在默认内部，

409
00:18:28,974 --> 00:18:31,542
这意味着它可以被覆盖或调用。

410
00:18:31,611 --> 00:18:32,710
如果我把这个私人的，

411
00:18:32,779 --> 00:18:36,346
子类将无法覆盖它。

412
00:18:36,415 --> 00:18:39,616
不幸的是，没有什么像Swift那样的保护

413
00:18:39,685 --> 00:18:42,586
它就像子类可以覆盖它，但人不能

414
00:18:42,655 --> 00:18:46,424
叫它，不幸的是没有这样的事情。

415
00:18:46,492 --> 00:18:50,260
好的，所以我们必须离开这个内部，而现在

416
00:18:50,329 --> 00:18:54,364
我可以在我的子类中使用这个方法并覆盖它。

417
00:18:54,433 --> 00:18:56,733
所以我只是把它放在这里，说覆盖，所以

418
00:18:56,802 --> 00:18:59,470
斯威夫特知道我是超越这个事情。

419
00:18:59,539 --> 00:19:01,839
然后我要让super工作。

420
00:19:04,244 --> 00:19:07,745
然后我打算调用自己。

421
00:19:09,782 --> 00:19:18,389
updateDatabase（with newTweets），好吧？

422
00:19:18,458 --> 00:19:22,893
这将要更新我的数据库，所以我会有

423
00:19:22,961 --> 00:19:27,531
一个私有的func这里称为updateDatabase（with tweets），

424
00:19:27,600 --> 00:19:30,167
它将成为Twitter.tweet。

425
00:19:30,235 --> 00:19:36,373
对不起，我在这里继续击中这个小按钮。

426
00:19:36,442 --> 00:19:40,678
这只是把这些推文转入核心数据。

427
00:19:40,746 --> 00:19:43,881
当然，这是抱怨，因为进口Twitter和

428
00:19:43,950 --> 00:19:46,416
我现在开始使用Twitter。

429
00:19:46,485 --> 00:19:47,935
我也可以把它现在导入CoreData因为这样

430
00:19:47,936 --> 00:19:49,386
顺便一提，

431
00:19:49,455 --> 00:19:52,189
SmashTweetTableViewController显然是

432
00:19:52,257 --> 00:19:55,292
也将做很多核心数据的东西。

433
00:19:55,361 --> 00:19:56,960
大家看到我在那里做了什么？

434
00:19:57,029 --> 00:20:00,298
我只是把这个子类化，我把所有的粉碎标签，

435
00:20:00,366 --> 00:20:03,033
将这些核心数据的东西粉碎成这个子类，所以

436
00:20:03,102 --> 00:20:06,537
超级类仍然是完全通用的。

437
00:20:06,606 --> 00:20:09,306
我只需要让我的父类

438
00:20:09,375 --> 00:20:10,942
更易于分类。

439
00:20:11,910 --> 00:20:13,043
现在，和任何MVC一样，

440
00:20:13,112 --> 00:20:15,879
我们想要考虑这个SmashTable的模型，

441
00:20:15,948 --> 00:20:19,182
SmashTweetTableViewController，当然会

442
00:20:19,251 --> 00:20:21,251
继承其父类。

443
00:20:21,320 --> 00:20:24,021
但我也要在这里添加一个模型，

444
00:20:24,090 --> 00:20:26,791
这是要使用的数据库。

445
00:20:26,859 --> 00:20:31,862
我会通过传入一个PersistentContainer来做到这一点。

446
00:20:31,931 --> 00:20:35,766
现在通常我们可能希望这是应用程序委托

447
00:20:35,834 --> 00:20:39,270
查看，应用程序委托持久性容器。

448
00:20:39,339 --> 00:20:41,905
但是我想允许使用我的MVC的人，

449
00:20:41,974 --> 00:20:43,540
使用他们想要的任何数据库。

450
00:20:43,609 --> 00:20:45,876
我不想强迫他们使用该应用程序委托。

451
00:20:45,945 --> 00:20:49,613
话虽如此，我将默认值为

452
00:20:49,682 --> 00:20:51,649
这个，继续吧。

453
00:20:51,718 --> 00:20:57,254
所以我要说（UIApplication.shared.delegate

454
00:20:57,322 --> 00:21:01,859
as？AppDelegate）？。persistentConta-

455
00:21:01,928 --> 00:21:03,094
核能研究所。

456
00:21:03,162 --> 00:21:05,095
这只是默认值，但是

457
00:21:05,164 --> 00:21:06,897
这是一个非私有的var，所以

458
00:21:06,966 --> 00:21:10,334
我使用这个ViewController可以设置容器和

459
00:21:10,403 --> 00:21:13,604
导致它在某个数据库中显示内容。

460
00:21:13,672 --> 00:21:16,673
这实际上是我的模型，我的模型就是这个数据库。

461
00:21:16,742 --> 00:21:18,975
所有这个类都是写入数据库，

462
00:21:19,044 --> 00:21:21,912
它只是更新数据库。

463
00:21:21,980 --> 00:21:25,716
所有的UI都是从超级类继承而来的

464
00:21:25,785 --> 00:21:27,685
数据库导向。

465
00:21:27,753 --> 00:21:29,987
那么我们如何更新这个数据库呢？

466
00:21:30,055 --> 00:21:30,988
我们需要做什么？

467
00:21:31,057 --> 00:21:34,325
嗯，有一件事，我真的不想更新这个东西

468
00:21:34,394 --> 00:21:35,959
在主队列中，因为，

469
00:21:36,028 --> 00:21:39,396
我不知道我的超级类可能会获取一千个推文。

470
00:21:39,465 --> 00:21:41,865
而且我真的想阻止主队列

471
00:21:41,934 --> 00:21:44,034
我去写数据推送到我的数据库？

472
00:21:44,103 --> 00:21:48,506
没办法，所以我要把容器放在这里，

473
00:21:48,574 --> 00:21:52,943
我会要求它在后台上执行某些操作

474
00:21:53,012 --> 00:21:54,278
线程。

475
00:21:54,347 --> 00:21:57,281
一个后台队列，你可以看到，这里是争论，

476
00:21:57,350 --> 00:21:59,383
这是一个关闭，它需要一个参数。

477
00:21:59,452 --> 00:22:01,285
我双击了它，

478
00:22:01,354 --> 00:22:03,987
我将使用拖尾闭包语法。

479
00:22:04,056 --> 00:22:05,356
所以这个说法就在这里。

480
00:22:05,424 --> 00:22:09,994
这是其他队列的管理对象上下文，

481
00:22:10,062 --> 00:22:14,331
我允许在这里使用的那个。

482
00:22:14,400 --> 00:22:16,066
为了更新我的数据库。

483
00:22:16,134 --> 00:22:18,802
所以我只是用这个上下文，把这些推文，

484
00:22:18,871 --> 00:22:20,704
这些新的tweets，我在这里，

485
00:22:20,773 --> 00:22:22,940
我将把它们逐个放在数据库中。

486
00:22:23,008 --> 00:22:25,509
我只是要说

487
00:22:25,578 --> 00:22:31,048
twitterInfo在这个tweets然后添加推文。

488
00:22:32,351 --> 00:22:34,618
那么，我该如何做这件事呢？

489
00:22:34,686 --> 00:22:36,319
如何添加推文？

490
00:22:36,388 --> 00:22:39,256
通过tweet，我的意思是我们的数据模型中的推文。

491
00:22:39,325 --> 00:22:40,523
这就是我想做的。

492
00:22:40,592 --> 00:22:44,828
在我们的数据模型中添加一个与此Twitter信息匹配的推文

493
00:22:44,897 --> 00:22:45,729
我得到了

494
00:22:45,798 --> 00:22:48,732
好的，所以我们将把方法放在tweet里面

495
00:22:48,801 --> 00:22:51,601
我们在这里创建的tweet子类，

496
00:22:51,670 --> 00:22:53,170
目前是空的

497
00:22:53,239 --> 00:22:56,306
我们要在这里放一个静态方法

498
00:22:56,375 --> 00:22:59,409
找出一个与该Twitter信息匹配的推文

499
00:22:59,478 --> 00:23:02,279
创建一个，如果没有一个。

500
00:23:02,347 --> 00:23:04,581
这样他们会保持独一无二，因为如果我们得到

501
00:23:04,650 --> 00:23:06,984
我们会发现相同的推文，只是返回一个

502
00:23:07,053 --> 00:23:08,652
已经在那里创造了一个新的。

503
00:23:08,721 --> 00:23:11,755
所以我会调用给这个东西，

504
00:23:11,824 --> 00:23:15,693
它将是静态的，或者如果它是一个类，

505
00:23:15,761 --> 00:23:21,065
我们可以说类func findOrCreatTweet，匹配，

506
00:23:21,133 --> 00:23:26,937
twitterInfo，这将是一个Twitter.tweet。

507
00:23:27,006 --> 00:23:28,906
这是将要传递给它的信息。

508
00:23:28,974 --> 00:23:33,577
我需要知道要去看什么内容，所以

509
00:23:33,645 --> 00:23:39,783
我会说，在上下文中，NSMan，我需要更多的空间，

510
00:23:39,852 --> 00:23:44,120
MSManagedObjectContext，就在那里。

511
00:23:44,189 --> 00:23:46,724
它只是要返回一个tweet。

512
00:23:49,428 --> 00:23:52,496
所以这个静态方法，类方法就要去了

513
00:23:52,564 --> 00:23:54,798
在数据库中查找这个东西

514
00:23:54,867 --> 00:23:57,634
如果可以找到它，那么它只会创建一个新的。

515
00:23:57,703 --> 00:24:01,104
所以，我们必须导入Twitter，（让我们摆脱这个），和

516
00:24:01,173 --> 00:24:03,507
那么我们该怎么做呢？

517
00:24:03,576 --> 00:24:04,574
那么这个方法，

518
00:24:04,643 --> 00:24:09,313
基于您在Core Data中知道的所有内容，这些都非常简单。

519
00:24:09,382 --> 00:24:12,449
首先，我要创建一个提取请求去找

520
00:24:12,518 --> 00:24:13,083
这个推文。

521
00:24:14,720 --> 00:24:19,723
Le的做这么简单，让请求相等和

522
00:24:19,792 --> 00:24:21,891
记住我必须静静地键入这个

523
00:24:21,960 --> 00:24:22,893
这将是一个NS。

524
00:24:25,497 --> 00:24:27,331
提取请求

525
00:24:27,400 --> 00:24:28,932
抓取是什么？

526
00:24:29,001 --> 00:24:30,767
推文。

527
00:24:30,836 --> 00:24:33,870
所以我要使用这个很好的Tweet.fetchRequest

528
00:24:33,939 --> 00:24:34,938
方法得到一个。

529
00:24:35,007 --> 00:24:36,540
所以我得到了一个提取请求。

530
00:24:36,608 --> 00:24:38,142
撷取要求的推文。

531
00:24:38,211 --> 00:24:39,943
这就是我在那里和

532
00:24:40,012 --> 00:24:42,046
那么我必须有一个谓词为此。

533
00:24:42,114 --> 00:24:45,482
所以我会说请求谓语这是事情

534
00:24:45,550 --> 00:24:49,520
会在数据库中说出你想要的哪些tweets？

535
00:24:49,589 --> 00:24:53,624
那么这里的谓词，我们想要哪些tweets？

536
00:24:53,692 --> 00:24:56,994
那么，我们想要一个tweet的唯一键，

537
00:24:57,063 --> 00:25:00,464
记住我们的数据模型中唯一的关键是，

538
00:25:00,532 --> 00:25:02,132
我会经常回到这个数据模型。

539
00:25:02,200 --> 00:25:04,601
但是看到这里是那个独特的钥匙。

540
00:25:04,670 --> 00:25:08,338
我们想知道那个独特的钥匙何时匹配什么

541
00:25:08,407 --> 00:25:09,373
这个人过来了。

542
00:25:09,442 --> 00:25:10,774
他们通过的twitter信息。

543
00:25:10,843 --> 00:25:17,113
那就是％@“，那就是twitterInfo.identifier。

544
00:25:17,182 --> 00:25:20,650
所以事实证明标识符

545
00:25:20,719 --> 00:25:22,720
在我们的Twitter信息点tweet。

546
00:25:22,788 --> 00:25:25,356
这就是你所需要的一切tweet的事情。

547
00:25:26,725 --> 00:25:27,658
总是一样的

548
00:25:27,726 --> 00:25:29,460
即使你多次下载tweet，

549
00:25:29,528 --> 00:25:30,961
它总是一样的

550
00:25:31,030 --> 00:25:33,397
现在我们这里的排序谓词呢？

551
00:25:33,466 --> 00:25:35,499
我们的排序描述符呢？

552
00:25:35,568 --> 00:25:37,434
我们实际上不需要任何排序描述符

553
00:25:37,503 --> 00:25:41,704
因为这更好地匹配一个或零。

554
00:25:41,773 --> 00:25:45,542
所以你不需要放置零件或一件事情。

555
00:25:45,611 --> 00:25:46,810
所以你不需要一个排序描述符

556
00:25:46,879 --> 00:25:48,812
如果您没有指定排序描述符，您将得到它们

557
00:25:48,880 --> 00:25:49,813
以随机顺序返回。

558
00:25:49,882 --> 00:25:52,550
但是再一次，我们不在乎那是因为它

559
00:25:52,618 --> 00:25:54,552
更好地为零或一个或我们有问题。

560
00:25:55,521 --> 00:25:57,754
那么我该如何取得这个东西呢？

561
00:25:57,823 --> 00:26:00,657
很简单，我只是说让匹配

562
00:26:00,726 --> 00:26:07,163
数据库等于context.fetch（request）。

563
00:26:07,232 --> 00:26:11,034
现在唯一的事情就是抛出。

564
00:26:11,103 --> 00:26:13,470
Cuz可能无法访问数据库。

565
00:26:13,538 --> 00:26:14,838
可能是各种各样的问题，无论如何。

566
00:26:14,906 --> 00:26:18,475
所以我会把它放在一个尝试中，一个在这里抓住。

567
00:26:18,544 --> 00:26:24,348
所以我们会做，并尝试在这里。

568
00:26:24,416 --> 00:26:27,350
我们会抓住，（我会谈谈我们将要做什么

569
00:26:27,419 --> 00:26:29,286
当我们在那里碰到一个错误）。

570
00:26:29,354 --> 00:26:30,854
好的，所以我们得到了比赛。

571
00:26:30,923 --> 00:26:34,458
所以这些匹配这个匹配的类型。

572
00:26:34,526 --> 00:26:36,060
我们在这里收到错误，有些错误。

573
00:26:39,565 --> 00:26:40,030
语境。

574
00:26:40,099 --> 00:26:41,064
抱歉。

575
00:26:41,132 --> 00:26:46,269
NSManageObjectContext。

576
00:26:46,338 --> 00:26:48,872
那么这次比赛的类型是什么？

577
00:26:48,941 --> 00:26:49,840
有人想猜？

578
00:26:53,044 --> 00:26:56,479
我们来看看，它是一系列的推文。

579
00:26:56,548 --> 00:26:58,615
当然我派了。

580
00:26:58,684 --> 00:27:00,584
我得到一个Tweet的数组。

581
00:27:00,652 --> 00:27:01,552
非常棒

582
00:27:01,621 --> 00:27:05,989
而且应该是matches计数

583
00:27:06,058 --> 00:27:09,326
如果它大于零，那么我找到了我的推文。

584
00:27:09,395 --> 00:27:10,494
其实我只能回来了。

585
00:27:10,563 --> 00:27:13,129
返回matches(0)。

586
00:27:13,198 --> 00:27:15,599
所以我发现了独特的推文。

587
00:27:15,667 --> 00:27:18,335
我其实会在这里放一个断言

588
00:27:18,404 --> 00:27:21,972
如果matches.count大于1，

589
00:27:22,041 --> 00:27:26,910
那么某种数据库的不一致，

590
00:27:26,979 --> 00:27:31,581
因为在这个独特的领域

591
00:27:31,650 --> 00:27:33,950
那里有不止一个在那里，所以这将是坏的。

592
00:27:34,019 --> 00:27:38,222
也许我会把这个方法的名字放在这个tweet点上

593
00:27:40,092 --> 00:27:44,094
那个数据库不一致或者这样的东西，

594
00:27:44,163 --> 00:27:44,928
我放一点断言

595
00:27:44,997 --> 00:27:47,197
现在，如果我写了我的代码，那永远不会发生

596
00:27:47,266 --> 00:27:49,366
正确地，这绝对不可能

597
00:27:49,435 --> 00:27:50,333
两个tweets进去。

598
00:27:50,402 --> 00:27:52,202
我的代码中的其他地方必须有一个bug，

599
00:27:52,271 --> 00:27:53,336
这就是为什么我在这里断言，

600
00:27:53,405 --> 00:27:57,374
如果发生这种情况，我想要它崩溃，以便我注意到。

601
00:27:57,443 --> 00:27:59,977
没有我的知识，事情没有重复。

602
00:28:01,213 --> 00:28:03,246
现在这个catch在这里呢？

603
00:28:03,315 --> 00:28:07,484
如果我们试图做这个抓取来获得这些推文怎么办？

604
00:28:07,552 --> 00:28:08,385
它失败？

605
00:28:08,453 --> 00:28:10,353
数据库或某些问题。

606
00:28:10,422 --> 00:28:12,088
我们该怎么办？

607
00:28:12,157 --> 00:28:17,093
那么我们可能会致命的错误和崩溃。

608
00:28:17,162 --> 00:28:18,495
这就是保存上下文的功能，

609
00:28:18,564 --> 00:28:21,397
顺便说一下，在App代表中，它只是崩溃了。

610
00:28:21,466 --> 00:28:23,934
我们可以看看错误，并尝试弄清楚它是什么，

611
00:28:24,003 --> 00:28:24,968
像这样的东西。

612
00:28:25,036 --> 00:28:27,871
但是你知道，我真的不知道那个人是谁

613
00:28:27,939 --> 00:28:31,108
打电话给你，发现你的鸣叫要我做

614
00:28:31,177 --> 00:28:32,910
如果有数据库错误。

615
00:28:32,978 --> 00:28:34,577
我不确定，他们要我忽略吗？

616
00:28:34,646 --> 00:28:37,013
他们要我崩溃吗？

617
00:28:37,082 --> 00:28:38,481
他们要我再试一次吗？

618
00:28:38,550 --> 00:28:39,515
他们想要什么？

619
00:28:39,584 --> 00:28:43,620
所以当你真的不知道你的呼叫者想做什么时，

620
00:28:43,689 --> 00:28:49,025
为什么不只是重新抛出错误。

621
00:28:49,094 --> 00:28:52,261
当你反思，这意味着这种方法抛出。

622
00:28:52,330 --> 00:28:57,333
每个人都明白我在那里做了什么

623
00:28:57,402 --> 00:28:59,736
我的意思是这个方法findOrCreateTweet throw。

624
00:28:59,804 --> 00:29:03,406
而且只有这样才能被抛弃

625
00:29:03,475 --> 00:29:06,476
产生错误。

626
00:29:06,544 --> 00:29:09,446
所以当我们把这个findOrCreateTweet称为我们的时候

627
00:29:09,515 --> 00:29:12,049
其他课程，我们必须小心cuz它现在抛出。

628
00:29:12,117 --> 00:29:12,816
所以我喜欢用try。

629
00:29:15,521 --> 00:29:16,653
但如果我们在这里下来，

630
00:29:16,721 --> 00:29:20,323
那么我们把它传给了这里，没有找到匹配，所以

631
00:29:20,392 --> 00:29:22,225
这是我们需要创建的推文。

632
00:29:22,294 --> 00:29:24,594
所以我会说发短信等于

633
00:29:24,663 --> 00:29:25,862
我们如何创建一个推文？

634
00:29:25,930 --> 00:29:28,365
我们只是说TweetContext上下文。

635
00:29:28,434 --> 00:29:31,935
这样就可以在数据库中创建一个推文。

636
00:29:32,003 --> 00:29:34,737
现在我可以通过设置vars来设置tweet字段，

637
00:29:34,806 --> 00:29:37,741
像推特一样，这其实是独一无二的，

638
00:29:37,809 --> 00:29:39,309
这很重要。

639
00:29:39,377 --> 00:29:43,113
那就是TwitterInfo.identifier。

640
00:29:43,182 --> 00:29:45,148
我们要确保我们说，如果我们不这样说，

641
00:29:45,216 --> 00:29:47,684
那么我们可能会在这里开始出现问题，

642
00:29:47,752 --> 00:29:50,653
身体是独一无二的将会是零或空白，

643
00:29:50,722 --> 00:29:51,988
任何一件事

644
00:29:52,057 --> 00:29:53,690
tweet文本怎么样？

645
00:29:53,759 --> 00:30:00,296
我们设置为twitterInfo.text。

646
00:30:00,365 --> 00:30:03,533
这是创建tweet.created。

647
00:30:03,602 --> 00:30:09,306
这是twitterInfo.created和

648
00:30:09,375 --> 00:30:14,411
那么我们将返回推文。

649
00:30:14,479 --> 00:30:16,913
现在，这条线在这里会给我们一个错误，

650
00:30:16,982 --> 00:30:18,414
一旦它赶上了。

651
00:30:18,483 --> 00:30:20,016
这个错误有点奇怪。

652
00:30:20,085 --> 00:30:23,353
它表示不能为“Date”指定值

653
00:30:23,421 --> 00:30:25,388
输入'NSDate？'。

654
00:30:25,457 --> 00:30:27,524
而我上次提到的幻灯片之一，

655
00:30:27,593 --> 00:30:31,094
在数据库中，日期是NSDate。

656
00:30:31,163 --> 00:30:34,431
但是我也提到你可以自动桥接

657
00:30:34,499 --> 00:30:36,032
日期到NSDate。

658
00:30:36,101 --> 00:30:37,734
你可以用这样做。

659
00:30:37,803 --> 00:30:40,002
所以我可以说NSDate。

660
00:30:40,071 --> 00:30:40,937
这将永远奏效。

661
00:30:41,006 --> 00:30:44,474
这将一直工作，只要这是一个NSDate，

662
00:30:44,543 --> 00:30:47,544
那么这将永远奏效，它总是可以跨越。

663
00:30:47,613 --> 00:30:50,246
所以这是不幸的，你必须这样做

664
00:30:50,315 --> 00:30:52,049
你的日期，但你做，对不起。

665
00:30:53,319 --> 00:30:55,452
好的，还有一个tweet的东西。

666
00:30:55,520 --> 00:30:57,620
鸣叫中缺少的是什么？

667
00:30:57,689 --> 00:31:00,623
Tweet.tweeter。

668
00:31:00,692 --> 00:31:01,925
我必须在这里设置我的tweeter。

669
00:31:01,994 --> 00:31:04,694
我刚刚创建了这个推文，我必须设置tweeter。

670
00:31:04,763 --> 00:31:07,497
所以要做tweeter，我要去做这个确切

671
00:31:07,566 --> 00:31:12,201
相同的方法在TwitterUser。

672
00:31:12,270 --> 00:31:15,572
所以我可以创建一个Twitter用户完全相同的方式。

673
00:31:15,640 --> 00:31:18,474
所以我们称之为查找或创建Twitter用户。

674
00:31:18,543 --> 00:31:20,944
我，这里的预先罐头，你不会

675
00:31:21,013 --> 00:31:22,479
从我这里学习任何东西，

676
00:31:22,548 --> 00:31:26,583
基本上这个完全一样的东西在一起。

677
00:31:26,651 --> 00:31:28,718
有进口twitter

678
00:31:28,787 --> 00:31:32,022
但它完全一样，它具有相同的确切逻辑。

679
00:31:32,090 --> 00:31:33,055
我正在做同样的事情。

680
00:31:33,124 --> 00:31:34,758
我甚至重新推翻，

681
00:31:34,826 --> 00:31:37,828
只要创建twitter用户，如果我找不到它。

682
00:31:37,896 --> 00:31:40,997
而对于一个twitter用户来说，它是处理，该人的句柄，

683
00:31:41,066 --> 00:31:43,600
@任何，是唯一的标识符。

684
00:31:46,371 --> 00:31:48,071
所以现在我们知道如何创建一个Twitter用户

685
00:31:48,140 --> 00:31:52,141
使用它可以说Tweeter等于Twitter用户。

686
00:31:52,210 --> 00:31:54,477
找到还是那里，终于认出来了。

687
00:31:54,546 --> 00:31:57,147
好的，找到或创建Twitter用户，和

688
00:31:57,215 --> 00:32:00,317
我们想使用Tweets用户字段，Twitter。

689
00:32:02,187 --> 00:32:05,955
小写的Twitter信息点用户，这是用户。

690
00:32:06,024 --> 00:32:08,258
然后我们将在相同的上下文中进行。

691
00:32:10,462 --> 00:32:14,364
现在这样，所以我们必须尝试这个。

692
00:32:14,433 --> 00:32:18,201
如果它不能做，我只会再次失败。

693
00:32:18,270 --> 00:32:22,505
这也许我可能会再次抛出，可能。

694
00:32:22,574 --> 00:32:25,308
我甚至可能会崩溃或某事，我不知道。

695
00:32:25,376 --> 00:32:26,310
我不清楚，

696
00:32:27,612 --> 00:32:29,913
如果我无法创建Twitter，该怎么办？

697
00:32:29,982 --> 00:32:33,716
如果Tweeter是必须设置的东西

698
00:32:33,785 --> 00:32:36,519
一个tweet在数据库中有任何意义，那么我可能

699
00:32:36,588 --> 00:32:39,155
想在这里重新抛出或做一些可怕的事情。

700
00:32:39,224 --> 00:32:43,426
但只是说尝试，而是我只是放弃，

701
00:32:43,495 --> 00:32:44,794
好吧，我只是不设置tweeter。

702
00:32:44,863 --> 00:32:49,399
所以，可以有tweet

703
00:32:49,467 --> 00:32:54,704
在那里没有tweeter。

704
00:32:54,773 --> 00:32:56,740
Twitter用户，是的，

705
00:32:56,808 --> 00:33:00,977
twitter用户不需要是可选的。

706
00:33:01,046 --> 00:33:02,312
对不起，我偶然发生了。

707
00:33:04,315 --> 00:33:06,349
所以它只是要返回一个twitter用户。

708
00:33:06,418 --> 00:33:09,219
而且尝试使它成为可选的twitter用户

709
00:33:09,287 --> 00:33:10,587
好吧，因为tweeter，

710
00:33:10,656 --> 00:33:13,422
这种关系，是一个可选的Twitter用户。

711
00:33:13,491 --> 00:33:16,860
它来自我们的数据模型。

712
00:33:19,664 --> 00:33:22,099
那就是这样，这就是我们创建一个推文。

713
00:33:22,167 --> 00:33:24,734
我们需要使用这个方法放在这里

714
00:33:24,803 --> 00:33:25,868
数据库中的那些tweets。

715
00:33:25,937 --> 00:33:29,572
所以，让我们回到这里。

716
00:33:29,641 --> 00:33:34,210
我们去我们的SmashTweetTableViewController。

717
00:33:34,279 --> 00:33:37,147
在这里，我们想添加推文，我们只是说

718
00:33:38,683 --> 00:33:43,753
让Tweet等于Tweet.findOrCreateTweet。

719
00:33:43,822 --> 00:33:46,722
我们会通过它，Twitter信息。

720
00:33:46,791 --> 00:33:49,358
这就是Twitter的信息，这是传递给我们的

721
00:33:49,427 --> 00:33:50,560
这些Tweets。

722
00:33:50,628 --> 00:33:54,798
在上下文中，我们将使用我们的容器上下文。

723
00:33:58,670 --> 00:34:00,069
对不起，我们没有使用我们的容器上下文。

724
00:34:00,138 --> 00:34:02,672
我们正在这里使用这个上下文。

725
00:34:02,741 --> 00:34:04,407
所以我们在这里使用这个小的上下文。

726
00:34:04,475 --> 00:34:07,444
现在我们知道这件事就在这里。

727
00:34:07,513 --> 00:34:10,080
所以我们只是在这里尝试问号。

728
00:34:10,148 --> 00:34:13,282
因为在这里我知道当我更新

729
00:34:13,351 --> 00:34:14,884
如果我不能创建这个推文，我只会放弃它。

730
00:34:14,885 --> 00:34:16,418
数据库，

731
00:34:16,487 --> 00:34:18,588
如果不收集，它不会伤害任何东西

732
00:34:18,656 --> 00:34:19,455
它也需要的数据。

733
00:34:19,524 --> 00:34:21,891
没有什么可以做的事情

734
00:34:21,959 --> 00:34:24,827
数据库错误是在那里也许我可以报告

735
00:34:24,896 --> 00:34:27,464
给用户一个错误，说无法更新数据库，但是

736
00:34:27,532 --> 00:34:29,332
用户很多次都是这样的。

737
00:34:29,401 --> 00:34:34,971
所以这里放下它可能很好。

738
00:34:35,040 --> 00:34:37,674
现在注意我们在这里有一个警告，看到这个警告？

739
00:34:37,743 --> 00:34:41,744
它说，让tweet等于，你永远不会使用tweet，和

740
00:34:41,813 --> 00:34:44,113
其实我不想用tweet。

741
00:34:44,182 --> 00:34:47,917
那么在这种情况下，我发现和做什么呢？

742
00:34:47,986 --> 00:34:49,552
创建这个推文，但我实际上不想要它。

743
00:34:49,621 --> 00:34:50,587
我不想做任何事情，

744
00:34:50,656 --> 00:34:52,989
我只是想要它创建，如果它不在那里。

745
00:34:53,057 --> 00:34:55,257
在这里你可以说“_”。

746
00:34:55,326 --> 00:34:59,829
如果你说_ =“这意味着我忽略了返回

747
00:34:59,897 --> 00:35:01,831
值，这是对的。

748
00:35:01,900 --> 00:35:04,301
我不需要返回值我只想要这个东西创建

749
00:35:04,369 --> 00:35:06,403
在数据库中，不需要做任何事情。

750
00:35:08,340 --> 00:35:10,539
到目前为止，大家跟随我吗

751
00:35:10,608 --> 00:35:12,776
所以现在我们加载了数据库。

752
00:35:12,845 --> 00:35:14,544
而已。这就是我们需要的所有代码

753
00:35:14,613 --> 00:35:16,646
加载我们的数据库与所有这些推文。

754
00:35:16,715 --> 00:35:20,383
现在我们继续在这里打印一些数据库统计信息

755
00:35:20,451 --> 00:35:22,852
只是看看这是否在我们下车之前工作

756
00:35:22,921 --> 00:35:25,755
做一个新的MBC的UI。

757
00:35:25,824 --> 00:35:30,293
所以我要说，printDatabaseStatistics和

758
00:35:30,362 --> 00:35:34,630
我要在这里创建一个新的私人功能

759
00:35:34,699 --> 00:35:37,734
printDatabaseStatistics。

760
00:35:37,803 --> 00:35:41,370
复制粘贴。

761
00:35:41,439 --> 00:35:44,874
我想要这件事要告诉我有多少个推文

762
00:35:44,943 --> 00:35:47,076
以及数据库中有多少twitter用户。

763
00:35:47,145 --> 00:35:50,446
这就是我想在这里做的。

764
00:35:50,515 --> 00:35:53,383
所以如果我想在数据库中做任何事情，如果

765
00:35:53,451 --> 00:35:56,452
我想在数据库中查看，显然需要一个上下文。

766
00:35:56,521 --> 00:35:58,121
我必须有一个上下文

767
00:36:00,058 --> 00:36:01,357
看看数据库里面还是什么。

768
00:36:01,426 --> 00:36:03,192
那么我将要使用什么语境？

769
00:36:03,261 --> 00:36:08,064
我会说，如果我能让我的上下文等于我的话

770
00:36:08,133 --> 00:36:11,234
containers？.viewContext。

771
00:36:11,303 --> 00:36:15,104
现在viewContext是mainqueue的上下文

772
00:36:15,173 --> 00:36:17,006
这个数据库。

773
00:36:17,075 --> 00:36:19,342
所以，我将要有printDatabaseStatistics。

774
00:36:19,411 --> 00:36:21,811
这不是在这个闭包之内

775
00:36:21,880 --> 00:36:23,613
它不会使用这个上下文。

776
00:36:23,682 --> 00:36:25,448
我们将使用主viewContext。

777
00:36:25,517 --> 00:36:28,752
这是很多，除非你有它执行背景

778
00:36:28,820 --> 00:36:31,754
任务，这几乎是你唯一的上下文，所以

779
00:36:31,823 --> 00:36:33,623
我们会在主要的上下文中做。

780
00:36:33,692 --> 00:36:36,692
那么我怎么知道有多少个tweets呢？

781
00:36:36,761 --> 00:36:39,629
好吧，我要创建一个请求并且做一个提取。

782
00:36:39,698 --> 00:36:41,464
所以NSFetchRequest。

783
00:36:42,734 --> 00:36:44,934
这是一个tweet的请求。

784
00:36:45,003 --> 00:36:47,571
等于Tweet.fetchRequest。

785
00:36:47,639 --> 00:36:50,206
所以现在我得到这个请求，提取请求

786
00:36:50,275 --> 00:36:54,844
我不需要谓语，因为我想要所有的推文。

787
00:36:54,913 --> 00:36:58,214
如果你没有谓词意味着给我所有的。

788
00:36:58,282 --> 00:37:02,151
所以这就是我想要的，所以现在我要去

789
00:37:02,220 --> 00:37:07,390
在这里说，如果我能让tweetCount等于

790
00:37:07,458 --> 00:37:12,629
尝试访问上下文以获取此请求。

791
00:37:12,697 --> 00:37:14,831
哪些可能或不能做。

792
00:37:14,899 --> 00:37:19,302
但是，如果可以理解我在那里做了什么？

793
00:37:20,371 --> 00:37:22,138
然后我要得到计数。

794
00:37:24,775 --> 00:37:26,943
该表达式的类型是什么？

795
00:37:28,713 --> 00:37:31,381
可选数组的推文。

796
00:37:31,449 --> 00:37:34,384
因为这返回一个tweets数组

797
00:37:34,453 --> 00:37:37,386
不会抛出，这变成可选项。

798
00:37:37,455 --> 00:37:39,589
所以这是一个可选数组的推文。

799
00:37:39,658 --> 00:37:41,857
这里我是可选的链接。

800
00:37:41,926 --> 00:37:45,194
所以如果这不是新的，那么我会继续下去

801
00:37:45,263 --> 00:37:46,328
得到计数

802
00:37:46,397 --> 00:37:49,565
这只是数组的计数，这是一个方法计数

803
00:37:49,634 --> 00:37:52,535
数组中的数组为一个var。

804
00:37:52,604 --> 00:37:58,408
现在我有tweetCount，现在我要打印，

805
00:37:58,476 --> 00:38:02,979
tweetCount，tweets，就是这样。

806
00:38:03,048 --> 00:38:06,383
我抓住他们

807
00:38:06,451 --> 00:38:10,353
我只是在整个数据库中获取每个tweet，

808
00:38:10,422 --> 00:38:12,188
只是为了找出有多少。

809
00:38:12,257 --> 00:38:14,323
那里有10万个推文怎么办？

810
00:38:14,392 --> 00:38:16,792
我真的会抓住，当然我们知道

811
00:38:16,861 --> 00:38:19,328
在我要求数据之前，只有最小的错误总和。

812
00:38:19,397 --> 00:38:21,163
所以这不是那么糟糕

813
00:38:21,232 --> 00:38:23,599
有一个更好的方法来做到这一点。

814
00:38:23,668 --> 00:38:25,801
顺便说一句，在我展示之前。

815
00:38:25,870 --> 00:38:28,270
看到这个请求，我做了这个单独的变量，就在这里。

816
00:38:28,339 --> 00:38:30,006
这实际上并不是必要的。

817
00:38:30,075 --> 00:38:32,475
我可以在这里和

818
00:38:32,543 --> 00:38:33,976
把它放在

819
00:38:34,045 --> 00:38:35,044
到这里。

820
00:38:35,113 --> 00:38:35,978
看这个。

821
00:38:36,047 --> 00:38:40,283
剪切，粘贴，并摆脱。

822
00:38:40,352 --> 00:38:43,285
这是因为获取方法

823
00:38:43,354 --> 00:38:45,354
任何一种提取请求。

824
00:38:45,423 --> 00:38:49,492
它需要任何类型的fetchRequest结果

825
00:38:49,561 --> 00:38:51,294
基本上是一个协议。

826
00:38:51,363 --> 00:38:54,129
所以我没有必要创建另一个变量。

827
00:38:54,198 --> 00:38:56,232
并注意到我不必静静地输入，因为

828
00:38:56,301 --> 00:38:58,501
这将需要返回fetchRequest的任何东西。

829
00:38:58,569 --> 00:38:59,602
它会返回一些东西。

830
00:38:59,671 --> 00:39:02,071
所以无论如何，所以

831
00:39:02,140 --> 00:39:04,274
在这里做什么更好的方法是什么？

832
00:39:04,343 --> 00:39:07,276
我要说，如果让tweeterCount，那么

833
00:39:07,345 --> 00:39:10,880
我会以更好的方式对高音扬声器进行计数，等于尝试

834
00:39:12,083 --> 00:39:16,719
获取上下文：

835
00:39:16,787 --> 00:39:22,992
TwitterUsers.fetchRequest，好的，所有的Twitter用户。

836
00:39:24,462 --> 00:39:27,263
然后我可以打印twitterCount。

837
00:39:30,935 --> 00:39:36,605
Twitter用户。

838
00:39:36,674 --> 00:39:40,143
所以这个方法计数非常像抓取，但是

839
00:39:40,211 --> 00:39:43,913
它还没有评估这个提取请求，

840
00:39:43,982 --> 00:39:44,913
它得到了同样的事情。

841
00:39:44,982 --> 00:39:46,882
在这种情况下，我们计数用户，但是

842
00:39:46,951 --> 00:39:48,851
它只是要求数据库。

843
00:39:48,920 --> 00:39:54,256
如果我拿到这个，你会给我多少钱？

844
00:39:54,325 --> 00:39:56,158
所以这一切都在数据库端完成，

845
00:39:56,227 --> 00:39:57,827
没有什么实际上不得不被抓取。

846
00:39:59,030 --> 00:40:00,563
所以这只是另一种方法计数。

847
00:40:00,632 --> 00:40:02,899
但是，它也像Fetch那样抛出。

848
00:40:02,968 --> 00:40:04,366
所以我们还是要尝试。

849
00:40:04,435 --> 00:40:08,138
所以这个整体表达在这里，不是选项int。

850
00:40:09,641 --> 00:40:12,609
所以我打开包装，如果让，并打印出来。

851
00:40:14,545 --> 00:40:15,111
知道了吗

852
00:40:16,781 --> 00:40:19,282
我们在这里穿过我们的手指

853
00:40:19,351 --> 00:40:21,751
所有的工作，我们已经把所有这些数据库学习。

854
00:40:21,820 --> 00:40:27,122
我们会打印我们的数据库

855
00:40:27,191 --> 00:40:34,197
统计数据，这一切都会奏效。

856
00:40:34,265 --> 00:40:40,002
这里我们去，这只是IOS的一些垃圾，所以

857
00:40:40,071 --> 00:40:41,871
我们会忽略这个。

858
00:40:41,939 --> 00:40:43,739
在这里让我们搜索一些。

859
00:40:43,808 --> 00:40:46,642
我们来搜索，哈希标签stan如何，

860
00:40:46,711 --> 00:40:49,178
好吧，我们做哈希标签stan，是的，这是一个很好的。

861
00:40:49,247 --> 00:40:52,882
好的，它想使用我的Twitter帐户。

862
00:40:52,950 --> 00:40:55,851
当然，这是它和。

863
00:40:55,920 --> 00:40:59,755
呃哦，看看那里的控制台。

864
00:40:59,824 --> 00:41:02,992
零推特，零Twitter用户。

865
00:41:04,829 --> 00:41:07,296
也许让我们拉一些。

866
00:41:07,365 --> 00:41:10,833
不，它仍然是零推特，零Twitter用户。

867
00:41:10,901 --> 00:41:12,402
那是不行的

868
00:41:13,571 --> 00:41:16,738
任何人看到这段代码中的任何内容

869
00:41:16,807 --> 00:41:18,208
为什么这不工作？

870
00:41:20,778 --> 00:41:24,480
是的，我们正在做好加载该数据库的工作，

871
00:41:24,548 --> 00:41:25,982
但我们从不保存它。

872
00:41:27,218 --> 00:41:29,886
所以这只是浪费时间，

873
00:41:29,954 --> 00:41:34,356
我们需要说try，context，save。

874
00:41:34,425 --> 00:41:35,924
现在再次我忽略了这里的错误。

875
00:41:35,993 --> 00:41:38,494
在演示了很多时候我用try，问号是因为

876
00:41:38,563 --> 00:41:40,229
我只是没有时间做适当的捕获和

877
00:41:40,297 --> 00:41:41,531
处理所有错误。

878
00:41:41,600 --> 00:41:42,632
这是你应该的东西

879
00:41:42,700 --> 00:41:44,033
正在看待做的选择。

880
00:41:44,102 --> 00:41:45,168
所以在这里我要保存

881
00:41:45,237 --> 00:41:47,136
忽略任何错误，好吗？

882
00:41:47,205 --> 00:41:48,671
那么应该解决它吧？

883
00:41:48,740 --> 00:41:57,346
我们来看看

884
00:41:57,414 --> 00:41:58,447
好的，我们开始吧。

885
00:41:58,516 --> 00:42:03,218
哈斯标签斯坦福

886
00:42:03,287 --> 00:42:04,020
没有。

887
00:42:04,089 --> 00:42:05,421
零个推文。

888
00:42:05,490 --> 00:42:06,555
零Twitter用户。

889
00:42:06,624 --> 00:42:08,524
我把那个保存在那里

890
00:42:08,593 --> 00:42:09,324
到底是怎么回事？

891
00:42:09,393 --> 00:42:10,827
我不得不再拉。

892
00:42:12,030 --> 00:42:15,697
看，我拉，它的工作。

893
00:42:15,766 --> 00:42:17,233
这是怎么回事？

894
00:42:17,302 --> 00:42:19,902
当我第一次加载它说零推特和

895
00:42:19,971 --> 00:42:21,837
那么现在是说第57号。

896
00:42:21,906 --> 00:42:23,773
这里有一些奇怪的事情。

897
00:42:23,842 --> 00:42:25,174
发生了什么？

898
00:42:25,243 --> 00:42:28,877
那么这实际上是一个多线程问题。

899
00:42:28,946 --> 00:42:32,881
任何人都可以看到多线程问题吗？

900
00:42:32,950 --> 00:42:34,583
没有？我会把一些打印，

901
00:42:34,652 --> 00:42:35,384
所以你可以看到它。

902
00:42:35,453 --> 00:42:42,258
所以看这个，打印，启动数据库加载。

903
00:42:42,327 --> 00:42:45,328
然后在这里，当我完成保存在这里，

904
00:42:45,396 --> 00:42:49,566
我要打印，完成加载数据库。

905
00:42:50,935 --> 00:42:56,472
在那里，所以

906
00:42:56,541 --> 00:43:03,012
现在让我们运行吧

907
00:43:03,081 --> 00:43:08,451
好的，哈斯标签斯坦福。

908
00:43:08,519 --> 00:43:12,755
有一个崩溃，数据库不一致，有趣。

909
00:43:12,823 --> 00:43:15,324
所以这就是为什么我们把这个插入到这里。

910
00:43:15,393 --> 00:43:18,193
断言在这里，所以让我们看看为什么我们认为我们有

911
00:43:18,262 --> 00:43:20,163
数据基础一致性在这里？

912
00:43:22,334 --> 00:43:22,899
是吗？

913
00:43:29,006 --> 00:43:29,772
>>就是这样

914
00:43:29,840 --> 00:43:32,208
是的，我的搜索是向后的，那里。

915
00:43:32,276 --> 00:43:34,643
我在这里插入matches.count == 1。

916
00:43:34,712 --> 00:43:37,580
所以这就是为什么这是崩溃，好的。

917
00:43:37,648 --> 00:43:42,718
好。让我们

918
00:43:42,787 --> 00:43:47,723
后退

919
00:43:47,792 --> 00:43:49,993
现在我们来再试一次，标签斯坦福大学。

920
00:43:52,263 --> 00:43:55,030
我们来看看这里发生了什么。

921
00:43:55,099 --> 00:43:59,568
开始数据库加载，它打印统计信息，和

922
00:43:59,637 --> 00:44:01,170
那么它是完成加载。

923
00:44:01,239 --> 00:44:02,671
那很糟。

924
00:44:02,740 --> 00:44:04,273
你看，不等待

925
00:44:04,342 --> 00:44:07,143
它在打印统计信息之前要加载。

926
00:44:08,279 --> 00:44:08,744
你看？

927
00:44:08,813 --> 00:44:10,813
现在为什么会这样呢？

928
00:44:10,882 --> 00:44:14,583
因为我们以后打印数据库统计数据

929
00:44:14,652 --> 00:44:15,117
下载。

930
00:44:15,186 --> 00:44:17,419
那么为什么不说开始，完成，

931
00:44:17,488 --> 00:44:18,687
然后打印？

932
00:44:18,756 --> 00:44:22,391
因为在这里，

933
00:44:22,460 --> 00:44:27,263
发生在不同的队列上。

934
00:44:27,331 --> 00:44:29,098
所以这个代码的方式是，

935
00:44:29,167 --> 00:44:33,102
开始，这个执行立即返回。

936
00:44:33,171 --> 00:44:34,603
因为所有这一切都是放在这里

937
00:44:34,672 --> 00:44:37,640
关闭到后台任务队列。

938
00:44:37,709 --> 00:44:38,775
那么这就发生了。

939
00:44:40,144 --> 00:44:43,612
然后，该闭包开始在该后台上运行

940
00:44:43,681 --> 00:44:45,714
排队，加载这些东西。

941
00:44:45,783 --> 00:44:46,649
并打印。

942
00:44:48,419 --> 00:44:49,619
你看到那里发生了什么吗？

943
00:44:49,688 --> 00:44:52,221
大家了解多线程？

944
00:44:52,290 --> 00:44:55,224
所以做这项工作的方法是拿印刷数据库

945
00:44:55,293 --> 00:44:57,627
统计，并把它放在这里。

946
00:45:01,665 --> 00:45:03,799
好吧，现在它不打印数据库

947
00:45:03,868 --> 00:45:05,701
统计数据直到完成。

948
00:45:05,770 --> 00:45:07,836
现在这有一个问题。

949
00:45:07,905 --> 00:45:09,838
好的，这是非常糟糕的。

950
00:45:09,907 --> 00:45:12,575
首先，我们要做，我不知道为什么

951
00:45:12,644 --> 00:45:14,577
不要在这里抱怨，我们去，现在是。

952
00:45:14,645 --> 00:45:18,281
它想知道，它想要自我点在这里，所以

953
00:45:18,349 --> 00:45:22,652
我会做虚弱的自我来打破这个内存周期。

954
00:45:22,720 --> 00:45:25,988
希望每个人都明白，现在，发生了什么事情。

955
00:45:26,057 --> 00:45:26,588
好的。

956
00:45:26,657 --> 00:45:27,656
但这不是问题。

957
00:45:27,725 --> 00:45:29,191
还有一个更糟糕的问题。

958
00:45:29,260 --> 00:45:30,459
并且为了时间的利益，

959
00:45:30,528 --> 00:45:34,664
我打算在这里给你一些东西。

960
00:45:36,233 --> 00:45:39,034
如果我要检查一下这个代码

961
00:45:39,103 --> 00:45:40,302
正在主线程上运行。

962
00:45:40,371 --> 00:45:41,637
所以我会说IF，

963
00:45:41,706 --> 00:45:46,342
你做的方式是你说thread.ismainthread。

964
00:45:46,411 --> 00:45:47,743
好的，如果我在主线程中会是正确的。

965
00:45:47,812 --> 00:45:51,280
所以我会在主线上说。

966
00:45:51,349 --> 00:45:57,920
如果不是这样，我会说主线。

967
00:45:57,988 --> 00:46:01,289
所以我们来看看这个统计数据是否正在发生

968
00:46:01,358 --> 00:46:02,992
在主线程上不是。

969
00:46:03,061 --> 00:46:06,195
我想你们中有很多人知道这将是一个。

970
00:46:07,565 --> 00:46:09,331
通过看这里的代码。

971
00:46:09,400 --> 00:46:13,135
好吧，这里我们再去，哈斯标签斯坦福。

972
00:46:13,204 --> 00:46:15,304
开始了。

973
00:46:15,372 --> 00:46:16,672
关主线程。

974
00:46:18,342 --> 00:46:19,842
好的，为什么是主线程？

975
00:46:19,911 --> 00:46:22,511
因为我打印数据库统计里面

976
00:46:22,580 --> 00:46:25,548
这个关闭，它发生在这样的后台线程上

977
00:46:25,617 --> 00:46:28,117
整个方法正在脱离主线程。

978
00:46:28,186 --> 00:46:30,152
现在是一个问题吗？

979
00:46:30,221 --> 00:46:34,824
这是一个巨大的问题，因为我在这里使用什么语境？

980
00:46:34,892 --> 00:46:36,192
mainQueue上下文。

981
00:46:37,295 --> 00:46:40,129
ViewContext是mainQueue上下文。

982
00:46:40,198 --> 00:46:44,333
我不能使用mainQueue上下文关闭主

983
00:46:44,402 --> 00:46:45,200
线程

984
00:46:45,269 --> 00:46:47,303
你在这里看到问题？

985
00:46:47,372 --> 00:46:50,572
所以它工作，但可能很容易坠毁或

986
00:46:50,641 --> 00:46:51,674
做了一件可怕的事情

987
00:46:51,742 --> 00:46:53,876
那么我们如何解决呢？

988
00:46:53,945 --> 00:46:55,944
这是我所使用的方法

989
00:46:56,013 --> 00:46:58,246
你在上下文中称为执行。

990
00:46:58,315 --> 00:47:04,287
我会说上下文在你的安全队列中执行这个代码。

991
00:47:06,457 --> 00:47:11,059
当我说上下文执行，我把这段代码放在那里，

992
00:47:11,128 --> 00:47:13,562
它说对于这种情况，做这个块，但是

993
00:47:13,630 --> 00:47:17,599
无论你做什么，为你做正确的排队。

994
00:47:17,668 --> 00:47:20,068
由于这是视图的上下文，

995
00:47:20,137 --> 00:47:26,175
它将要回到主线程，

996
00:47:26,244 --> 00:47:29,378
看。

997
00:47:29,447 --> 00:47:32,814
哈斯塔格斯坦福大学

998
00:47:32,883 --> 00:47:34,851
这里我们回到主线程。

999
00:47:36,353 --> 00:47:39,688
所以这里的表现就是这样

1000
00:47:39,757 --> 00:47:41,356
很多人会建议，

1001
00:47:41,425 --> 00:47:45,594
总是使用它，除非你是其中的一个在那里

1002
00:47:45,663 --> 00:47:49,298
在这个背景下清楚地使用这个上下文。

1003
00:47:49,366 --> 00:47:50,232
其他时间，

1004
00:47:50,300 --> 00:47:52,401
很多人说总是把你的电话包在这里。

1005
00:47:52,469 --> 00:47:54,903
这样一来，你永远不会有什么问题

1006
00:47:54,972 --> 00:47:58,307
在错误的线程上执行，好吧，错了。

1007
00:47:59,643 --> 00:48:01,177
理解了一切？

1008
00:48:01,245 --> 00:48:04,346
核心数据线程安全的一点崩溃课程。

1009
00:48:04,415 --> 00:48:07,382
好的，所以这是伟大的。

1010
00:48:07,451 --> 00:48:09,284
我们已经把数据库加载起来了

1011
00:48:09,353 --> 00:48:11,153
我们有一个充满Twitter的数据库。

1012
00:48:11,222 --> 00:48:16,191
现在，我们要添加一些UI来显示所有这些数据。

1013
00:48:16,260 --> 00:48:18,327
所以让我们回到我们的故事板，看看，

1014
00:48:18,396 --> 00:48:19,061
我们在这里得到什么

1015
00:48:19,130 --> 00:48:21,930
和我们将要有什么样的UI？

1016
00:48:21,999 --> 00:48:24,766
就像我说的，我要在这里再有一个MVC

1017
00:48:24,835 --> 00:48:27,903
我要走了，用一个小按钮的项目。

1018
00:48:27,972 --> 00:48:30,239
那么你们中有多少人知道如何使用bar按钮项目

1019
00:48:30,307 --> 00:48:32,374
作为你作业作业的一部分，我想

1020
00:48:32,443 --> 00:48:34,943
但是如果你今天不知道如何去做，

1021
00:48:35,012 --> 00:48:36,311
这很简单

1022
00:48:36,380 --> 00:48:40,216
所以这个新的MVC，我要去，让我们继续吧

1023
00:48:40,285 --> 00:48:43,385
为它创建一个MVC，Cocoa Touch Class。

1024
00:48:43,453 --> 00:48:45,053
它只是一个子类

1025
00:48:45,122 --> 00:48:46,588
的UITableViewController。

1026
00:48:46,657 --> 00:48:50,392
我会叫它SmashTweetersTableViewControl-

1027
00:48:50,460 --> 00:48:52,360
所以这是显示tweeters。

1028
00:48:52,429 --> 00:48:54,229
记住这张表会显示所有的tweeters

1029
00:48:54,298 --> 00:49:00,402
推特在另一个MVC的tweet。

1030
00:49:00,471 --> 00:49:03,072
我们会把它放在，而不是在Twitter项目中，

1031
00:49:03,140 --> 00:49:03,805
这是肯定的。

1032
00:49:03,874 --> 00:49:05,340
我们把它放在这里，好吗？

1033
00:49:05,409 --> 00:49:07,443
我总是检查这个列表，这个在这里或

1034
00:49:07,511 --> 00:49:09,611
你最终得到的文件全部在随机的地方。

1035
00:49:09,680 --> 00:49:12,181
你不想要

1036
00:49:12,249 --> 00:49:13,181
这里是。再次，

1037
00:49:13,250 --> 00:49:15,417
我会删除所有这些东西。

1038
00:49:15,486 --> 00:49:16,552
看到它是一个tableView，所以

1039
00:49:16,621 --> 00:49:19,187
它有所有这个UITableView，所以我们不需要任何这个

1040
00:49:19,256 --> 00:49:20,790
你会看到这里的东西。

1041
00:49:24,395 --> 00:49:27,896
这是我们新的TableViewController。

1042
00:49:27,965 --> 00:49:28,897
我们继续吧

1043
00:49:28,966 --> 00:49:31,267
更新我们的故事板，以消除这一切。

1044
00:49:31,335 --> 00:49:33,202
所以我们会去这里。

1045
00:49:33,271 --> 00:49:36,138
让我们创建我们的酒吧按钮项来做segue，所以

1046
00:49:36,206 --> 00:49:38,139
我要在这里搜索按钮。

1047
00:49:38,208 --> 00:49:40,742
你从来不想把按钮放在这里，

1048
00:49:40,811 --> 00:49:45,246
它会看起来像是要工作，但这是不对的。

1049
00:49:45,315 --> 00:49:47,316
在bar里放一个bar按钮。

1050
00:49:49,553 --> 00:49:52,821
所以我们会把这个Tweeter cuz称之为它所显示的内容

1051
00:49:52,889 --> 00:49:55,725
在这张表中推送所有推文的tweeters。

1052
00:49:56,961 --> 00:49:59,995
我们来看看TableViewController，

1053
00:50:00,064 --> 00:50:04,733
这里是。

1054
00:50:04,802 --> 00:50:07,203
TableViewController就在那里。

1055
00:50:07,271 --> 00:50:09,805
让我们继续前进，从中脱颖而出。

1056
00:50:09,874 --> 00:50:11,606
Ctrl +拖动。

1057
00:50:11,675 --> 00:50:14,543
显示segue，我们在这里的导航控制器。

1058
00:50:14,612 --> 00:50:18,747
我们设置这个segue标识符，我们称之为

1059
00:50:18,816 --> 00:50:19,682
我是什么

1060
00:50:19,751 --> 00:50:20,715
我有一个很好的名字。

1061
00:50:20,784 --> 00:50:25,620
是的，Tweeters提到搜索词。

1062
00:50:25,689 --> 00:50:26,788
Cuz这是这个segue做的。

1063
00:50:26,857 --> 00:50:29,792
它显示了提到此搜索的tweeters

1064
00:50:29,860 --> 00:50:31,160
长期在这里。

1065
00:50:31,228 --> 00:50:34,964
我们也让我们的小单元格成为一个副标题单元格。

1066
00:50:35,032 --> 00:50:37,166
所以我们会把它改成副标题。

1067
00:50:37,234 --> 00:50:39,401
我们在这里需要一个这个单元格的重用标识符。

1068
00:50:39,470 --> 00:50:43,939
我们称这是一个TwitterUser Cell，这是它是什么。

1069
00:50:44,007 --> 00:50:47,376
Twitter用户将在这里显示在这个单元格中。

1070
00:50:47,445 --> 00:50:48,077
好的，就这样。

1071
00:50:48,145 --> 00:50:50,645
这是我们的整个UI。

1072
00:50:50,714 --> 00:50:51,613
超级简单

1073
00:50:51,682 --> 00:50:54,817
我们现在需要做的就是实现这一点

1074
00:50:54,886 --> 00:50:56,217
这个控制器就在这里。

1075
00:50:56,286 --> 00:50:58,153
所以让我们回去吧。

1076
00:50:58,221 --> 00:51:00,922
这里就在这里。

1077
00:51:00,991 --> 00:51:03,325
我们来谈谈公共API。

1078
00:51:03,394 --> 00:51:04,860
我只是想习惯这个习惯。

1079
00:51:04,928 --> 00:51:07,763
每次我们介绍一个新的MVC，让我们来谈谈，

1080
00:51:07,831 --> 00:51:09,297
其公共API。

1081
00:51:09,366 --> 00:51:11,767
所以这个SmashTweetersTableViewControl-

1082
00:51:11,836 --> 00:51:14,369
在其模型中真的有两部分。

1083
00:51:14,438 --> 00:51:18,474
一个是，它需要知道提及，搜索术语

1084
00:51:18,542 --> 00:51:22,911
它应该是显示Tweeters，所以我会

1085
00:51:22,980 --> 00:51:26,748
有，我会把它提到，这只是一个字符串。

1086
00:51:26,817 --> 00:51:28,817
所以这是其公共模式的一部分，然后，

1087
00:51:28,885 --> 00:51:30,553
它的模型的另一部分是什么？

1088
00:51:31,522 --> 00:51:33,355
数据库。

1089
00:51:35,059 --> 00:51:37,092
它的作用是查找数据库和

1090
00:51:37,161 --> 00:51:39,661
在他们的推特中找到提到这个的tweeters。

1091
00:51:39,730 --> 00:51:44,166
所以在这里必须有一个NSPersistentContainer。

1092
00:51:44,235 --> 00:51:50,139
顺便说一句，有些人，导入CoreData。

1093
00:51:50,207 --> 00:51:52,574
而不是让公众中的数据库代表

1094
00:51:52,643 --> 00:51:54,376
在这里模型作为容器，

1095
00:51:54,445 --> 00:51:57,212
他们可能只是传递上下文。

1096
00:51:57,281 --> 00:51:59,648
如果他们只在这里通过上下文，

1097
00:51:59,716 --> 00:52:01,683
你不能做任何背景的东西。

1098
00:52:01,752 --> 00:52:04,119
所以我喜欢通过，在这里通过集装箱。

1099
00:52:04,188 --> 00:52:07,690
此外，这整个事情是一个UI元素，

1100
00:52:07,758 --> 00:52:10,625
所以它想要使用视图上下文。

1101
00:52:10,694 --> 00:52:13,295
没有其他上下文cuz它的东西都在主要

1102
00:52:13,364 --> 00:52:14,830
排队，这是一个UI。

1103
00:52:14,899 --> 00:52:17,466
所以当你通过一个容器，你会问，这很好

1104
00:52:17,535 --> 00:52:18,534
对于视图环境和

1105
00:52:18,603 --> 00:52:20,669
你知道你正在获得主队列上下文。

1106
00:52:20,738 --> 00:52:23,238
如果有人通过这里的上下文，

1107
00:52:23,306 --> 00:52:27,008
可能不是主队列上下文，可能是坏的。

1108
00:52:27,077 --> 00:52:30,612
所以我想当你想要一个容器是一个很好的包装

1109
00:52:30,681 --> 00:52:33,949
告诉一个MVC这是数据库用来做什么

1110
00:52:34,017 --> 00:52:35,584
做，这里是。

1111
00:52:35,653 --> 00:52:39,788
确定我们会在这里做我们的小技巧

1112
00:52:39,856 --> 00:52:40,723
默认，

1113
00:52:40,791 --> 00:52:44,259
（UIApplication.shared.delegete as？

1114
00:52:44,328 --> 00:52:49,264
AppDelegate）？。persistentConta- iner。

1115
00:52:49,333 --> 00:52:54,770
你甚至不需要这样做，但我们会这样做。

1116
00:52:56,139 --> 00:53:00,341
所以这基本上是我们的模型和

1117
00:53:00,410 --> 00:53:03,912
随着我们的模式变化，

1118
00:53:03,981 --> 00:53:10,719
我会在这里更新我的UI。

1119
00:53:10,788 --> 00:53:12,655
我们会做同样的事情。

1120
00:53:13,824 --> 00:53:14,723
如果我可以选择它，

1121
00:53:14,792 --> 00:53:16,692
在这里做这个同样的事情。

1122
00:53:19,029 --> 00:53:22,331
我们需要一个私人的func来做到这一点。

1123
00:53:24,901 --> 00:53:30,372
所以这是我们的模型，它是UI更新。

1124
00:53:30,440 --> 00:53:32,974
在我去实现这个UI更新之前，

1125
00:53:33,043 --> 00:53:34,343
cuz这很简单，

1126
00:53:34,411 --> 00:53:38,314
我会回到我的SmashTweetTableViewController，

1127
00:53:38,382 --> 00:53:40,482
那个收集所有统计数据的人，

1128
00:53:40,551 --> 00:53:42,985
因为那也是我正在离开的人。

1129
00:53:44,021 --> 00:53:45,687
这个smash，这个在这里，

1130
00:53:45,755 --> 00:53:47,356
Smash Tweet表视图控制器，

1131
00:53:47,424 --> 00:53:49,625
我使用这个按钮从这个到这个。

1132
00:53:49,694 --> 00:53:51,893
所以这就是准备工作所在。

1133
00:53:51,962 --> 00:53:54,129
所以我要把准备放在这里。

1134
00:53:54,198 --> 00:53:56,364
所以让我们把准备放在底部。

1135
00:53:56,433 --> 00:54:00,802
prepare (for segue:.

1136
00:54:00,871 --> 00:54:01,603
这里是。现在，

1137
00:54:01,672 --> 00:54:04,173
我会很快通过这个，因为你们

1138
00:54:04,242 --> 00:54:06,208
肯定知道prepare (for segue: 现在。

1139
00:54:06,276 --> 00:54:09,745
我的意思是说如果segue：标识符是什么

1140
00:54:09,813 --> 00:54:11,045
我说的是，

1141
00:54:11,114 --> 00:54:15,217
而且我应该在这里做一个常数，但为了速度，

1142
00:54:15,285 --> 00:54:18,753
所以这是Tweeters提到搜索词，

1143
00:54:18,822 --> 00:54:21,489
这就是我所说的那样。

1144
00:54:21,558 --> 00:54:23,592
然后我要到达目的地。

1145
00:54:23,661 --> 00:54:28,363
所以这是一个TweetersTableViewController =

1146
00:54:28,431 --> 00:54:31,233
作为？

1147
00:54:31,301 --> 00:54:35,604
SmashTweetersTableViewControl- ler。

1148
00:54:35,673 --> 00:54:38,840
是的，我可以在这里做ContentViewController，

1149
00:54:38,909 --> 00:54:41,810
因为如果我在这里有这个扩展名，因为

1150
00:54:41,879 --> 00:54:44,913
也许我有一天想把这个分开看

1151
00:54:44,982 --> 00:54:47,849
但是我第一次不会这样做。

1152
00:54:47,918 --> 00:54:50,418
所以现在我有了tweetersTVC。

1153
00:54:50,487 --> 00:54:51,954
这是我的TweetersTableViewController。

1154
00:54:52,022 --> 00:54:53,922
我只是要设置它的公共API。

1155
00:54:53,991 --> 00:54:56,791
TweetersTVC.mention。

1156
00:54:56,860 --> 00:55:01,997
提及等于我的搜索字词。

1157
00:55:02,066 --> 00:55:05,200
这是你在那里输入文本的MVC

1158
00:55:05,269 --> 00:55:06,602
它有搜索文本。

1159
00:55:06,671 --> 00:55:10,271
然后tweetersTVC.container等于

1160
00:55:10,340 --> 00:55:11,539
我的容器

1161
00:55:11,608 --> 00:55:12,640
我有同一个

1162
00:55:12,709 --> 00:55:15,877
高音扬声器MVC看着我在同一个数据库

1163
00:55:15,946 --> 00:55:16,811
看着

1164
00:55:16,880 --> 00:55:19,915
所以在这里我实际上是设置这个东西。

1165
00:55:19,983 --> 00:55:22,217
我们在这里收到错误，是什么？

1166
00:55:22,285 --> 00:55:24,452
推特，好的

1167
00:55:24,521 --> 00:55:27,989
好吧，所以我只是设置我的公共模式

1168
00:55:28,058 --> 00:55:32,393
我的Tweeters，而不是Tweet，TweetersTableViewController。

1169
00:55:32,462 --> 00:55:33,962
足够了

1170
00:55:34,031 --> 00:55:37,332
好的，现在我们都准备好了，这个很好

1171
00:55:37,400 --> 00:55:40,668
SmashTableViewController，我们如何更新其UI？

1172
00:55:40,737 --> 00:55:43,138
我们如何让它查看CoreData，

1173
00:55:43,206 --> 00:55:46,975
找到推特的Twitter用户

1174
00:55:47,044 --> 00:55:49,411
匹配这个提及显示吗？

1175
00:55:49,479 --> 00:55:51,079
那真的是，

1176
00:55:51,147 --> 00:55:53,681
我们将使用NS Fetched Results Controller，当然，

1177
00:55:53,750 --> 00:55:55,984
这是这里的主要交易。

1178
00:55:56,053 --> 00:55:58,954
我们需要做些什么？

1179
00:55:59,023 --> 00:56:01,823
这是上一次演讲的最后一张幻灯片。

1180
00:56:01,892 --> 00:56:05,460
我希望你们都记得，这是最近的。

1181
00:56:05,528 --> 00:56:09,264
第一件事是我们必须有这个表视图控制器

1182
00:56:09,332 --> 00:56:12,935
是一个NS-fetched-result-controller

1183
00:56:13,003 --> 00:56:13,836
如果要使用获取的结果控制器

1184
00:56:13,837 --> 00:56:14,670
代理

1185
00:56:14,738 --> 00:56:17,505
你的表需要被取代的代理

1186
00:56:17,574 --> 00:56:20,008
控制器，我告诉过你我将帮助你

1187
00:56:20,077 --> 00:56:23,212
那个，并提供这个代码，我肯定够了。

1188
00:56:23,280 --> 00:56:23,845
就在这里

1189
00:56:23,914 --> 00:56:28,550
我会把它拖到某处，把它复制，是的。

1190
00:56:30,220 --> 00:56:33,255
好的，让我们来看看吧，这里是，

1191
00:56:33,324 --> 00:56:35,824
FetchedResultsTableViewControler

1192
00:56:35,893 --> 00:56:38,293
你可以看到它是一个子类

1193
00:56:38,362 --> 00:56:40,796
UITableViewController实现

1194
00:56:40,865 --> 00:56:43,398
NSFetchedResultsControllerDelate协议。

1195
00:56:43,467 --> 00:56:46,001
所以这些是我们协议中的方法，

1196
00:56:46,070 --> 00:56:47,702
有四个。

1197
00:56:47,771 --> 00:56:51,139
您可以看到它只是使用表视图方法

1198
00:56:51,208 --> 00:56:52,975
更新表。

1199
00:56:53,043 --> 00:56:55,810
这些控制器方法每当NS被调用

1200
00:56:55,879 --> 00:56:59,414
获取结果控制器注意到数据库更改

1201
00:56:59,483 --> 00:57:01,650
在某种程度上会影响NS提取结果。

1202
00:57:03,153 --> 00:57:04,652
所以这是使你的桌子的魔法

1203
00:57:04,721 --> 00:57:06,521
数据库更改时自动更新。

1204
00:57:06,590 --> 00:57:09,190
你不必做任何事情，它只是自动更新。

1205
00:57:09,259 --> 00:57:11,025
这是因为这个代理。

1206
00:57:11,094 --> 00:57:14,696
现在，为了我们的工作，我们需要成为一个子类，

1207
00:57:14,764 --> 00:57:17,399
所以我们继承了所有这些东西。

1208
00:57:17,468 --> 00:57:19,335
我们现在要回到我们这里的smashTweeters

1209
00:57:19,336 --> 00:57:21,203
这样很容易，

1210
00:57:21,272 --> 00:57:22,938
而不是一个UITableViewController，

1211
00:57:23,006 --> 00:57:25,139
我会成为一个FetchedResultsTableViewContro-

1212
00:57:25,208 --> 00:57:28,110
ller，简单。

1213
00:57:28,178 --> 00:57:31,012
所以，这就是简单的方法

1214
00:57:31,081 --> 00:57:33,114
一个FetchedResultsController代理。

1215
00:57:33,183 --> 00:57:34,616
现在我们需要做什么呢？

1216
00:57:34,685 --> 00:57:37,452
我们必须实现所有的UITableViewDataSource

1217
00:57:37,521 --> 00:57:41,689
使用fetchedResultsController的方法。

1218
00:57:41,758 --> 00:57:43,258
所以有两个部分。

1219
00:57:43,327 --> 00:57:45,793
一个是我们需要创建一个var，这是

1220
00:57:45,862 --> 00:57:51,099
一个fetchedResultsController控制器。

1221
00:57:51,168 --> 00:57:54,136
它将是一个NSFetchedResultsController类型。

1222
00:57:58,541 --> 00:58:01,877
它是获取tweeter用户的FetchResultsController。

1223
00:58:04,147 --> 00:58:06,615
所以FetchResultsController也是通用类型和

1224
00:58:06,683 --> 00:58:09,184
你不得不说，它提取什么样的东西？

1225
00:58:09,252 --> 00:58:12,053
所以我有这个var，我如何实现所有

1226
00:58:12,122 --> 00:58:13,721
那些UI表的数据源方法呢？

1227
00:58:13,790 --> 00:58:15,890
嗯，我可以把它们全部输入，但你知道什么，

1228
00:58:15,959 --> 00:58:18,960
它在每一个单一的时间完全一样

1229
00:58:19,029 --> 00:58:21,663
你实现其中的一个代码是完全一样的

1230
00:58:21,732 --> 00:58:22,897
因为fetchedResultsController

1231
00:58:22,966 --> 00:58:25,700
总是以完全相同的方式回答这些问题。

1232
00:58:25,768 --> 00:58:26,901
所以你可以复制和

1233
00:58:26,970 --> 00:58:29,404
将其粘贴到您完成的其他一半或

1234
00:58:29,473 --> 00:58:31,706
你可以使用我创造的这个小美女

1235
00:58:31,775 --> 00:58:35,210
你在这里，另一个可以拖的东西，

1236
00:58:35,279 --> 00:58:36,211
我们来看看。

1237
00:58:36,279 --> 00:58:40,949
复制，这是一个扩展

1238
00:58:41,018 --> 00:58:45,354
你可以扩展你的类。

1239
00:58:45,422 --> 00:58:46,188
所以在这种情况下，

1240
00:58:46,256 --> 00:58:50,092
这是我们的smash tweeters tableviewController

1241
00:58:50,160 --> 00:58:51,359
而在这个扩展中，

1242
00:58:51,428 --> 00:58:55,330
它添加了所有的UI表视图数据源方法。

1243
00:58:56,333 --> 00:58:57,365
看到了？

1244
00:58:57,434 --> 00:58:59,434
并按照你的要求实现它们

1245
00:58:59,503 --> 00:59:01,069
fetchresultscontroller。

1246
00:59:01,138 --> 00:59:04,172
现在，如果没有，这个扩展名将不会被编译

1247
00:59:04,241 --> 00:59:07,508
提取结果控制器，因为扩展名无法添加

1248
00:59:07,577 --> 00:59:10,812
任何存储本身，所以你必须有存储

1249
00:59:10,881 --> 00:59:14,382
你的类，但这个类确实有获取结果控制器。

1250
00:59:14,451 --> 00:59:18,386
现在，这里没有实现的一件事是

1251
00:59:18,455 --> 00:59:22,357
cellForRowAt cuz cellForRowAt add是特定于任何

1252
00:59:22,426 --> 00:59:24,993
你在表中显示的数据，但是

1253
00:59:25,062 --> 00:59:29,064
甚至cellForRowAt，如果我们回到这里做cellForRowAt，

1254
00:59:29,133 --> 00:59:33,835
让我们这样做，所以cellForRowAt索引路径更多。

1255
00:59:33,904 --> 00:59:35,436
当然，我们知道如何做到这一点，

1256
00:59:35,505 --> 00:59:40,542
让单元格等同于tableView deque这一个，

1257
00:59:40,611 --> 00:59:45,880
而标识符是“TwitterUser Cell”我相信，

1258
00:59:45,949 --> 00:59:47,315
如我错了请纠正我。

1259
00:59:47,383 --> 00:59:50,151
而且我们想要IndexPath，所以我得到了单元格，和

1260
00:59:50,220 --> 00:59:51,586
我们返回单元格。

1261
00:59:51,654 --> 00:59:52,587
而在之间，

1262
00:59:52,655 --> 00:59:57,025
我需要加载单元格与其各种信息。

1263
00:59:57,094 --> 00:59:59,627
现在我们设置我们的单元格，如果你还记得，

1264
00:59:59,696 --> 01:00:01,196
一个副标题单元格，对吧？

1265
01:00:01,265 --> 01:00:03,231
这是一个副标题单元格。

1266
01:00:03,300 --> 01:00:06,668
所以我们可以设置它的TextLabel及其detailTextLabel。

1267
01:00:06,736 --> 01:00:08,904
所以我们只需要从TextLabel开始。

1268
01:00:08,973 --> 01:00:14,175
所以我想设置cell.textLabels文本，

1269
01:00:14,244 --> 01:00:19,814
基本上等于twitter使用手柄。

1270
01:00:19,883 --> 01:00:23,051
但是我必须得到这一行的twitter用户。

1271
01:00:24,288 --> 01:00:26,254
好的，我如何找到twitter用户

1272
01:00:26,323 --> 01:00:27,121
那就是角色？

1273
01:00:27,190 --> 01:00:30,192
我要问我的提取结果控制器。

1274
01:00:30,260 --> 01:00:33,595
让twitter用户在这个角色，

1275
01:00:33,664 --> 01:00:37,299
在这行中，我的提取结果控制器相等

1276
01:00:38,568 --> 01:00:40,235
这可能是null cuz它是一个可选的。

1277
01:00:40,303 --> 01:00:45,640
Object（at：indexPath）。

1278
01:00:45,709 --> 01:00:50,178
因为这可能是nil，因为这可能是nil

1279
01:00:50,247 --> 01:00:55,517
在这里让我们做，如果让，那么我们将更新我们的单元格。

1280
01:00:57,987 --> 01:01:00,054
现在如果我们没有一个fetchedResultsController，

1281
01:01:00,123 --> 01:01:02,090
顺便说一句，如果这是零，我们的行数和

1282
01:01:02,159 --> 01:01:03,625
所有的时间段都将为零。

1283
01:01:03,694 --> 01:01:04,559
这永远不会被称为。

1284
01:01:04,627 --> 01:01:07,095
所以我们甚至可以在这里放一个感叹号。

1285
01:01:07,163 --> 01:01:08,730
也许我们应该在这里放一个感叹号

1286
01:01:08,799 --> 01:01:11,499
因为这不应该被调用，如果这是nil。

1287
01:01:11,567 --> 01:01:14,702
但是无论如何，所以这是非常简单的方法，对象）在：

1288
01:01:14,771 --> 01:01:17,873
将会返回你的类型的东西

1289
01:01:17,941 --> 01:01:19,774
它是控制，这是Twitter用户。

1290
01:01:19,843 --> 01:01:21,176
如果我们看这里的类型，

1291
01:01:21,244 --> 01:01:24,179
你可以看到这是一个Twitter用户

1292
01:01:24,248 --> 01:01:24,812
索引路径。

1293
01:01:24,881 --> 01:01:26,213
那行和那一节。

1294
01:01:26,282 --> 01:01:27,582
所以这不容易。

1295
01:01:27,651 --> 01:01:29,851
现在我们可以在这里更新你或者你的任何东西

1296
01:01:29,920 --> 01:01:31,620
我想要，无论多么复杂。

1297
01:01:31,688 --> 01:01:33,521
我们有Twitter用户在那里显示

1298
01:01:33,590 --> 01:01:36,424
我们可以他的手柄，他的用户名，无论如何。

1299
01:01:36,493 --> 01:01:38,727
我们想把他放在那里。

1300
01:01:40,497 --> 01:01:42,297
大家都明白了吗?

1301
01:01:42,366 --> 01:01:43,298
超简单，和

1302
01:01:43,367 --> 01:01:46,400
是的，这是超简单的，这是伟大的提取

1303
01:01:46,469 --> 01:01:49,304
结果控制器是真正的代码量我们

1304
01:01:49,373 --> 01:01:52,641
其实不得不写在这里是绝对小的。

1305
01:01:52,709 --> 01:01:56,244
现在，还有一个是更新UI所以

1306
01:01:56,313 --> 01:01:59,648
当有人设置我们提到或设置我们的数据库时，

1307
01:01:59,716 --> 01:02:03,584
我们需要创建一个提取结果控制器，显然。

1308
01:02:03,653 --> 01:02:05,353
一直不能一直没有，

1309
01:02:05,421 --> 01:02:07,555
我们实际上必须创造一个，我们只会说，

1310
01:02:07,624 --> 01:02:13,495
fetchResultsController =一个新的

1311
01:02:13,563 --> 01:02:18,567
NSFetchedResultsController，用于Twitter用户。

1312
01:02:20,804 --> 01:02:24,939
我们将在这里使用这个构造函数。

1313
01:02:25,008 --> 01:02:27,208
我会继续分开这个

1314
01:02:27,277 --> 01:02:29,410
你可以看到更好的参数是什么。

1315
01:02:29,479 --> 01:02:31,379
我也从这张幻灯片中看到。

1316
01:02:33,350 --> 01:02:35,182
那么我们需要的四件事呢？

1317
01:02:35,251 --> 01:02:38,486
我们需要一个请求，我会提出一个请求。

1318
01:02:38,555 --> 01:02:41,923
我们需要一个上下文，我会做一个上下文。

1319
01:02:41,991 --> 01:02:46,561
我们需要在T​​witterUser中var的名称，

1320
01:02:46,630 --> 01:02:48,829
说这个部分的标题。

1321
01:02:48,898 --> 01:02:50,698
那么我们所有的Twitter用户都没有任何部分

1322
01:02:50,767 --> 01:02:52,567
将被列在一个像长名单一样的大象，

1323
01:02:52,636 --> 01:02:55,003
所以没有，我们不会缓存我们的结果。

1324
01:02:55,071 --> 01:02:58,473
虽然我们可以，因为我们永远不会改变这一点

1325
01:02:58,542 --> 01:03:01,375
请求 - 实际上这不是真的。

1326
01:03:01,444 --> 01:03:03,345
我们可以改变这个，因为有人可能

1327
01:03:03,413 --> 01:03:05,647
提出这个MVC，然后改变提及

1328
01:03:05,715 --> 01:03:07,949
这将改变请求寻找不同的

1329
01:03:08,018 --> 01:03:10,484
twitter用户，所以最好不要抓住这个旁边

1330
01:03:10,553 --> 01:03:13,221
结果希望会相当小。

1331
01:03:13,290 --> 01:03:15,123
所以我必须在这里做一个请求。

1332
01:03:15,192 --> 01:03:16,257
我们先来做上下文。

1333
01:03:16,326 --> 01:03:19,895
我会说，如果我能让我的上下文等于我的容器

1334
01:03:22,365 --> 01:03:23,631
查看上下文。

1335
01:03:23,700 --> 01:03:26,634
现在这是非常重要的在这里使用

1336
01:03:26,703 --> 01:03:29,837
查看上下文，因为这是一个Ui的东西。

1337
01:03:29,906 --> 01:03:32,473
这个获取结果控制器将会工作

1338
01:03:32,542 --> 01:03:34,909
与我们的表视图控制器，这就是所有的UI

1339
01:03:34,978 --> 01:03:36,778
我们想在主队列中完成所有操作。

1340
01:03:36,846 --> 01:03:39,881
所以，你必须使用视图上下文。

1341
01:03:39,949 --> 01:03:42,417
你不能做那个背景的事情

1342
01:03:42,486 --> 01:03:43,918
创建你的FetchResultController。

1343
01:03:43,987 --> 01:03:47,389
好的，所有这一切都是这样的要求

1344
01:03:47,457 --> 01:03:50,758
我会让请求显然要去

1345
01:03:50,827 --> 01:03:53,829
成为Twitter用户的NSFetchRequest。

1346
01:03:56,099 --> 01:03:58,633
我们在这里使用这个很好的方便的东西

1347
01:03:58,702 --> 01:04:02,571
TwitterUser.FetchRequest等等我们的请求需要什么？

1348
01:04:02,639 --> 01:04:06,374
那么我们的请求需要排序描述符，所以

1349
01:04:06,442 --> 01:04:09,210
我们必须要有一些排序描述符。

1350
01:04:09,278 --> 01:04:11,279
我们的请求也需要一个谓词。

1351
01:04:11,347 --> 01:04:19,153
谓词。

1352
01:04:19,222 --> 01:04:25,660
哎呀，得到这里的格式，这个。

1353
01:04:27,530 --> 01:04:29,831
我们必须在那里有一些格式字符串，和

1354
01:04:29,900 --> 01:04:33,067
那么一些人认为这个百分比是标志。

1355
01:04:33,136 --> 01:04:34,936
所以我们先来做这个排序描述符。

1356
01:04:35,004 --> 01:04:37,305
我们正在寻找所有推特用户的Twitter用户

1357
01:04:37,373 --> 01:04:39,507
一些提到的搜索一分钟。

1358
01:04:39,576 --> 01:04:43,444
我们用他们的手柄命令，在任何地方签字。

1359
01:04:43,513 --> 01:04:47,848
所以我们需要做的就是说NSSortDescriptor和

1360
01:04:47,917 --> 01:04:50,084
我们将使用带钥匙的那个。

1361
01:04:50,153 --> 01:04:56,957
不是，这将使我键入它。

1362
01:04:57,026 --> 01:05:03,364
所以我们将做关键的处理，我们将会提升真实。

1363
01:05:03,433 --> 01:05:05,299
这很好，我们只是排序，但它排序。

1364
01:05:05,368 --> 01:05:08,002
我们稍后再回来整理，看看。

1365
01:05:08,071 --> 01:05:09,704
我们只需要一个排序描述符，我们不会

1366
01:05:09,773 --> 01:05:11,573
按句柄排序

1367
01:05:11,641 --> 01:05:14,041
然后通过别的东西，因为手柄将是

1368
01:05:14,110 --> 01:05:17,345
在那里有足够的排序，我们的谓词呢？

1369
01:05:17,414 --> 01:05:20,214
我们在这里寻找哪些tweeter用户？

1370
01:05:20,283 --> 01:05:22,783
这真的是使任何事情发生的关键

1371
01:05:22,852 --> 01:05:23,718
你的家庭作业的方式，

1372
01:05:23,787 --> 01:05:28,990
真的这个功课不是很多的编程。

1373
01:05:29,059 --> 01:05:30,792
这是很多想法。

1374
01:05:30,860 --> 01:05:33,294
特别设计你的模式

1375
01:05:33,362 --> 01:05:38,065
这行代码在这里真的很简单。

1376
01:05:38,134 --> 01:05:39,600
如果你正确设计你的架构，你可以做

1377
01:05:39,669 --> 01:05:40,501
这很简单

1378
01:05:40,570 --> 01:05:43,838
这一切都是关于我实际显示的内容，

1379
01:05:43,906 --> 01:05:46,307
并且如何计算这些东西。

1380
01:05:46,376 --> 01:05:49,377
在这种情况下，我会显示所有的Twitter用户。

1381
01:05:50,547 --> 01:05:57,718
任何Twitter用户在这里的tweets，

1382
01:05:57,787 --> 01:06:01,456
他们的推文中的文字实际上包含和

1383
01:06:01,525 --> 01:06:05,126
我们会不明智地选择那个搜索词。

1384
01:06:05,195 --> 01:06:06,494
我们提到

1385
01:06:06,563 --> 01:06:08,662
哪个是可选的，所以我们最好打开包装。

1386
01:06:08,731 --> 01:06:11,398
如果我要强行解开，

1387
01:06:11,467 --> 01:06:14,402
我实际上要检查，以确保它不是nil。

1388
01:06:16,572 --> 01:06:18,940
只是要小心那里

1389
01:06:20,343 --> 01:06:21,875
所以这是我们想要的谓词。

1390
01:06:21,944 --> 01:06:24,612
我们希望任何Twitter用户。

1391
01:06:24,681 --> 01:06:26,014
因为我们正在寻找Twitter用户，

1392
01:06:26,082 --> 01:06:29,617
任何推特的Twitter用户，他们的任何推文，

1393
01:06:29,686 --> 01:06:34,956
文本包含这一点。

1394
01:06:35,025 --> 01:06:35,590
这其实是，

1395
01:06:35,659 --> 01:06:38,292
我可能说有一点点错了。

1396
01:06:38,361 --> 01:06:40,895
我们正在寻找任何有任何Twitter用户

1397
01:06:40,964 --> 01:06:44,932
它的推文文本包含这个提及。

1398
01:06:45,001 --> 01:06:48,035
任何的，在这里的意思，任何东西，任何推文

1399
01:06:48,104 --> 01:06:53,541
文本包含这个，然后在这里显示这个twitter用户。

1400
01:06:55,478 --> 01:06:56,877
每个人都得到了这一切

1401
01:06:56,946 --> 01:07:00,014
所以现在我得到了我的撷取请求控制器，

1402
01:07:00,082 --> 01:07:02,683
记住我现在需要做的只有两件事

1403
01:07:02,752 --> 01:07:07,221
尝试让我的抓取结果控制器执行此抓取，

1404
01:07:07,290 --> 01:07:10,324
好的，可以抛出，所以这就是为什么我们在那里尝试。

1405
01:07:10,393 --> 01:07:12,927
我们必须告诉我们的表视图，时间到了

1406
01:07:12,995 --> 01:07:16,130
调用所有的UI表视图数据源方法，和

1407
01:07:16,199 --> 01:07:17,799
我们知道谁来回答，

1408
01:07:17,867 --> 01:07:20,201
我们在那里的扩展。

1409
01:07:20,270 --> 01:07:22,436
这将要求提取结果控制器

1410
01:07:22,505 --> 01:07:23,838
所有需要的信息。

1411
01:07:27,643 --> 01:07:33,014
顺便说一下，我通知我，（内部，基本上）。

1412
01:07:33,082 --> 01:07:36,784
那是因为我把这个扩展放在这里

1413
01:07:36,853 --> 01:07:38,119
在一个不同的文件和

1414
01:07:38,188 --> 01:07:40,755
否则不会收到。

1415
01:07:40,824 --> 01:07:43,691
所以，如果你想让这个var私人，

1416
01:07:43,759 --> 01:07:46,094
实际上这不是一个坏主意。

1417
01:07:46,162 --> 01:07:48,762
在使用fetchedResultsController的MVC中，

1418
01:07:48,831 --> 01:07:51,365
使其控制器公开化有点开放

1419
01:07:51,434 --> 01:07:52,400
它的内在胆量。

1420
01:07:52,468 --> 01:07:55,703
如果你想让这个私人的话，那你就可以了

1421
01:07:55,772 --> 01:07:57,605
把这个扩展名放在文件的底部，

1422
01:07:57,674 --> 01:07:58,272
在同一个文件中。

1423
01:07:58,341 --> 01:08:00,875
这样他们就可以看到它了。

1424
01:08:02,945 --> 01:08:10,718
希望我们记得一切，

1425
01:08:10,787 --> 01:08:15,523
我们去试试看吧。

1426
01:08:16,526 --> 01:08:18,393
我们再来这里#stanford。

1427
01:08:19,896 --> 01:08:21,429
现在我要按Tweeters。

1428
01:08:21,497 --> 01:08:24,399
而且这将要转移到这个新的MVC

1429
01:08:24,467 --> 01:08:26,934
将有希望向我们列出所有人的名单

1430
01:08:27,003 --> 01:08:27,802
在这里推特。

1431
01:08:27,871 --> 01:08:29,069
当然可以肯定的。

1432
01:08:29,138 --> 01:08:31,706
这些都是推特之一的人

1433
01:08:31,775 --> 01:08:33,975
该搜索团队发现的推文。

1434
01:08:34,043 --> 01:08:35,310
搜索字词#stanford。

1435
01:08:35,378 --> 01:08:37,411
它甚至列在顶部，这是一个很酷，

1436
01:08:37,480 --> 01:08:40,914
因为这和这里的后退按钮相同。

1437
01:08:40,983 --> 01:08:42,850
现在，有一件事我不喜欢这个，

1438
01:08:42,918 --> 01:08:45,786
一些事情，一个，副标题。

1439
01:08:45,855 --> 01:08:46,821
好的，这不是很好，

1440
01:08:46,890 --> 01:08:48,423
我们可以把东西放在那里，

1441
01:08:48,491 --> 01:08:51,659
也许我们可以把他们推送的tweet多少

1442
01:08:51,727 --> 01:08:53,561
匹配搜索字词，那会很酷。

1443
01:08:53,630 --> 01:08:55,763
然后，另一件事就是它的命令，

1444
01:08:55,832 --> 01:08:59,100
看这个，所有的大写字母的第一个和

1445
01:08:59,169 --> 01:09:03,004
然后是所有的小写字母。

1446
01:09:03,072 --> 01:09:04,505
我想这一切都是字母不区分大小写，

1447
01:09:04,506 --> 01:09:05,939
就这样，

1448
01:09:06,008 --> 01:09:08,576
所以我们来解决这些问题。

1449
01:09:08,645 --> 01:09:12,212
所以不区分大小写只是一个排序问题。

1450
01:09:12,281 --> 01:09:14,349
我们在那里排序，它是按照一些默认排序，

1451
01:09:14,417 --> 01:09:17,084
而默认显然是区分大小写的搜索

1452
01:09:17,153 --> 01:09:18,185
我们不想要。

1453
01:09:18,254 --> 01:09:21,155
所以这就是这个排序选择器所在的地方。

1454
01:09:21,223 --> 01:09:25,326
而我们只是说#selector，它必须是一个NSString

1455
01:09:25,394 --> 01:09:27,628
选择器，因为这是一个NSString字段。

1456
01:09:27,697 --> 01:09:29,063
还有不少的，

1457
01:09:29,132 --> 01:09:32,733
如果输入compare，你会看到它们是什么。

1458
01:09:32,802 --> 01:09:35,603
所以，有一个localizedCaseInsensitive，

1459
01:09:35,671 --> 01:09:38,973
这样的事情，所以我们来试试CaseInsensitive。

1460
01:09:39,041 --> 01:09:41,675
我们做本地化的不区分大小写的比较。

1461
01:09:41,744 --> 01:09:44,812
所以这是不区分大小写，并使用用户的本地

1462
01:09:44,881 --> 01:09:48,783
语言知道什么在哪里，订购是什么。

1463
01:09:48,852 --> 01:09:49,884
所以这是一个很好的，

1464
01:09:49,953 --> 01:09:52,420
使用本地化的不区分大小写比较。

1465
01:09:52,489 --> 01:09:54,956
所以我们需要做的就是区分大小写，

1466
01:09:55,024 --> 01:09:56,824
这真的很容易。

1467
01:09:56,893 --> 01:10:01,496
这个有单元格细节的文字标签怎么样？

1468
01:10:03,032 --> 01:10:05,065
有twitter帐号，

1469
01:10:05,134 --> 01:10:06,034
基本上是tweet的账号。

1470
01:10:06,102 --> 01:10:13,407
所以我会说这个等于Twitter的tweet计数。

1471
01:10:13,476 --> 01:10:18,980
Tweet，让我们甚至在这里很好，放一个，如果它是一个。

1472
01:10:20,483 --> 01:10:23,250
计数等于1。

1473
01:10:23,319 --> 01:10:27,654
那么我们将会终结一切，否则我们什么也没有。

1474
01:10:27,723 --> 01:10:28,622
好吧，每个人都看到我在那里做了什么？

1475
01:10:28,691 --> 01:10:29,690
所以它需要一个tweet。

1476
01:10:29,759 --> 01:10:32,059
我们还需要做什么？

1477
01:10:32,128 --> 01:10:38,732
我们会这样做

1478
01:10:38,801 --> 01:10:40,001
好吧，所以我只想让它看起来不错。

1479
01:10:40,069 --> 01:10:42,804
一个tweet，两个tweets，零推文。

1480
01:10:42,872 --> 01:10:44,738
如何在这里得到这个推文计数

1481
01:10:44,807 --> 01:10:47,742
让tweet计数等于什么？

1482
01:10:49,512 --> 01:10:53,580
为了做到这一点，我要做一点点快

1483
01:10:53,649 --> 01:10:57,518
快速类型代码，因为我们在这里接近尾声。

1484
01:10:57,587 --> 01:11:00,588
我有一种方法叫做tweet count，

1485
01:11:00,657 --> 01:11:03,691
在这里提到。

1486
01:11:03,760 --> 01:11:05,660
让我们来看看这个方法，以及它是如何工作的。

1487
01:11:05,728 --> 01:11:12,133
所以这会给tweetCountWithMentionBy

1488
01:11:12,201 --> 01:11:15,603
这个twitterUser，我们得到的twitterUser

1489
01:11:15,672 --> 01:11:16,671
我们的fetchResultsController。

1490
01:11:16,739 --> 01:11:17,739
它会给我们tweetCount。

1491
01:11:17,807 --> 01:11:20,541
它的工作方式是创建一个提取

1492
01:11:20,609 --> 01:11:21,408
发短信

1493
01:11:21,477 --> 01:11:25,880
所以这里甚至在我的cellForRowAtIndexPath的中间，

1494
01:11:25,949 --> 01:11:29,083
我提出完全有效的请求去获取

1495
01:11:29,152 --> 01:11:31,285
请求中间在这里找到一些信息。

1496
01:11:31,354 --> 01:11:33,187
所以在这里，我这次提取推文，

1497
01:11:33,256 --> 01:11:36,557
因为我想计算这个Twitter用户的推文数量

1498
01:11:36,626 --> 01:11:37,725
已经推出了这样肯定的。

1499
01:11:37,793 --> 01:11:39,126
而谓词是，

1500
01:11:39,195 --> 01:11:44,398
“告诉我所有的Tweets谁的文本包含提及”。

1501
01:11:44,467 --> 01:11:47,335
谁的Tweeter是这个Twitter用户？

1502
01:11:50,606 --> 01:11:51,673
提及和一个twitterUser。

1503
01:11:51,741 --> 01:11:54,241
我要继续前进，强行解包，

1504
01:11:54,310 --> 01:11:56,577
因为，如果我一路走到这里，

1505
01:11:56,646 --> 01:11:58,246
当然提到的不是nil。

1506
01:11:59,282 --> 01:12:01,015
然后我要回来，

1507
01:12:01,083 --> 01:12:04,351
我将使用与twitterUser相同的上下文，

1508
01:12:04,420 --> 01:12:06,920
希望这是一个视图的背景。

1509
01:12:06,989 --> 01:12:10,224
我要算数，用这个数

1510
01:12:10,293 --> 01:12:11,559
那个请求。

1511
01:12:11,627 --> 01:12:12,993
如果由于某种原因失败了，

1512
01:12:13,062 --> 01:12:14,896
我会说0个推文。

1513
01:12:17,000 --> 01:12:18,733
你有这个吗

1514
01:12:18,802 --> 01:12:23,671
所以我们走吧

1515
01:12:23,740 --> 01:12:29,076
看一看。

1516
01:12:29,145 --> 01:12:32,513
对，#stanford。

1517
01:12:32,582 --> 01:12:33,681
对，在这里

1518
01:12:33,750 --> 01:12:38,419
Tweeter，看看，不是1个推文，37个来自MEC30的tweets。

1519
01:12:38,488 --> 01:12:41,021
我们来看看我们是否可以在这里找到MEC30。

1520
01:12:41,090 --> 01:12:43,824
当然，有一个我的MEC30，另一个，肯定够了。

1521
01:12:43,893 --> 01:12:45,392
看这个ME，什么？

1522
01:12:45,461 --> 01:12:49,530
好的，如果我决定我不想让MEC30在那里了。

1523
01:12:49,598 --> 01:12:51,999
我不喜欢，这个家伙是垃圾邮件发送者或者什么东西。

1524
01:12:52,067 --> 01:12:53,534
我不知道他的问题是什么。

1525
01:12:53,603 --> 01:12:54,868
但我不想让他在那里。

1526
01:12:54,937 --> 01:12:58,706
嗯，我可以回到这里，在这里改变我的谓词

1527
01:12:58,774 --> 01:13:02,309
说，我想要所有的tweets有这个。

1528
01:13:02,378 --> 01:13:07,881
但我不想要那个家伙的手柄，我们来吧

1529
01:13:07,950 --> 01:13:13,454
说这甚至开始，只是一种有趣的MEC。

1530
01:13:13,523 --> 01:13:14,055
它以前如何？

1531
01:13:14,123 --> 01:13:16,156
MEC，我们会说。

1532
01:13:16,225 --> 01:13:20,260
所以我们不能把这个字面意思放在这里

1533
01:13:20,329 --> 01:13:26,534
我们必须说％@，然后我们把MEC放在外面。

1534
01:13:26,603 --> 01:13:31,205
所以我们来看看

1535
01:13:31,273 --> 01:13:36,277
如果摆脱了

1536
01:13:36,346 --> 01:13:40,981
梅先生。

1537
01:13:41,050 --> 01:13:44,418
他走了！

1538
01:13:44,487 --> 01:13:46,653
有垃圾邮件发送者出来了。

1539
01:13:46,722 --> 01:13:47,254
没有问题？

1540
01:13:47,323 --> 01:13:48,489
是？问题？

1541
01:13:48,558 --> 01:13:51,191
是的，所以问题是数据库中的tweets，

1542
01:13:51,260 --> 01:13:53,861
他们留在那里跑跑吗？

1543
01:13:53,930 --> 01:13:55,262
答案是绝对的，

1544
01:13:55,331 --> 01:13:57,264
这是一个，核心数据是有点儿。

1545
01:13:57,333 --> 01:13:58,432
有一个永久数据库。

1546
01:13:58,501 --> 01:14:01,535
所以所有这些推文，那些#stanford的tweets在那里，

1547
01:14:01,604 --> 01:14:03,137
如果我们回去再运行。

1548
01:14:08,611 --> 01:14:10,244
并搜索#stanford。

1549
01:14:10,313 --> 01:14:11,712
如果有，你知道，

1550
01:14:11,780 --> 01:14:14,148
自从那以后，他们就加了一些推文。

1551
01:14:14,217 --> 01:14:16,717
但是我们所得到的每一个tweet仍然是

1552
01:14:16,786 --> 01:14:17,517
要在这里

1553
01:14:17,586 --> 01:14:19,453
所以你可以看到这个清单实际上稍长一些，

1554
01:14:19,522 --> 01:14:21,388
有一些推特在那里，但他们都在那里。

1555
01:14:21,457 --> 01:14:26,159
我们是独一无二的，所以它不是一再添加。

1556
01:14:26,228 --> 01:14:27,761
你必须小心做这些，你的家庭作业。

1557
01:14:27,830 --> 01:14:29,630
不要一遍又一遍地添加它们。

1558
01:14:29,699 --> 01:14:31,632
但是，那个CoreData数据库是在那里的。

1559
01:14:31,701 --> 01:14:33,467
顺便说一句，我会告诉你一个伎俩。

1560
01:14:33,535 --> 01:14:35,569
我们刚刚足够的时间向您展示一些非常酷的东西。

1561
01:14:35,638 --> 01:14:38,472
如果你想删除你的数据库怎么办？

1562
01:14:38,541 --> 01:14:40,507
好的，现在有两个原因，

1563
01:14:40,576 --> 01:14:41,641
可能会删除您的数据库。

1564
01:14:41,710 --> 01:14:43,844
一个，你想清除数据，你想要一个新鲜的

1565
01:14:43,913 --> 01:14:45,880
设置，以便您可以看到事情是否正常工作。

1566
01:14:45,948 --> 01:14:49,416
而第二，您可能会更改您的数据模型。

1567
01:14:49,485 --> 01:14:53,453
如果我回到这里，我在这里和我的数据模型

1568
01:14:53,522 --> 01:14:56,323
我添加一些属性或添加一个实体，

1569
01:14:56,392 --> 01:15:01,628
那么我的应用程序将不再在该设备上运行

1570
01:15:01,697 --> 01:15:05,833
在模拟器cuz它会说你的数据模型不匹配

1571
01:15:05,902 --> 01:15:07,902
已经在此设备上的数据。

1572
01:15:07,970 --> 01:15:10,938
所以这里是摆脱魔法，这不是很神奇。

1573
01:15:11,006 --> 01:15:12,206
在您的设备上，或

1574
01:15:12,275 --> 01:15:15,543
在模拟器上，你到这里的主页按钮

1575
01:15:15,612 --> 01:15:19,413
你按住可以让事情摇摆。

1576
01:15:19,482 --> 01:15:20,280
你们都知道吗

1577
01:15:20,349 --> 01:15:21,648
这是您如何删除应用程序。

1578
01:15:21,717 --> 01:15:25,018
只需删除您的应用程序

1579
01:15:25,087 --> 01:15:28,755
当您删除应用程序时，您的核心数据将随之而来。

1580
01:15:28,824 --> 01:15:31,491
而现在当你下次运行时，你会跑，

1581
01:15:31,560 --> 01:15:33,160
它将成为一个新的数据库，

1582
01:15:33,229 --> 01:15:34,961
它将拥有新的数据模型等

1583
01:15:35,030 --> 01:15:36,664
所以我很高兴你问，

1584
01:15:36,732 --> 01:15:39,599
真正重要的是要知道如何清除你的数据库。

1585
01:15:39,668 --> 01:15:43,070
现在，如果我们做#trump或某事，

1586
01:15:43,138 --> 01:15:48,342
看到它甚至再次问我，我想要允许吗？

1587
01:15:48,410 --> 01:15:49,143
我做的

1588
01:15:53,582 --> 01:15:55,449
好的，就是这样。

1589
01:15:55,518 --> 01:15:58,319
在你转过身后，星期三我会看到你的

1590
01:15:58,388 --> 01:15:59,252
作业和

1591
01:15:59,321 --> 01:16:04,691
我们将在Autolayout中了解最终的项目。

1592
01:16:04,760 --> 01:16:14,768
更多，请访问我们的stanford.edu。

