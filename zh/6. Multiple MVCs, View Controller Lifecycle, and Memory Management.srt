1
00:00:00,401 --> 00:00:04,736
[MUSIC]

2
00:00:04,805 --> 00:00:07,806
斯坦福大学

3
00:00:07,875 --> 00:00:12,978
>>欢迎来到斯坦福CS193p，开发应用程序

4
00:00:13,046 --> 00:00:16,448
iOS，这是2017年冬季。

5
00:00:16,517 --> 00:00:20,886
今天我们要谈谈一些事情。

6
00:00:20,954 --> 00:00:23,588
我们会开始，但是给我一个关于我的演示

7
00:00:23,657 --> 00:00:27,225
谈到上次是多个MVC。

8
00:00:27,294 --> 00:00:29,928
之后，我将在视图控制器上做一些幻灯片

9
00:00:29,997 --> 00:00:32,931
生命周期，真正重要的发现机制

10
00:00:33,000 --> 00:00:37,002
随着时间流逝，你的MVC发生了什么。

11
00:00:37,070 --> 00:00:39,671
如果我有时间离开，我会开始

12
00:00:39,739 --> 00:00:41,740
谈一点关于内存管理，

13
00:00:41,809 --> 00:00:44,776
这基本上是管理参考类型的记忆，

14
00:00:44,845 --> 00:00:45,777
在堆中的东西

15
00:00:45,846 --> 00:00:46,845
他们如何得到管理？

16
00:00:46,914 --> 00:00:48,914
他们怎么知道什么时候留在堆里，或者

17
00:00:48,982 --> 00:00:50,616
离开堆？

18
00:00:50,684 --> 00:00:54,219
但首先，我们将从此演示开始。

19
00:00:54,288 --> 00:00:58,690
我在FaceIt中称这个演示情绪。

20
00:00:58,759 --> 00:00:59,758
如果你记得上次，

21
00:00:59,826 --> 00:01:03,094
我们建立了一个很好的MVC，知道如何画一张脸。

22
00:01:03,163 --> 00:01:05,130
这是一个非常通用的MVC和

23
00:01:05,198 --> 00:01:07,833
如何建模，哪一种是面部表情。

24
00:01:07,901 --> 00:01:10,602
所以现在我们要构建一个更复杂的应用程序了

25
00:01:10,670 --> 00:01:12,204
两个MVC。

26
00:01:12,273 --> 00:01:15,140
一个MVC将让您选择一种情感。

27
00:01:15,209 --> 00:01:16,942
喜欢快乐或悲伤

28
00:01:17,010 --> 00:01:19,678
然后另一个MVC将成为我们的通用面孔

29
00:01:19,747 --> 00:01:23,048
视图，它会显示出这种情感。

30
00:01:23,117 --> 00:01:24,183
我们将学习如何使用分割视图控制器和

31
00:01:24,184 --> 00:01:25,250
通过这样做，

32
00:01:25,318 --> 00:01:29,020
导航控制器，组合MVC，制作大图。

33
00:01:29,089 --> 00:01:32,857
这是一个简单的例子，因为时间的限制

34
00:01:32,926 --> 00:01:34,693
你应该得到这个想法。

35
00:01:34,761 --> 00:01:38,697
所以在这里我回到了FaceIt，这个演示我们最后一次。

36
00:01:39,633 --> 00:01:40,531
有一件事我开始之前，

37
00:01:40,600 --> 00:01:42,134
我想给你看看你需要的东西

38
00:01:42,202 --> 00:01:45,169
你的家庭作业，这是如何重命名一个ViewController。

39
00:01:45,238 --> 00:01:46,338
我在这里有这个ViewController

40
00:01:46,407 --> 00:01:48,674
这是显示脸部的ViewController。

41
00:01:48,742 --> 00:01:51,443
记住，这里是faceView var，这里是它的模型。

42
00:01:53,380 --> 00:01:55,880
所以我不喜欢这个名字ViewController。

43
00:01:55,949 --> 00:01:58,050
这真的太通用了。

44
00:01:58,118 --> 00:01:59,684
这几乎就像是父类，

45
00:01:59,753 --> 00:02:01,486
这是UIViewController。

46
00:02:01,555 --> 00:02:04,155
这真的是想成为一些具体的名字

47
00:02:04,224 --> 00:02:07,025
视图控制器，在这种情况下它显示一个脸

48
00:02:07,094 --> 00:02:10,429
这可能最好叫它faceviewcontroller。

49
00:02:10,498 --> 00:02:13,231
所以我想在这里打字面

50
00:02:13,300 --> 00:02:15,199
希望就够了

51
00:02:15,268 --> 00:02:17,769
但当然如我所说的第一讲

52
00:02:17,838 --> 00:02:19,705
这还不够

53
00:02:19,773 --> 00:02:22,740
你不能只是在那里重命名。

54
00:02:22,809 --> 00:02:25,310
你实际上必须重命名其他几件事情。

55
00:02:25,379 --> 00:02:27,412
一个，它所在的文件，你看到的文件，

56
00:02:27,481 --> 00:02:29,747
仍然称为viewcontroller.swift。

57
00:02:29,816 --> 00:02:34,719
我们几乎总是想要我们的名字

58
00:02:34,788 --> 00:02:37,689
我们的文件与那里的主要类一样。

59
00:02:37,758 --> 00:02:40,091
现在，swift文件的名称不是必需的

60
00:02:40,160 --> 00:02:43,694
可能是完全不同于任何类在那里。

61
00:02:43,763 --> 00:02:45,113
有助于人们找到他们正在寻找的代码，

62
00:02:45,114 --> 00:02:46,464
但一般来说，

63
00:02:46,533 --> 00:02:49,234
我们想要的文件的名称几乎相当

64
00:02:49,303 --> 00:02:50,235
主类的名称。

65
00:02:50,303 --> 00:02:52,404
它可以是一个短文件中的多个类，

66
00:02:52,473 --> 00:02:54,372
这是完全允许的，但是

67
00:02:54,441 --> 00:02:55,974
特别是如果是主要的。

68
00:02:56,043 --> 00:02:58,043
你可能会认为，那就够了，但是

69
00:02:58,111 --> 00:02:59,244
还有一个非常，

70
00:02:59,312 --> 00:03:01,947
这是故事板中非常重要的一部分。

71
00:03:02,015 --> 00:03:05,350
我们没有太多关于这个问题

72
00:03:05,418 --> 00:03:08,186
实际上，我们用Face View看到了。

73
00:03:08,255 --> 00:03:10,122
我们用Face View做了这个，但是

74
00:03:10,190 --> 00:03:13,591
我们需要检查这个控制器，我是

75
00:03:13,660 --> 00:03:16,094
点击这个橙色的东西点击控制器

76
00:03:16,163 --> 00:03:20,097
在这里，这代表了整个MVC的控制器。

77
00:03:20,166 --> 00:03:23,001
当我们继续前进的时候，我们会去看同样的检查员

78
00:03:23,070 --> 00:03:26,104
将面部视图从通用UI视图更改为

79
00:03:26,173 --> 00:03:28,340
作为具体的面部视图。

80
00:03:28,409 --> 00:03:30,642
在这里做同样的事情。

81
00:03:30,711 --> 00:03:33,378
所以选择这个整个视图控制器和

82
00:03:33,446 --> 00:03:36,147
在这里和我去身份检查员

83
00:03:36,216 --> 00:03:39,150
'要从ViewController更改类，

84
00:03:39,219 --> 00:03:43,021
这就是Face View控制器的通用名称。

85
00:03:43,089 --> 00:03:45,057
所以如果你忘了做这件事，

86
00:03:45,125 --> 00:03:47,292
比没有一个你的网点会被挂上。

87
00:03:47,361 --> 00:03:49,360
而iOS会因为你而感到困惑

88
00:03:49,429 --> 00:03:52,097
要求它将网点连接到不同的类。

89
00:03:52,165 --> 00:03:55,033
SomeClasses不再存在我更改了它。

90
00:03:57,504 --> 00:03:58,603
你需要做这些才能做作业。

91
00:03:58,672 --> 00:04:01,572
您将不得不更改当前的计算器

92
00:04:01,641 --> 00:04:03,541
MVC被称为视图控制器

93
00:04:03,610 --> 00:04:05,710
被称为像计算器视图控制器和

94
00:04:05,778 --> 00:04:08,446
那是因为你会有这个新的MVC图

95
00:04:08,515 --> 00:04:12,651
查看控制器 - 你想明确哪一个是哪个。

96
00:04:12,719 --> 00:04:16,087
现在我不会碰我的脸部视图控制器或

97
00:04:16,156 --> 00:04:18,557
MVC在这个演示中从这里开始。

98
00:04:19,659 --> 00:04:22,861
我要建立这个多MVC应用程序，

99
00:04:22,929 --> 00:04:25,630
我会使用我的脸视图控制器

100
00:04:25,699 --> 00:04:28,199
最后一次成为可重复使用的组件。

101
00:04:28,268 --> 00:04:29,901
就像你的图形视图一样

102
00:04:29,970 --> 00:04:33,505
控制器将在您的家庭作业中成为可重用的MVC。

103
00:04:35,308 --> 00:04:37,475
我说我想要两个MVC。

104
00:04:37,544 --> 00:04:40,512
一个只是一些情绪的清单。

105
00:04:40,580 --> 00:04:43,948
然后我要用这个MVC来表现出这种情感。

106
00:04:44,017 --> 00:04:46,751
所以让我们直接进入这个

107
00:04:46,820 --> 00:04:49,254
将另一个MVC放入我们的故事板。

108
00:04:49,323 --> 00:04:53,524
我们有一个MVC，我们得到另一个MVC

109
00:04:53,593 --> 00:04:58,496
同样的方式，我们得到一个新的按钮或类似的东西，

110
00:04:58,565 --> 00:05:02,367
这是到这里到公用窗口

111
00:05:02,435 --> 00:05:05,036
在这里的底部，只是拖出一个视图控制器。

112
00:05:05,105 --> 00:05:06,004
你只是把它拉出来

113
00:05:06,073 --> 00:05:09,007
把它拖到你的故事板上。

114
00:05:09,076 --> 00:05:11,443
现在这个MVC就在这里，

115
00:05:11,512 --> 00:05:14,111
什么会是它的控制器类？

116
00:05:14,180 --> 00:05:16,814
这将是（如果我们通过点击选择它）

117
00:05:16,883 --> 00:05:18,750
橙色的东西），UI视图控制器。

118
00:05:18,819 --> 00:05:19,951
换句话说不是一个子类。

119
00:05:20,020 --> 00:05:22,120
所以我们需要创建一个自定义子类

120
00:05:22,189 --> 00:05:24,288
这个视图控制器就像我们一样

121
00:05:24,357 --> 00:05:25,990
我们的脸部控制器。

122
00:05:26,059 --> 00:05:28,693
我们会在一秒钟内完成。

123
00:05:28,762 --> 00:05:29,594
在我们这样做之前，

124
00:05:29,663 --> 00:05:31,095
我想谈谈这个小箭头。

125
00:05:31,164 --> 00:05:32,864
你在这里看到这个箭头？

126
00:05:32,932 --> 00:05:36,434
这是这个应用启动时告诉iOS的箭头，

127
00:05:36,503 --> 00:05:40,104
使用这个MVC作为第一件事情出现。

128
00:05:40,173 --> 00:05:43,875
就像故事板里的“入门”一样。

129
00:05:43,944 --> 00:05:45,610
所以如果我想要它是另一个，

130
00:05:45,679 --> 00:05:47,345
我可以用鼠标拿起它。

131
00:05:47,414 --> 00:05:48,679
并放在那个。

132
00:05:48,748 --> 00:05:51,282
现在这是我的入门MVC。

133
00:05:51,351 --> 00:05:54,419
我也想让你注意到我们在这里有一个警告。

134
00:05:54,488 --> 00:05:55,987
你看到这个黄色警告？

135
00:05:56,056 --> 00:05:56,888
我要点击这个，

136
00:05:56,956 --> 00:05:59,624
我们将在这里看到它表示面部控制器是

137
00:05:59,692 --> 00:06:03,127
无法访问，因为它没有进入点。

138
00:06:03,196 --> 00:06:04,930
这个视图控制器就在这里

139
00:06:04,998 --> 00:06:08,366
面对，你永远不会在你的应用程序中看到。

140
00:06:08,435 --> 00:06:11,235
这是真的，因为我的应用程序会来这里

141
00:06:11,304 --> 00:06:14,405
空白的，我不能从那里得到FaceView。

142
00:06:14,474 --> 00:06:17,075
现在我们打算添加SplitView控制器，

143
00:06:17,144 --> 00:06:19,243
和导航控制器，我们最终会成为

144
00:06:19,312 --> 00:06:21,012
能够到达那里，但我只是想让你明白什么

145
00:06:21,081 --> 00:06:23,114
这种不受支持的配置意味着。

146
00:06:23,183 --> 00:06:24,749
这只是意味着你不能到达那里。

147
00:06:24,818 --> 00:06:26,951
如果我把它移回来，这个箭头就离开了

148
00:06:27,020 --> 00:06:29,287
回到这里，现在这个，你看，

149
00:06:29,356 --> 00:06:31,555
视图控制器无法访问。

150
00:06:31,624 --> 00:06:32,758
这是完美的。

151
00:06:34,694 --> 00:06:37,028
如果我运行这个应用程序，我们继续运行，你是

152
00:06:37,096 --> 00:06:39,697
会看到我的应用程序会完全空白。

153
00:06:39,766 --> 00:06:42,667
那个面孔不会在那里，因为MVC是

154
00:06:42,736 --> 00:06:43,801
真的没有被使用。

155
00:06:43,870 --> 00:06:45,604
现在在故事板上，但是

156
00:06:45,672 --> 00:06:48,339
因为它不可访问，我们无法导航到它。

157
00:06:48,408 --> 00:06:51,175
我们不能使用它来使用术语

158
00:06:51,244 --> 00:06:52,610
上次学习

159
00:06:52,679 --> 00:06:53,979
我们得到这个完全空白的UI。

160
00:06:57,351 --> 00:07:01,653
如果我们想要有出口和行动的东西，

161
00:07:01,722 --> 00:07:04,956
或者任何类似的东西，与此View Controller，它需要

162
00:07:05,025 --> 00:07:07,625
有一个UI视图控件的自定义子类，

163
00:07:07,694 --> 00:07:08,760
它不能只是通用的。

164
00:07:08,829 --> 00:07:09,594
所以我们要创建它。

165
00:07:09,662 --> 00:07:12,230
我们要去文件，新文件，记住这是永远

166
00:07:12,298 --> 00:07:14,866
当我们创建一个新的UI View Subclass时，

167
00:07:14,935 --> 00:07:18,102
一个新的UI视图控制器，任何计算器大脑。

168
00:07:18,171 --> 00:07:19,370
我们做了所有那些从新的文件。

169
00:07:19,439 --> 00:07:20,972
所以我会点击新的文件。

170
00:07:21,041 --> 00:07:26,210
这将是UI视图控制器的子类。

171
00:07:26,279 --> 00:07:28,980
我会在这里选一个，cocoa touch class。

172
00:07:29,048 --> 00:07:30,915
我们在这里使用swift文件

173
00:07:30,984 --> 00:07:33,285
计算器大脑，不是子类的任何东西。

174
00:07:33,353 --> 00:07:35,753
但在这里，我们会做cocoa touch class。

175
00:07:35,822 --> 00:07:37,589
它说的子类是什么？

176
00:07:37,657 --> 00:07:39,658
好的，甚至在这里默认UIVewController。

177
00:07:39,726 --> 00:07:41,359
以前记得我们选UIView。

178
00:07:41,428 --> 00:07:43,494
我们要离开这个UIViewController，我会去的

179
00:07:43,563 --> 00:07:46,498
调用这个视图控制器我的EmotionsViewController。

180
00:07:47,968 --> 00:07:50,802
所以这样会表现出情绪喜欢快乐，

181
00:07:50,871 --> 00:07:51,402
悲伤，无论如何，和

182
00:07:51,471 --> 00:07:53,604
那么我要点击它来显示脸。

183
00:07:53,673 --> 00:07:55,473
所以我只是这样做

184
00:07:55,542 --> 00:07:56,908
去这里，它说你想把它放在哪里。

185
00:07:56,976 --> 00:07:58,676
再次，我不想把它放在这里。

186
00:07:58,745 --> 00:08:00,145
你看到Group FaceIt在哪里，

187
00:08:00,213 --> 00:08:01,612
它有那个蓝色的图标。

188
00:08:01,681 --> 00:08:03,548
我们想把它放在这里。

189
00:08:03,616 --> 00:08:04,549
所以如果你把它放在这里，

190
00:08:04,618 --> 00:08:06,584
它将处于最高水平。

191
00:08:06,653 --> 00:08:10,054
在这里，它与你所有的其他类空间

192
00:08:10,123 --> 00:08:11,856
faceview.swift等

193
00:08:11,925 --> 00:08:13,391
所以确保你记得这样做。

194
00:08:14,828 --> 00:08:16,094
所以在这里我突然出现在那里。

195
00:08:16,163 --> 00:08:18,329
在导航器中选择了我的视图控制器。

196
00:08:18,398 --> 00:08:20,198
让我们让导航器有点宽一些

197
00:08:20,267 --> 00:08:21,332
你可以阅读它，我们去。

198
00:08:21,401 --> 00:08:23,234
EmotionsViewController和

199
00:08:23,303 --> 00:08:26,237
你可以看到它给我一些代码。

200
00:08:26,306 --> 00:08:28,973
这些权限在这里是ViewController生命周期的一部分，

201
00:08:29,042 --> 00:08:31,343
我承诺我会在这之后谈论

202
00:08:32,279 --> 00:08:33,445
不过不是现在。

203
00:08:33,513 --> 00:08:36,080
还有另一件事情被评论了

204
00:08:36,149 --> 00:08:39,583
在这里，这对于今天的讲座其实是非常重要的。

205
00:08:39,652 --> 00:08:42,220
这是导航方法，

206
00:08:42,289 --> 00:08:45,957
你从上次的讲座中都知道的很好。

207
00:08:46,026 --> 00:08:48,059
它被称为准备segue。

208
00:08:49,428 --> 00:08:53,465
这是当我们走过或将要使用的方法

209
00:08:53,534 --> 00:08:56,468
从这个MVC转换到另一个。

210
00:08:56,536 --> 00:08:58,736
我们必须准备另一个人来做这件事

211
00:08:58,805 --> 00:09:00,805
这就是为什么我们这样做，准备segue。

212
00:09:00,874 --> 00:09:03,040
我们会回来执行准备

213
00:09:03,109 --> 00:09:05,944
在短短的一分钟内。

214
00:09:06,012 --> 00:09:09,480
现在我们有这个新的类，EmotionsViewController，

215
00:09:09,549 --> 00:09:11,682
我们必须做同样的事情，我们刚刚做的。

216
00:09:11,751 --> 00:09:13,618
哪个是回到我们的故事板，

217
00:09:13,687 --> 00:09:17,421
单击此View控制器，转到“实用程序”窗口，

218
00:09:17,490 --> 00:09:19,657
得到身份检查员。

219
00:09:19,726 --> 00:09:22,560
然后在EmotionsViewController中选择该类，所以

220
00:09:22,629 --> 00:09:25,129
现在这是一个EmotionsViewController，

221
00:09:25,198 --> 00:09:28,533
不是通用的UIView控制器。

222
00:09:28,601 --> 00:09:29,801
所以现在我们已经勾结了，

223
00:09:29,869 --> 00:09:31,869
我们可以在这里开始构建UI。

224
00:09:31,938 --> 00:09:32,937
我们的UI在这里是什么？

225
00:09:33,006 --> 00:09:34,372
它会变得超级简单，

226
00:09:34,441 --> 00:09:35,973
我只是要抓住一些按钮，所以

227
00:09:36,042 --> 00:09:37,609
让我们在这里得到一个

228
00:09:37,677 --> 00:09:39,544
让我们改变那个按钮的一些属性。

229
00:09:39,613 --> 00:09:42,813
让我们让字体真的很大，

230
00:09:42,882 --> 00:09:45,784
像40点一样可能是好的。

231
00:09:47,454 --> 00:09:49,753
让我们再来一些，

232
00:09:49,822 --> 00:09:51,255
我要复制粘贴。

233
00:09:51,324 --> 00:09:54,092
我认为他们中的三个是足够的这个演示。

234
00:09:54,160 --> 00:09:57,828
我们会有一个我们的情绪是悲伤的，另一种情绪是

235
00:09:57,897 --> 00:10:00,798
快乐，我不知道这是否是情绪，但是

236
00:10:00,867 --> 00:10:04,102
我们会让这个人担心。

237
00:10:04,171 --> 00:10:06,337
那些将是我们将要展示的三件事情

238
00:10:06,406 --> 00:10:09,941
与我们的脸。

239
00:10:10,010 --> 00:10:12,910
看，让我们在他们之间放一点空间。

240
00:10:12,979 --> 00:10:15,079
即使它们都是按钮，所以我们也会平均填充

241
00:10:15,148 --> 00:10:18,750
无论如何，他们都将被平等地填补。

242
00:10:18,818 --> 00:10:20,918
所以我们在这里有很好的堆栈视图。

243
00:10:20,987 --> 00:10:24,522
现在，关于这个堆栈视图的一个方面是，如果我把它

244
00:10:24,591 --> 00:10:28,560
在这里我下来看看我的各种方向

245
00:10:28,629 --> 00:10:31,796
设备，如果我去景观这里，“呃！”。

246
00:10:31,865 --> 00:10:33,298
它被切断了，对吧？

247
00:10:33,366 --> 00:10:37,001
所以我真的想要这些，这个堆栈留在中间。

248
00:10:37,070 --> 00:10:38,303
我不想做同样的事情

249
00:10:38,371 --> 00:10:40,171
计算器，我把它粘在边缘。

250
00:10:40,240 --> 00:10:41,539
我只是想让它留在中间cuz我不​​想要

251
00:10:41,608 --> 00:10:42,974
按钮有点真的散开了。

252
00:10:43,043 --> 00:10:45,743
我希望他们能够收集，但是

253
00:10:45,812 --> 00:10:47,011
我希望他们在中间。

254
00:10:47,080 --> 00:10:49,146
我仍然可以用autolayout来做，

255
00:10:49,215 --> 00:10:51,249
就像我们在最后一个演示中一样。

256
00:10:51,318 --> 00:10:53,585
我要拿起这件事了

257
00:10:53,653 --> 00:10:56,487
用蓝线表示我想要什么。

258
00:10:56,556 --> 00:10:58,023
我在中心想要这个。

259
00:10:59,192 --> 00:11:00,057
我抱着这个，所以

260
00:11:00,126 --> 00:11:01,759
蓝线在中心出现。

261
00:11:01,828 --> 00:11:06,731
当我放开时，iOS界面制作工具就知道“

262
00:11:06,800 --> 00:11:07,832
他希望在中心“。

263
00:11:07,900 --> 00:11:11,102
所以当我再次来到这个小家伙的时候

264
00:11:11,171 --> 00:11:13,371
我说重新建立约束，

265
00:11:13,440 --> 00:11:16,073
就像我在上一次演讲中所做的那样，

266
00:11:16,142 --> 00:11:18,175
它创造了把它放在中间的约束。

267
00:11:18,244 --> 00:11:20,945
我们可以验证，通过上这个检查员，

268
00:11:21,014 --> 00:11:23,281
这是尺寸检查员。

269
00:11:23,349 --> 00:11:24,548
它显示的东西的大小，但是

270
00:11:24,617 --> 00:11:27,919
它还显示了限制，autolayout约束。

271
00:11:27,987 --> 00:11:31,255
并且这被限制为水平对准其中心

272
00:11:31,324 --> 00:11:32,857
到父视图中心和

273
00:11:32,926 --> 00:11:36,126
它垂直于父视图中心。

274
00:11:36,195 --> 00:11:37,629
现在如果我们轮到，

275
00:11:37,697 --> 00:11:39,564
我们看到它停留在中心。

276
00:11:41,601 --> 00:11:43,234
我给你一点点自动播放，

277
00:11:43,302 --> 00:11:45,336
我会在自动布局上做一个全面的讲座

278
00:11:46,573 --> 00:11:47,439
在几个星期。

279
00:11:47,507 --> 00:11:48,973
但我只是想给你一点点提示

280
00:11:49,042 --> 00:11:50,508
关于它现在是如何工作的。

281
00:11:51,745 --> 00:11:53,845
好的，所以我们有这个，这是我们的UI，

282
00:11:53,914 --> 00:11:55,980
这就是我们要做的整个UI。

283
00:11:56,049 --> 00:11:59,116
现在让我们继续运行这个，

284
00:11:59,185 --> 00:12:01,920
在iPhone上简单地运行它

285
00:12:05,324 --> 00:12:08,025
只是为了确保我们实际把它放在我们的UI中。

286
00:12:08,094 --> 00:12:10,027
在那里果然如果我点击它，

287
00:12:10,096 --> 00:12:12,597
旋转，似乎工作正常。

288
00:12:12,665 --> 00:12:14,866
我们甚至可以查看，这是否在iPad上工作？

289
00:12:14,934 --> 00:12:17,769
现在就来试试吧。

290
00:12:22,775 --> 00:12:24,008
这就是我们的UI。

291
00:12:24,076 --> 00:12:28,346
这里工作很好，我们也可以在这里旋转

292
00:12:28,414 --> 00:12:31,215
获得这个巨大的横屏iPad。

293
00:12:31,284 --> 00:12:32,717
有什么办法去小吗？

294
00:12:32,786 --> 00:12:35,019
什么是最小的我们可以去规模？

295
00:12:35,088 --> 00:12:36,654
25％？

296
00:12:36,723 --> 00:12:39,157
我们走了，够小了。

297
00:12:39,225 --> 00:12:41,326
我们在iPad上看到了所有的屏幕。

298
00:12:41,394 --> 00:12:44,128
使用拆分视图来实现这些是非常好的

299
00:12:44,197 --> 00:12:47,131
左边的话和右边的匹配的脸。

300
00:12:47,200 --> 00:12:48,299
这就是我们要做的，

301
00:12:48,368 --> 00:12:50,935
我们将在这里回到我们的故事板

302
00:12:51,004 --> 00:12:52,503
使这一切发生。

303
00:12:52,572 --> 00:12:55,273
而且这样做，再一次只是一件拖累事情的事情

304
00:12:55,341 --> 00:12:57,642
我会在这里使我的规模真的很小，所以

305
00:12:57,710 --> 00:12:59,510
你可以看到这个，我们把它拖出来。

306
00:12:59,578 --> 00:13:01,879
但是在这里我们要拖出分割视图控制器

307
00:13:01,948 --> 00:13:04,916
我们想把这两个MVC放在一个MVC中

308
00:13:04,984 --> 00:13:06,851
它们作为其观点的一部分。

309
00:13:06,920 --> 00:13:08,553
所以当我把它拖出来，你实际上是

310
00:13:08,621 --> 00:13:11,022
会看到我不仅仅是一个分割的视图，

311
00:13:11,091 --> 00:13:15,760
我在这里得到一些其他的小型MVC。

312
00:13:15,829 --> 00:13:18,429
而我其实并不需要这些

313
00:13:18,498 --> 00:13:19,830
随之而来的MVC。

314
00:13:19,899 --> 00:13:21,232
试图让你的生活更轻松，但是

315
00:13:21,301 --> 00:13:23,267
我发现99％的时间，

316
00:13:23,336 --> 00:13:26,270
你不需要这些其他的东西。

317
00:13:26,338 --> 00:13:28,372
所以我只是去这里，选择那些并删除它们。

318
00:13:28,441 --> 00:13:29,674
所以我们来摆脱这个。

319
00:13:29,742 --> 00:13:31,642
哎呦！不是整个事情

320
00:13:31,711 --> 00:13:34,946
我们来摆脱这一个，

321
00:13:35,015 --> 00:13:39,517
对不起，那里，我们会摆脱这一个

322
00:13:39,586 --> 00:13:40,718
我们摆脱那个。

323
00:13:40,787 --> 00:13:43,454
我只剩下我的分割视图控制器，

324
00:13:43,523 --> 00:13:45,556
当然，我的两个MVC都在这里。

325
00:13:45,624 --> 00:13:48,926
让我们把这一点放在这边，

326
00:13:48,995 --> 00:13:51,095
向下滚动一下

327
00:13:51,164 --> 00:13:54,799
而现在我只想让这成为我split view 的master

328
00:13:54,868 --> 00:13:57,267
控制器，我想这是我的细节。

329
00:13:57,336 --> 00:13:58,002
哎，别的，

330
00:13:58,071 --> 00:14:00,038
这是master，这是细节(detail)。

331
00:14:01,340 --> 00:14:03,941
当应用程序启动时，我不希望它从这里开始，

332
00:14:04,010 --> 00:14:06,444
我想要从这里开始，不要忘记这一步。

333
00:14:06,513 --> 00:14:07,945
如果你想让应用程序来到这里

334
00:14:08,014 --> 00:14:11,248
然后用两个东西显示分割视图控制器。

335
00:14:11,317 --> 00:14:14,318
那么如何使这个master 和这个detail呢？

336
00:14:14,387 --> 00:14:16,287
我只是要控制和

337
00:14:16,355 --> 00:14:20,024
从分割视图控制器拖动到主机。

338
00:14:20,093 --> 00:14:22,360
然后在这里，

339
00:14:22,428 --> 00:14:24,561
只有这两个，master和detail。

340
00:14:24,630 --> 00:14:26,664
所以我要做那个master，

341
00:14:26,732 --> 00:14:29,233
它使得这个master连接在那里，

342
00:14:29,302 --> 00:14:32,136
这不是一个障碍，这是一种喜欢，

343
00:14:32,205 --> 00:14:34,238
有点像outlet连接，但是

344
00:14:34,307 --> 00:14:37,675
它是与那个master var的具体连接。

345
00:14:37,744 --> 00:14:39,244
这一个是detail。

346
00:14:40,613 --> 00:14:42,713
所以我已经把我的master和我的detail在这里。

347
00:14:42,781 --> 00:14:43,581
放大一点

348
00:14:45,318 --> 00:14:47,585
这真的是我需要做的，以使这两个屏幕上。

349
00:14:47,654 --> 00:14:50,021
所以让我们继续看看这里发生了什么。

350
00:14:55,028 --> 00:14:55,860
好的，所以我们走吧。

351
00:14:55,929 --> 00:14:58,262
果然，右边是脸。

352
00:14:58,331 --> 00:14:59,463
这是左边的这个东西。

353
00:14:59,532 --> 00:15:01,866
如果我点击这个，没有任何反应。

354
00:15:01,934 --> 00:15:02,934
脸不显示

355
00:15:03,002 --> 00:15:04,702
那么为什么没有发生什么呢？

356
00:15:04,770 --> 00:15:07,838
因为我们必须做一个步骤。

357
00:15:07,907 --> 00:15:10,307
如果我们想转到不同的MVC，

358
00:15:10,376 --> 00:15:12,977
我们必须走了。

359
00:15:13,046 --> 00:15:16,847
这些MVC中的每一个都必须拥有这个MVC。

360
00:15:16,916 --> 00:15:19,683
当它断开时，它会用新的替换MVC

361
00:15:19,752 --> 00:15:23,421
一个准备好展示这个动议的人。

362
00:15:24,824 --> 00:15:26,524
我们去做我们的故事

363
00:15:26,592 --> 00:15:28,092
当然，

364
00:15:28,160 --> 00:15:30,628
我们使用我们最喜欢的手势是Ctrl +拖动。

365
00:15:30,696 --> 00:15:33,764
所以如果我想做一个悲伤的故事，我只是要抱着

366
00:15:33,832 --> 00:15:38,436
按住Ctrl并将其拖到我想要的MVC中，

367
00:15:38,505 --> 00:15:41,038
当我按悲伤时，我想显示的MVC。

368
00:15:41,107 --> 00:15:41,705
所以我这样做

369
00:15:41,774 --> 00:15:44,241
现在，你注意到我有什么选择

370
00:15:44,310 --> 00:15:47,311
那样的演示，我想要什么样的故事。

371
00:15:47,380 --> 00:15:49,913
例如，Present As Popover将呈现

372
00:15:49,982 --> 00:15:52,683
我在一个小小的popover窗口中的事情

373
00:15:52,752 --> 00:15:54,819
其他的一切。

374
00:15:54,888 --> 00:15:57,087
目前Modally将接管整个屏幕

375
00:15:57,156 --> 00:15:59,023
显示新的MVC。

376
00:15:59,091 --> 00:16:00,791
然后有显示和显示细节。

377
00:16:00,860 --> 00:16:04,261
显示仅在您处于导航控制器时使用，

378
00:16:04,330 --> 00:16:06,831
他们把卡片滑到顶部的东西，

379
00:16:06,900 --> 00:16:09,466
像我给你看的设置示例。

380
00:16:09,535 --> 00:16:13,104
显示细节在分割视图设置或混合中使用

381
00:16:13,173 --> 00:16:15,973
设置，有时你是在分割视图，和

382
00:16:16,042 --> 00:16:17,174
有时你在导航视图中，

383
00:16:17,243 --> 00:16:19,109
这将是我们将要在这里的情况。

384
00:16:19,178 --> 00:16:21,879
显示细节意味着在详细的一面显示

385
00:16:21,947 --> 00:16:23,147
分割视图。

386
00:16:23,216 --> 00:16:24,882
我将在那里展示细节。

387
00:16:24,951 --> 00:16:27,051
我已经这样做了，你会看到它出现在这里。

388
00:16:27,119 --> 00:16:28,185
这是一个segue，

389
00:16:28,254 --> 00:16:29,620
看起来有点不同于这个东西，

390
00:16:29,689 --> 00:16:31,356
有一点不同的图标在那里。

391
00:16:31,424 --> 00:16:33,323
这是一个segue，你可以点击它，和

392
00:16:33,392 --> 00:16:35,392
其实你甚至可以检查它。

393
00:16:35,461 --> 00:16:37,194
事实上，你必须检查它，

394
00:16:37,263 --> 00:16:40,565
去属性检查员检查它，因为你是

395
00:16:40,633 --> 00:16:43,367
总是要给每个段落一个标识符。

396
00:16:43,436 --> 00:16:45,970
这只是一个唯一的字符串，在你的代码中

397
00:16:46,039 --> 00:16:47,738
能够参考以说，

398
00:16:47,807 --> 00:16:50,241
“我正在谈论这里的这个段落”。

399
00:16:50,310 --> 00:16:52,944
所以，我会把它称为我悲伤的故事。

400
00:16:54,380 --> 00:16:57,982
然后我会在这里做同样的事情来开心。

401
00:16:58,051 --> 00:17:00,350
我会在那一个展示细节。

402
00:17:00,419 --> 00:17:02,419
我要检查那个segue。

403
00:17:02,488 --> 00:17:03,421
看，有我们悲伤的一个。

404
00:17:03,489 --> 00:17:04,688
注意当你选择一个segue时，

405
00:17:04,757 --> 00:17:06,724
它显示了它从哪里消失。

406
00:17:06,793 --> 00:17:09,093
如果我选择这个，它显示它从另一个，

407
00:17:09,162 --> 00:17:10,160
所以我们知道它是哪一个。

408
00:17:10,229 --> 00:17:12,429
所以这是幸福的，而且

409
00:17:12,498 --> 00:17:15,933
那么我们会有一点担心。

410
00:17:16,002 --> 00:17:17,034
那是哪里

411
00:17:17,103 --> 00:17:19,704
就在那里，担心。

412
00:17:20,706 --> 00:17:21,538
好的，就这样

413
00:17:21,607 --> 00:17:24,242
所以我们创造了这些段落，把它们放在了，我们会把它们

414
00:17:24,310 --> 00:17:26,577
首先进入拆分视图，然后我们创建了segues。

415
00:17:26,646 --> 00:17:28,479
现在当你点击那些按钮，

416
00:17:28,548 --> 00:17:32,783
它将会分裂到这个细节，实际上是分裂的

417
00:17:32,852 --> 00:17:35,219
查看它替换了一个新的那个。

418
00:17:35,287 --> 00:17:37,554
请记住，segues总是创建一个新的，

419
00:17:37,623 --> 00:17:39,923
不要忘记，那个段落总是创造一个新的。

420
00:17:39,992 --> 00:17:40,792
容易忘记的东西

421
00:17:40,860 --> 00:17:42,660
特别是在分割视图中，它看起来像，

422
00:17:42,728 --> 00:17:44,661
“它只是改变了已经在那里的”。

423
00:17:44,730 --> 00:17:48,099
但不，其实只是完全取而代之

424
00:17:48,168 --> 00:17:50,134
细节就这样做了。

425
00:17:51,437 --> 00:17:54,271
如果我们运行它，它会看起来像

426
00:17:54,340 --> 00:17:55,540
它甚至没有起作用。

427
00:17:57,209 --> 00:17:58,409
即使我们把这些东西挂在一起，

428
00:17:58,477 --> 00:18:00,545
看起来它只是没有做任何事情，看着。

429
00:18:02,247 --> 00:18:04,681
好的，他也很伤心，快乐，担心，没有任何事情发生。

430
00:18:04,750 --> 00:18:06,417
这里绝对没有改变。

431
00:18:06,486 --> 00:18:09,553
现在，有趣的是它实际上是分离的

432
00:18:09,621 --> 00:18:11,455
它正在取代它。

433
00:18:11,524 --> 00:18:14,291
唯一的问题是，我们没有准备好这件事

434
00:18:14,360 --> 00:18:17,127
在展示之前展示正确的情感，所以

435
00:18:17,196 --> 00:18:19,030
它只是显示中性的情绪。

436
00:18:20,533 --> 00:18:22,432
它正在创建一个新的MVC，但它只是显示中立，

437
00:18:22,501 --> 00:18:25,303
因为它没有准备在屏幕上。

438
00:18:25,371 --> 00:18:28,038
我们必须回到情绪视图控制器这里，

439
00:18:28,107 --> 00:18:31,976
并做这个准备segue，并准备该目的地

440
00:18:32,045 --> 00:18:36,681
细节视图控制器来做我们想做的事情。

441
00:18:36,749 --> 00:18:38,549
让我们摆脱一些这里的意见，

442
00:18:38,618 --> 00:18:40,217
只是为了使我们的代码更清洁一点。

443
00:18:40,286 --> 00:18:41,551
并摆脱这一点，以及。

444
00:18:41,620 --> 00:18:43,053
其实我们甚至可以摆脱这一点。

445
00:18:43,122 --> 00:18:44,588
好的，这是我们准备的

446
00:18:44,657 --> 00:18:46,690
用这个额外的参数发送者(sender)，

447
00:18:46,759 --> 00:18:49,494
我也会谈一谈。

448
00:18:49,562 --> 00:18:51,195
那么当我们prepare for segue时我们该怎么办？

449
00:18:51,263 --> 00:18:54,164
通常有两个非常重要的信息

450
00:18:54,233 --> 00:18:56,533
当我们准备走到一个MVC时，我们需要。

451
00:18:56,602 --> 00:19:00,170
一个是我们需要知道哪个segue，这是标识符。

452
00:19:00,239 --> 00:19:02,739
另一个我们需要知道的是什么是新的MVC

453
00:19:02,808 --> 00:19:04,542
这个系统刚刚创建的

454
00:19:04,610 --> 00:19:06,810
我们应该准备好

455
00:19:06,879 --> 00:19:09,380
这两个东西都在这里

456
00:19:09,448 --> 00:19:12,349
这个例子在这里，这个UIStoryboardSegue，

457
00:19:12,417 --> 00:19:13,484
如果我们ALT点击它。

458
00:19:14,587 --> 00:19:15,319
不能得到它

459
00:19:15,388 --> 00:19:16,654
对不起，在这里我们去，在这个家伙。

460
00:19:16,722 --> 00:19:18,956
我们有故事板块，和

461
00:19:19,024 --> 00:19:20,457
如果你看看它的文档，

462
00:19:20,526 --> 00:19:22,659
你会看到它在那里没有很多。

463
00:19:22,728 --> 00:19:26,163
但重要的一点是目的地视图控制器，

464
00:19:26,232 --> 00:19:28,398
一个是segue的标识符。

465
00:19:28,467 --> 00:19:29,300
这也是源头，

466
00:19:29,368 --> 00:19:31,135
这将是情绪视图控制器。

467
00:19:32,738 --> 00:19:35,472
这只是得到的信息

468
00:19:35,541 --> 00:19:38,075
我们需要准备这件事。

469
00:19:38,144 --> 00:19:41,212
我们先来看看目的地视图控制器。

470
00:19:41,280 --> 00:19:45,382
我会说letViewViewController

471
00:19:45,451 --> 00:19:47,685
等于segue的目的地。

472
00:19:50,890 --> 00:19:51,956
所以我有那个视图控制器。

473
00:19:52,024 --> 00:19:54,625
现在这是一个类型的UI视图控制器，如果我alt-click

474
00:19:54,694 --> 00:19:57,061
那你会看到它是UI视图控制器的类型。

475
00:19:57,129 --> 00:19:59,797
这是因为segue是这个通用的UI stroyboard的东西，

476
00:19:59,866 --> 00:20:02,199
它不了解任何关于脸部视图控制器，

477
00:20:02,268 --> 00:20:04,268
EmotionViewController，这样的东西。

478
00:20:04,336 --> 00:20:06,670
所以，我们必须真正使用这个铸造

479
00:20:06,739 --> 00:20:08,305
机制与as。

480
00:20:08,374 --> 00:20:11,375
记住，在AnyObject中使用Any做的转换？

481
00:20:11,444 --> 00:20:12,209
我们要在这里做，

482
00:20:12,278 --> 00:20:15,045
因为这个destinationViewController

483
00:20:15,114 --> 00:20:17,214
更好地成为一个面部观看控制器，或者

484
00:20:17,283 --> 00:20:19,383
我不知道如何准备

485
00:20:19,451 --> 00:20:21,018
这是我唯一知道如何准备的事情，

486
00:20:21,086 --> 00:20:23,487
对我们这种情感，所以最好是这样。

487
00:20:23,555 --> 00:20:30,760
所以我要说，如果我可以让一个FaceViewController相等

488
00:20:30,829 --> 00:20:34,932
destinationViewController as和

489
00:20:35,001 --> 00:20:39,870
我有条件地在这里做一个FaceViewController。

490
00:20:39,938 --> 00:20:42,272
然后，我很好去。

491
00:20:42,341 --> 00:20:45,676
所以现在记住，这有点有条件地检查是否

492
00:20:45,744 --> 00:20:48,912
这可能是一个FaceViewController。

493
00:20:48,981 --> 00:20:52,015
如果不是，我的准备员什么都不做。

494
00:20:52,084 --> 00:20:53,784
它会让目的地视图控制器

495
00:20:53,853 --> 00:20:54,484
似乎没有准备，

496
00:20:54,553 --> 00:20:55,953
因为它不知道如何准备。

497
00:20:56,022 --> 00:20:58,989
Cuz我们只知道如何准备，（至少到目前为止）

498
00:20:59,058 --> 00:21:02,025
我们的应用程序），我们只知道如何准备一个FaceViewController。

499
00:21:02,094 --> 00:21:05,562
好的，其实有些人会说不要用，

500
00:21:05,631 --> 00:21:06,596
如果让，这里。

501
00:21:06,665 --> 00:21:09,666
只需使用感叹号，并使您的程序崩溃，如果

502
00:21:09,735 --> 00:21:12,336
你试图阻止你不期待的东西。

503
00:21:12,405 --> 00:21:15,172
再次，你会在调试时找到它

504
00:21:15,241 --> 00:21:16,974
在您发货之前。

505
00:21:17,043 --> 00:21:18,642
所以我可以看到这个论点。

506
00:21:18,711 --> 00:21:22,313
但是，如果我们不能这样做，我们将忽略它

507
00:21:22,381 --> 00:21:25,816
将该目的地转换为人脸视图控制器。

508
00:21:25,884 --> 00:21:29,353
好的，现在我们来看看标识符。

509
00:21:29,422 --> 00:21:31,655
标识符有一个有人可能拥有

510
00:21:31,724 --> 00:21:33,323
忘了把它放在故事板上。

511
00:21:33,392 --> 00:21:35,592
所以我要做一个如果让它。

512
00:21:35,661 --> 00:21:39,696
如果let identifier = segue.identifier。

513
00:21:39,765 --> 00:21:41,699
Cuz这个segue.identifier在这里，

514
00:21:41,767 --> 00:21:43,967
你可以看到是一个可选的字符串。

515
00:21:44,036 --> 00:21:46,336
所以在故事板中可能没有设置。

516
00:21:46,405 --> 00:21:49,540
所以我正在检查，以确保它实际上设置。

517
00:21:49,609 --> 00:21:52,309
现在我需要表情，面部表情，

518
00:21:52,378 --> 00:21:54,211
我会在这个空间放置，

519
00:21:54,280 --> 00:21:57,114
这是我要做实际准备的地方。

520
00:21:57,183 --> 00:22:00,617
我可以做一个小的switch，或者 if 那么，else，

521
00:22:00,686 --> 00:22:03,254
如果那么，否则这里在所有不同的段落：难过，

522
00:22:03,322 --> 00:22:04,621
快乐，担心

523
00:22:04,690 --> 00:22:07,825
但我想象的是，“我的应用程序可能有20或

524
00:22:07,893 --> 00:22:09,259
有一天有30种情绪“。

525
00:22:09,328 --> 00:22:11,328
因此，我想做点更多的事情

526
00:22:11,397 --> 00:22:14,498
可扩展，类似于我们用计算器大脑做的

527
00:22:14,566 --> 00:22:17,034
操作，这是我要创建一个私人的

528
00:22:17,103 --> 00:22:19,569
这里的小字典称为情感面孔。

529
00:22:19,638 --> 00:22:23,139
并且它将要一个字符串作为键，

530
00:22:23,208 --> 00:22:27,177
和面部表情面部表情，面部表情。

531
00:22:27,246 --> 00:22:28,846
哎呀，对不起，这应该是冒号

532
00:22:29,982 --> 00:22:32,750
FacialExpression作为值。

533
00:22:34,887 --> 00:22:39,656
我甚至会把价值观放在这里。

534
00:22:39,725 --> 00:22:41,191
所以这只是一个小字典。

535
00:22:41,260 --> 00:22:45,695
这个字符串将成为这里的标识符

536
00:22:45,764 --> 00:22:50,133
回来，我们的名字。

537
00:22:50,202 --> 00:22:53,436
而面部表情将会是面部表情

538
00:22:53,505 --> 00:22:55,306
我想在那里使用

539
00:22:55,374 --> 00:22:56,507
这里抱怨什么？

540
00:22:57,876 --> 00:22:59,577
Cuz我没有在那里。

541
00:22:59,645 --> 00:23:00,678
是的，我们在这里没有什么。

542
00:23:00,746 --> 00:23:02,145
所以让我们把一些东西放在这里。

543
00:23:02,214 --> 00:23:04,214
让我们难过

544
00:23:04,283 --> 00:23:06,083
什么是好悲伤的面部表情？

545
00:23:06,151 --> 00:23:07,050
好吧，我们来创建一个，

546
00:23:07,119 --> 00:23:12,423
眼睛可能是一种面部表情

547
00:23:12,492 --> 00:23:15,626
闭上眼睛，嘴里皱着眉头。

548
00:23:15,694 --> 00:23:18,628
这听起来很伤心。

549
00:23:18,697 --> 00:23:19,830
然后为了快乐，

550
00:23:19,899 --> 00:23:23,000
这可能是眼睛睁开的面部表情

551
00:23:23,068 --> 00:23:27,504
当然，我们会大笑一口。

552
00:23:27,573 --> 00:23:28,705
而我觉得担心，

553
00:23:28,774 --> 00:23:30,440
我看了几个面部表情。

554
00:23:30,509 --> 00:23:34,177
我想，担心，最好的事情就是这样

555
00:23:34,246 --> 00:23:40,984
眼睛睁开，口中有一点点笑笑。

556
00:23:41,053 --> 00:23:43,521
那张脸，由于某种原因给我看，有点担心。

557
00:23:45,091 --> 00:23:45,889
现在我有这张桌子，

558
00:23:45,958 --> 00:23:48,825
我可以随着时间的推移添加更多的东西。

559
00:23:48,894 --> 00:23:50,827
而我所要做的就是为此做一个新的变化

560
00:23:50,896 --> 00:23:54,298
标识符与此字符串匹配。

561
00:23:54,366 --> 00:23:57,734
现在，我可能有一个不在这里的标识符，

562
00:23:57,803 --> 00:24:02,139
所以我会说如果我能让我想要平等的表达

563
00:24:02,208 --> 00:24:06,143
我的情绪面在这里，标识符分。

564
00:24:06,212 --> 00:24:07,511
所以我在那里看。

565
00:24:07,580 --> 00:24:09,246
但是，我们知道，如果我们知道，可能会回来

566
00:24:09,315 --> 00:24:11,181
在字典中看起来不在，

567
00:24:11,249 --> 00:24:12,082
它会回来没有。

568
00:24:12,151 --> 00:24:13,150
所以那时候我们在做，如果让。

569
00:24:13,218 --> 00:24:15,952
顺便说一句，看这个我有，如果这样，

570
00:24:16,021 --> 00:24:17,588
如果这样，如果让这个。

571
00:24:17,656 --> 00:24:19,623
你可以想象有四五个，和

572
00:24:19,691 --> 00:24:20,924
你开始变得很深，

573
00:24:20,993 --> 00:24:22,560
代码真的很杂乱。

574
00:24:22,628 --> 00:24:24,028
你实际上可以用逗号来做这些。

575
00:24:24,096 --> 00:24:28,398
你可以放在这里，这个，然后一个逗号，

576
00:24:28,467 --> 00:24:31,768
然后这个，然后一个逗号。

577
00:24:31,837 --> 00:24:33,737
所以你可以把你想要的这些东西放在一起。

578
00:24:33,805 --> 00:24:36,907
而不只是让你，你知道，如果让逗号，让逗号，但是

579
00:24:36,976 --> 00:24:39,276
还有其他的表情，其他的东西。

580
00:24:39,344 --> 00:24:43,013
喜欢，它几乎像一个和服的表达。

581
00:24:43,082 --> 00:24:43,647
然后这样做

582
00:24:43,716 --> 00:24:45,716
我不需要所有这些花括号。

583
00:24:45,785 --> 00:24:49,520
我可以使用这个顶级的大括号。

584
00:24:50,589 --> 00:24:51,622
现在我有表情。

585
00:24:51,691 --> 00:24:53,023
这是我要做准备的地方。

586
00:24:53,091 --> 00:24:57,494
我会说FaceViewController，

587
00:24:57,563 --> 00:25:02,232
准备你的模型，

588
00:25:02,301 --> 00:25:06,703
表达式等于此表达式

589
00:25:06,772 --> 00:25:10,874
我刚刚看了那张桌子。

590
00:25:10,943 --> 00:25:12,576
所以这是实际的准备。

591
00:25:12,645 --> 00:25:15,245
那就是我准备这个新MVC的地方

592
00:25:15,313 --> 00:25:17,781
创建，这个全新的FaceViewController我只是

593
00:25:17,850 --> 00:25:18,882
创建与segue。

594
00:25:18,951 --> 00:25:20,317
我准备做它做的事情。

595
00:25:20,386 --> 00:25:21,251
所以让我们来看看是否有效。

596
00:25:21,320 --> 00:25:22,953
现在应该准备好面子了。

597
00:25:23,021 --> 00:25:26,357
当它创建时，我们应该看到一个脸。

598
00:25:26,425 --> 00:25:27,191
正确的脸

599
00:25:30,295 --> 00:25:30,995
好的，所以在这里。

600
00:25:31,063 --> 00:25:32,162
咱们试试吧。

601
00:25:32,230 --> 00:25:34,030
噢，快乐。

602
00:25:34,099 --> 00:25:37,967
好吧，看起来有点担心，悲伤。

603
00:25:38,036 --> 00:25:41,605
现在，我们来看看我们在iPhone上的幸福。

604
00:25:43,175 --> 00:25:45,876
因为我们知道在iPhone上，这很小。

605
00:25:45,945 --> 00:25:48,445
拆分视图，没有足够的空间分割视图。

606
00:25:48,514 --> 00:25:50,781
那么iPhone上的这个故事板会发生什么？

607
00:25:50,849 --> 00:25:51,815
让我们来尝试下

608
00:25:55,587 --> 00:25:57,854
好的，好了，我们走了，悲伤，快乐，担心。

609
00:25:57,923 --> 00:25:59,890
好的，我们来看看快乐。

610
00:25:59,959 --> 00:26:01,892
好的，我们很高兴

611
00:26:01,960 --> 00:26:03,460
那么现在我们不是这样

612
00:26:03,529 --> 00:26:06,496
开心，因为我们不能离开这里。

613
00:26:06,565 --> 00:26:08,131
我们得到了这个幸福的脸，但我无法回避。

614
00:26:08,200 --> 00:26:11,968
让我们尝试去，好吧，即使在风景，没有分裂视图，所以

615
00:26:12,037 --> 00:26:14,738
现在没有办法回头挑选任何其他表情。

616
00:26:14,807 --> 00:26:16,706
所以在iPhone中，你可以选择一个表达式

617
00:26:16,775 --> 00:26:18,308
你已经完成了，这是应用程序的结束。

618
00:26:18,377 --> 00:26:20,210
你现在必须退出应用程序，因为或

619
00:26:20,279 --> 00:26:21,544
把你的手机关掉，我猜。

620
00:26:21,613 --> 00:26:22,446
没有什么可以做的。

621
00:26:22,514 --> 00:26:23,647
你被卡住了我猜你可以做

622
00:26:23,715 --> 00:26:24,381
眼睛眨眼。

623
00:26:26,518 --> 00:26:27,851
所以这不是一个非常好的iPhone应用程序，显然。

624
00:26:27,852 --> 00:26:29,185
仅此而已

625
00:26:29,255 --> 00:26:30,620
那么，我们该怎么办？

626
00:26:30,689 --> 00:26:32,755
由于iPhone上没有Split View，

627
00:26:32,824 --> 00:26:35,892
（你实际上可以在iPhone上有一个拆分视图，

628
00:26:35,961 --> 00:26:38,628
但是你必须做一个特殊的事情才能实现它。

629
00:26:38,697 --> 00:26:41,064
但默认情况下，拆分视图不起作用。

630
00:26:41,133 --> 00:26:43,400
那么当然，苹果就明白了。

631
00:26:43,468 --> 00:26:46,470
拆分视图对于iPhone来说不是很好。

632
00:26:46,538 --> 00:26:48,205
顺便说一句，iPhone Plus是可行的，而且

633
00:26:48,274 --> 00:26:49,739
我会在一会儿给你看。

634
00:26:49,808 --> 00:26:51,207
他们知道这不是很好。

635
00:26:51,276 --> 00:26:53,943
所以如果你在这里回到你的故事板。

636
00:26:54,012 --> 00:26:55,211
我们要回到我们的故事板，

637
00:26:55,280 --> 00:26:58,415
我们来看看这个。

638
00:26:58,484 --> 00:27:00,750
我们会说，呃，在iPhone上，

639
00:27:00,819 --> 00:27:04,688
我真的希望这个UI成为导航控制器，

640
00:27:04,757 --> 00:27:05,722
不是分割视图。

641
00:27:05,790 --> 00:27:08,558
导航控制器，当我点击这种情绪

642
00:27:08,627 --> 00:27:10,593
它通过滑动它顶部选择了脸，但是

643
00:27:10,662 --> 00:27:11,895
我会有一个后退按钮

644
00:27:11,964 --> 00:27:13,430
我可以回去，选一个不同的。

645
00:27:13,499 --> 00:27:15,031
它会滑到顶部，我可以回击，

646
00:27:15,100 --> 00:27:17,233
你看我的意思，所以我可以来回走。

647
00:27:17,302 --> 00:27:18,768
你可以简单地做到这一点。

648
00:27:18,837 --> 00:27:20,937
你只是在这里选择这个视图控件

649
00:27:21,006 --> 00:27:22,139
去编辑。

650
00:27:22,208 --> 00:27:24,241
嵌入导航控制器。

651
00:27:24,310 --> 00:27:26,743
它将会插入导航控制器

652
00:27:26,812 --> 00:27:29,012
在那里，看到那里，

653
00:27:29,081 --> 00:27:31,281
我怎么把那个导航控制器放在那里

654
00:27:31,350 --> 00:27:34,351
而导航控制器你真的很酷

655
00:27:34,419 --> 00:27:37,087
实际上得到一个标题栏，你可以直走

656
00:27:37,156 --> 00:27:39,089
如果需要，请在界面构建器中

657
00:27:39,158 --> 00:27:41,191
把一个标题放在那里，像可能的情绪。

658
00:27:41,260 --> 00:27:43,027
我们可以叫它，这是我们的应用程序的名称

659
00:27:43,095 --> 00:27:44,928
这就是这个MVC的内容，所以呢

660
00:27:44,996 --> 00:27:47,497
我会在那里放一个小标题，那真的很棒。

661
00:27:47,566 --> 00:27:54,737
所以现在，当我们跑，我让我的脸上升中立

662
00:27:54,806 --> 00:27:58,975
模式，如果我回去，现在我可以选择快乐的东西。

663
00:27:59,044 --> 00:28:00,844
现在有一件你可能会感兴趣的就是，

664
00:28:00,913 --> 00:28:02,913
哇，它以中性模式出现。

665
00:28:02,982 --> 00:28:06,483
不用说这个页面，你可以预料到

666
00:28:06,552 --> 00:28:08,518
它在这个页面上出现，不是吗？

667
00:28:08,587 --> 00:28:10,019
而且我们实际上是额外的

668
00:28:10,088 --> 00:28:11,188
你去找出如何做到这一点。

669
00:28:12,357 --> 00:28:13,156
你需要什么

670
00:28:13,225 --> 00:28:15,258
做是拆分视图控制器的东西。

671
00:28:15,327 --> 00:28:17,928
这是代表，我不会谈论代表

672
00:28:17,997 --> 00:28:20,297
直到星期三，这就是为什么我们增加额外的信用。

673
00:28:20,366 --> 00:28:22,299
但是你会使用Split View的代理和

674
00:28:22,368 --> 00:28:24,201
阅读文档，您可以这样做

675
00:28:24,269 --> 00:28:25,669
它会在任一页上出现。

676
00:28:25,738 --> 00:28:28,872
在这个详细页面或这个母版页上。

677
00:28:28,940 --> 00:28:31,909
但是你可以看到，这是非常有效的，其实我们已经有了

678
00:28:31,977 --> 00:28:34,745
甚至在这里有这个漂亮的小标题栏，我们可以

679
00:28:34,813 --> 00:28:38,315
在我们想要的任何情感之间来回切换。

680
00:28:38,383 --> 00:28:41,184
我们来看看当我们做到iPad时发生了什么。

681
00:28:41,252 --> 00:28:43,187
我们打破了iPad吗？

682
00:28:43,255 --> 00:28:52,462
我们希望我们没有通过这样做来打破iPad。

683
00:28:52,531 --> 00:28:53,497
我们开始。

684
00:28:53,566 --> 00:28:54,431
它出来了

685
00:28:54,500 --> 00:28:55,532
有脸

686
00:28:55,601 --> 00:28:58,568
顺便说一下，您可以在纵向进行拆分视图。

687
00:28:58,637 --> 00:28:59,602
你刚刚滑出来

688
00:28:59,671 --> 00:29:02,539
你看，它像这样的小架子滑出来。

689
00:29:02,607 --> 00:29:05,875
或者您可以轮流查看并排。

690
00:29:05,944 --> 00:29:08,044
它还在工作。

691
00:29:08,113 --> 00:29:10,747
所以iPad正在工作。

692
00:29:10,816 --> 00:29:11,715
那么不幸的是，

693
00:29:11,783 --> 00:29:14,551
没有缩放级别是更好的缩放级别。

694
00:29:15,754 --> 00:29:17,887
但iPad在这里有一个称号。

695
00:29:17,956 --> 00:29:19,689
但是如果有的话，那真的很酷

696
00:29:19,758 --> 00:29:20,958
这里的标题也是。

697
00:29:21,026 --> 00:29:22,359
也许这会说，悲伤和

698
00:29:22,427 --> 00:29:24,194
如果我打高兴，会说，快乐在这里。

699
00:29:24,262 --> 00:29:25,228
那不是很酷吗？

700
00:29:25,297 --> 00:29:27,497
要有两旁的标题，那就是

701
00:29:27,566 --> 00:29:29,966
经常在我们想要的分裂视图中，因为你想要一种

702
00:29:30,035 --> 00:29:32,903
两者之间的平衡有双方的倾斜。

703
00:29:32,971 --> 00:29:37,374
所以没有问题，让我们回到我们的故事板，

704
00:29:37,443 --> 00:29:40,043
并选择此View Controller和

705
00:29:40,112 --> 00:29:43,446
将其嵌入导航控制器。

706
00:29:43,515 --> 00:29:46,983
事实上，如果我们去看看iPad。

707
00:29:47,052 --> 00:29:49,953
它在iPad上会是什么样子，特别是景观？

708
00:29:50,021 --> 00:29:50,754
我们会看到，

709
00:29:50,823 --> 00:29:54,090
哦，这看起来正是我们想要的。

710
00:29:54,159 --> 00:29:55,525
当它详细地，它有一个标题栏，标题栏在这里，

711
00:29:55,526 --> 00:29:56,892
看。看到，

712
00:29:56,961 --> 00:29:58,061
标题栏到处都是。

713
00:29:58,130 --> 00:29:59,596
太棒了，这会很棒。

714
00:29:59,665 --> 00:30:05,602
咱们开始吧！

715
00:30:05,671 --> 00:30:08,338
好的，看看，顶部的标题栏。

716
00:30:08,407 --> 00:30:13,777
而且哦，我们打破了。

717
00:30:14,813 --> 00:30:15,545
那里发生了什么？

718
00:30:15,613 --> 00:30:17,447
为什么我们打破这个

719
00:30:17,516 --> 00:30:19,816
那么这与准备工作有关。

720
00:30:19,884 --> 00:30:21,951
我上次在演讲中谈到这个。

721
00:30:22,020 --> 00:30:23,553
因为准备做的是，

722
00:30:23,622 --> 00:30:27,290
它在这里创建一个新的MVC，然后我们正在准备它。

723
00:30:27,359 --> 00:30:30,494
问题在于现在在这里创建一个新的MVC时，

724
00:30:30,562 --> 00:30:31,494
什么是MVC？

725
00:30:31,563 --> 00:30:32,695
它是什么样的MVC？

726
00:30:32,764 --> 00:30:34,364
任何人想冒险猜测？

727
00:30:34,433 --> 00:30:35,732
Cuz它不是一个面部控制器

728
00:30:35,801 --> 00:30:36,733
不，是什么？

729
00:30:38,170 --> 00:30:40,837
是的，它是一个UI导航控制器。

730
00:30:40,905 --> 00:30:42,305
这是我们正在创建的新MVC，

731
00:30:42,374 --> 00:30:43,806
它有一个faceView，但是

732
00:30:43,875 --> 00:30:45,942
它仍然是一个UI导航控制器。

733
00:30:46,010 --> 00:30:48,578
所以我们的代码，我们已经回到这里。

734
00:30:48,647 --> 00:30:49,980
这是做这个准备。

735
00:30:50,048 --> 00:30:52,916
它说，如果我可以让faceView

736
00:30:52,985 --> 00:30:55,552
作为FaceViewController等于目的地。

737
00:30:55,621 --> 00:30:57,354
嗯，我不能这样做，因为它不是。

738
00:30:57,423 --> 00:30:59,656
它是一个UI导航控制器。

739
00:30:59,725 --> 00:31:01,624
我会告诉你在调试这里。

740
00:31:01,693 --> 00:31:04,528
让我们继续吧，在这里设置一个断点

741
00:31:04,596 --> 00:31:07,431
回到这里，选一个，喜欢快乐。

742
00:31:07,499 --> 00:31:08,498
这里打破了

743
00:31:08,567 --> 00:31:10,833
如果我们看这个DestinationViewController，

744
00:31:10,902 --> 00:31:13,270
那些你来到调试周五部分的人。

745
00:31:13,339 --> 00:31:15,272
我们没有真正去过这个很酷的功能，但是

746
00:31:15,340 --> 00:31:16,706
如果你只是鼠标在一个变量上。

747
00:31:16,775 --> 00:31:17,540
你看我怎么样，

748
00:31:17,609 --> 00:31:20,043
我把鼠标放在DestinationViewController上

749
00:31:20,112 --> 00:31:21,378
你看到它在那里吗？

750
00:31:21,447 --> 00:31:23,479
那里有两个很酷的按钮。

751
00:31:23,548 --> 00:31:25,382
你看到这个看起来像我吗？

752
00:31:25,451 --> 00:31:28,385
而这个看起来像信我的信。

753
00:31:28,453 --> 00:31:31,287
如果你点击一个看起来像ai，它实际上

754
00:31:31,356 --> 00:31:34,191
在调试器中显示View Controller。

755
00:31:35,260 --> 00:31:36,893
哪个有点酷

756
00:31:36,962 --> 00:31:39,062
如果你去这里，点击另一个小i，

757
00:31:39,131 --> 00:31:42,265
它会显示你的class。

758
00:31:42,334 --> 00:31:45,434
在这种情况下，它是一个UI导航控制器。

759
00:31:45,503 --> 00:31:47,103
这适用于各种类型，

760
00:31:47,172 --> 00:31:48,871
颜色，甚至地图位置。

761
00:31:48,940 --> 00:31:51,140
它会显示一个地图上的位置在那里。

762
00:31:51,209 --> 00:31:53,910
所以这个鼠标的调试事情就是这样

763
00:31:53,978 --> 00:31:55,094
但无论如何，我们看到了DestinationViewController

764
00:31:55,095 --> 00:31:56,211
真酷

765
00:31:56,281 --> 00:31:58,114
右边有一个UI导航控制器。

766
00:31:58,183 --> 00:31:59,349
我们知道这不是很好。

767
00:31:59,417 --> 00:32:00,950
那么我们该怎么办呢？

768
00:32:01,019 --> 00:32:03,352
嗯，我会检查这个案子，好吗？

769
00:32:03,421 --> 00:32:07,390
我会说，如果我可以让navigationController相等

770
00:32:07,459 --> 00:32:11,995
destinationViewController作为UINavigationController，

771
00:32:12,063 --> 00:32:13,163
换一种说法，

772
00:32:13,231 --> 00:32:17,200
如果该目的地是UI导航控制器，那么

773
00:32:17,269 --> 00:32:21,137
我会抓住可见的ViewController从它和

774
00:32:21,206 --> 00:32:24,607
使用它作为FaceViewController希望。

775
00:32:24,676 --> 00:32:27,911
所以，我想在这种情况下说我想要

776
00:32:27,980 --> 00:32:31,347
destinationViewController，这是这里的东西，

777
00:32:31,416 --> 00:32:33,149
现在它需要一个var等等

778
00:32:33,218 --> 00:32:34,951
我会在这里改变它的价值。

779
00:32:35,020 --> 00:32:37,053
我会让这个平等的，

780
00:32:37,122 --> 00:32:41,591
navigationController的visibleViewController。

781
00:32:41,660 --> 00:32:43,359
好的，现在这很棒，

782
00:32:43,428 --> 00:32:46,062
visibleViewController是一个非常好的方法

783
00:32:46,131 --> 00:32:48,631
导航控制，它显示你无论哪一个

784
00:32:48,700 --> 00:32:51,234
卡堆栈目前是可见的，正是我想要的。

785
00:32:51,303 --> 00:32:53,703
然而，它的唯一问题是它的回报

786
00:32:53,772 --> 00:32:56,439
一个可选的，因为没有可见的东西

787
00:32:56,507 --> 00:32:58,074
导航控制器现在。

788
00:32:58,143 --> 00:32:59,876
好的，你可能从来没有任何东西

789
00:32:59,945 --> 00:33:01,645
在navigationController中。

790
00:33:01,713 --> 00:33:04,547
所以，因为那是一个可选的，我必须给它

791
00:33:04,616 --> 00:33:08,551
一些默认值和默认值，

792
00:33:08,620 --> 00:33:11,655
我只是说，只需使用destinationViewController

793
00:33:11,723 --> 00:33:14,056
如果我不能得到可见的ViewController或

794
00:33:14,125 --> 00:33:14,925
navigationController。

795
00:33:14,993 --> 00:33:18,862
所以使用它已经是一个默认值。

796
00:33:18,931 --> 00:33:20,663
基本上，不要改变它。

797
00:33:20,732 --> 00:33:24,234
所以这么小，如果是好的，因为现在我的代码工作，如果

798
00:33:24,302 --> 00:33:27,170
它在一个导航控制器，或者即使不是。

799
00:33:27,239 --> 00:33:29,438
因为如果它不在navigationController中，

800
00:33:29,507 --> 00:33:30,574
这一点什么都不做。

801
00:33:30,642 --> 00:33:31,540
这将会失败。

802
00:33:31,609 --> 00:33:33,476
好的，这是不行的。

803
00:33:33,545 --> 00:33:35,078
我们会直接去检查

804
00:33:35,147 --> 00:33:36,079
如果它是一个FaceViewControllor。

805
00:33:36,147 --> 00:33:40,817
所以如果我后来回到我这里的故事板

806
00:33:40,885 --> 00:33:42,385
呃，你知道什么，我真的不想在这里的标题。

807
00:33:42,386 --> 00:33:43,886
我决定，

808
00:33:43,956 --> 00:33:46,055
我把这个导航控制器拿出来

809
00:33:46,124 --> 00:33:48,891
的图片，我的代码仍然可以工作，我的代码工作

810
00:33:48,960 --> 00:33:51,093
我是否直接去FaceController或

811
00:33:51,162 --> 00:33:55,598
通过导航控制器。

812
00:33:55,667 --> 00:33:57,734
我们来看看这是否真的解决了我们的问题。

813
00:34:02,140 --> 00:34:03,305
我们来吧，我们来试一试。

814
00:34:03,374 --> 00:34:06,509
快乐，是的，担心，悲伤。

815
00:34:06,578 --> 00:34:08,611
快乐，我们很高兴它的工作。

816
00:34:08,680 --> 00:34:10,947
好的，现在我们在顶部有这个漂亮的标题栏

817
00:34:11,015 --> 00:34:12,515
我们说，如果我们可以放一个头衔，那不是很酷

818
00:34:12,584 --> 00:34:13,382
我们这样做

819
00:34:13,451 --> 00:34:14,184
我们在这里放一点头衔，

820
00:34:14,252 --> 00:34:18,187
其实我要放在这里的标题是任何一个按钮

821
00:34:18,256 --> 00:34:19,856
带来了这个MVC。

822
00:34:19,924 --> 00:34:21,224
所以如果悲伤的按钮带来了，

823
00:34:21,293 --> 00:34:23,259
我会得到它现在的头衔，把它放在这里，

824
00:34:23,328 --> 00:34:25,094
有点像我们在计算器上做的。

825
00:34:25,163 --> 00:34:29,733
回头看看，幸运的是准备好了，

826
00:34:29,801 --> 00:34:31,701
有发件人(sender)

827
00:34:31,770 --> 00:34:34,771
这是导致segue发生的事情。

828
00:34:34,840 --> 00:34:37,239
哪一个将是其中一个按钮。

829
00:34:37,308 --> 00:34:41,043
所以就在这里，我可以得到这个的当前标题

830
00:34:41,112 --> 00:34:43,379
发件人在这里并设置为标题。

831
00:34:43,448 --> 00:34:46,248
现在如果你还记得从讲座上讲

832
00:34:46,317 --> 00:34:48,818
导航控制器，你的方式

833
00:34:48,887 --> 00:34:52,055
设置它在导航控件中时出现的东西

834
00:34:52,124 --> 00:34:53,823
喜欢标题，你也可以设置按钮，

835
00:34:53,891 --> 00:34:55,492
你可以设置的后退按钮标题，

836
00:34:55,561 --> 00:34:58,094
或者甚至可以将写入按钮放在顶部。

837
00:34:58,163 --> 00:35:00,597
你这样做就叫做NavigationItem

838
00:35:00,666 --> 00:35:01,297
UIViewController中。

839
00:35:01,366 --> 00:35:03,266
所以我要拿faceViewController的

840
00:35:03,335 --> 00:35:06,836
navigationItem，其中，通过navigationItem的方式，

841
00:35:06,905 --> 00:35:08,471
你可以把它当作一种想法

842
00:35:08,540 --> 00:35:12,142
只有UINavigationController使用的一袋好东西。

843
00:35:12,211 --> 00:35:13,777
而且它只是看着那袋好吃的东西

844
00:35:13,845 --> 00:35:16,079
当这个ViewController，faceViewController，

845
00:35:16,148 --> 00:35:18,548
是NavigationController中可见的ViewController。

846
00:35:18,616 --> 00:35:20,683
然后它看起来在这袋好东西，你可以看到

847
00:35:20,752 --> 00:35:22,084
有很多东西在袋子里的好东西，

848
00:35:22,153 --> 00:35:25,554
像leftBarButtonItem，rightBarButtonItems和

849
00:35:25,623 --> 00:35:27,190
当然是标题。

850
00:35:27,258 --> 00:35:28,091
这是我想在这里设置的。

851
00:35:28,159 --> 00:35:31,127
我想设置navigationController的标题

852
00:35:31,196 --> 00:35:32,762
当这件事是可见的

853
00:35:32,830 --> 00:35:33,496
我会发送，

854
00:35:33,565 --> 00:35:36,733
我想把它发送给发件人的当前标题，但是

855
00:35:36,801 --> 00:35:38,135
我不会这样做

856
00:35:39,204 --> 00:35:40,069
为什么我不能这样做？

857
00:35:40,138 --> 00:35:41,138
为什么不会工作？

858
00:35:44,676 --> 00:35:45,242
这个。

859
00:35:46,344 --> 00:35:46,943
看到任何问题？

860
00:35:47,012 --> 00:35:50,680
是的，这是任何。

861
00:35:50,749 --> 00:35:53,650
任何人都不明白任何消息。

862
00:35:53,718 --> 00:35:55,485
因为它不知道是什么。

863
00:35:55,554 --> 00:35:59,388
所以我们必须把它放到一个UI按钮里。

864
00:35:59,457 --> 00:36:06,296
我们这样做就是把这个发送者称为UIButton。

865
00:36:06,365 --> 00:36:08,164
现在我们几乎可以发送当前标题。

866
00:36:08,233 --> 00:36:09,799
唯一的问题是这个。

867
00:36:09,867 --> 00:36:11,100
这是什么类型的，

868
00:36:11,169 --> 00:36:15,372
这个表达式是什么类型的，如果我可以选择它？

869
00:36:15,440 --> 00:36:16,239
它的类型是什么？

870
00:36:21,146 --> 00:36:22,512
没有人想猜这个？

871
00:36:24,583 --> 00:36:25,982
没有人？

872
00:36:26,051 --> 00:36:27,917
这是可选的，对吗？

873
00:36:27,986 --> 00:36:31,821
因为“as？”返回一个可选项，所以这是

874
00:36:31,889 --> 00:36:34,557
一个可选的，所以我们不能发送一个可选的当前标题。

875
00:36:34,626 --> 00:36:37,394
我们需要感叹号或

876
00:36:37,462 --> 00:36:40,663
有点安全，我们可以选择链接它。

877
00:36:40,731 --> 00:36:43,532
因为我们知道可选链接只是去了

878
00:36:43,601 --> 00:36:46,336
如果发生这种情况，忽略这个表达式的其余部分

879
00:36:46,404 --> 00:36:47,236
不是一个按钮。

880
00:36:47,305 --> 00:36:48,638
而这返回零，

881
00:36:48,707 --> 00:36:51,775
因为这不能变成一个按钮。

882
00:36:51,843 --> 00:36:54,944
所以我们只是可选链，在这种情况下，这里的标题

883
00:36:55,012 --> 00:36:57,981
将被设置为零，因为这整个事情将为零

884
00:36:58,050 --> 00:37:00,483
如果这个可选链接不会发生。

885
00:37:00,551 --> 00:37:01,284
没关系，

886
00:37:01,352 --> 00:37:03,920
因为我们看一个导航项的标题。

887
00:37:03,989 --> 00:37:04,988
这是一个可选项。

888
00:37:05,057 --> 00:37:06,322
所以我们可以把它发送到零。

889
00:37:06,391 --> 00:37:09,859
那么这样的话，那里就没有标题了。

890
00:37:09,928 --> 00:37:11,394
我有意把这件事放在这里

891
00:37:11,463 --> 00:37:13,229
很多事情都在这里。

892
00:37:13,298 --> 00:37:15,431
我们有任何演员。

893
00:37:15,500 --> 00:37:17,533
我们有可选的链接在这里。

894
00:37:17,602 --> 00:37:19,068
我们使用导航项。

895
00:37:19,137 --> 00:37:20,570
所以这行代码中有很多。

896
00:37:20,639 --> 00:37:22,138
所以确保你明白什么是

897
00:37:22,207 --> 00:37:23,406
所有的片断都在那里。

898
00:37:25,577 --> 00:37:28,177
现在我们应该得到希望的标题

899
00:37:28,246 --> 00:37:31,647
该按钮显示为右侧的标题。

900
00:37:31,716 --> 00:37:33,782
太开心了，肯定有快乐。

901
00:37:33,851 --> 00:37:35,051
担心，担心。

902
00:37:35,120 --> 00:37:36,819
悲伤，快乐

903
00:37:36,888 --> 00:37:38,855
当然，如果我们旋转，

904
00:37:38,924 --> 00:37:40,156
我们还在那里得到标题。

905
00:37:40,225 --> 00:37:42,191
我们可以把这件事滑出来挑选伤心，

906
00:37:42,260 --> 00:37:44,594
它发生在那里。

907
00:37:44,663 --> 00:37:46,496
如果我们想要的话，把东西滑出去。

908
00:37:46,565 --> 00:37:47,496
转回。

909
00:37:47,565 --> 00:37:49,165
iPhone 7怎么样？

910
00:37:49,234 --> 00:37:54,971
我们来看看我们有没有

911
00:37:55,040 --> 00:37:59,408
破了

912
00:37:59,477 --> 00:38:02,378
看起来这个拆分视图的细节首先出现

913
00:38:02,446 --> 00:38:03,812
在这种中立模式。

914
00:38:03,881 --> 00:38:05,214
我们会回到情绪。

915
00:38:05,283 --> 00:38:06,216
挑快乐

916
00:38:06,284 --> 00:38:09,151
果然，这里的标题也很好。

917
00:38:09,220 --> 00:38:10,386
如果我们去这里

918
00:38:10,455 --> 00:38:12,155
既然是iPhone，不能做分割视图，

919
00:38:12,224 --> 00:38:16,659
它在导航控制器模式下仍然工作正常。

920
00:38:16,728 --> 00:38:19,929
我们来看看一个7 Plus。

921
00:38:19,998 --> 00:38:22,765
有一个7加，是一种高品种

922
00:38:22,834 --> 00:38:25,568
在iPhone 7和iPad之间。

923
00:38:25,636 --> 00:38:27,003
而在竖屏模式下，

924
00:38:27,072 --> 00:38:29,839
iPhone 7 plus的作品就像一个iPhone一样。

925
00:38:29,908 --> 00:38:30,406
所以它会成为

926
00:38:30,475 --> 00:38:31,707
导航控制器来回。

927
00:38:31,776 --> 00:38:35,111
但在景观中，它将像iPad一样工作。

928
00:38:35,180 --> 00:38:38,614
好的，所以显然iPhone 7 plus在竖屏模式，

929
00:38:38,683 --> 00:38:42,184
做一个像iPad这样的滑出来的东西还不够大

930
00:38:42,253 --> 00:38:45,621
在纵向模式下，但在横向模式下，是这样的

931
00:38:45,690 --> 00:38:48,758
让我们来做这件事情。

932
00:38:48,827 --> 00:38:50,527
这足够适合。

933
00:38:52,497 --> 00:38:53,662
我会在这里小

934
00:38:53,731 --> 00:38:55,398
好的，所以这是一个加号。

935
00:38:55,466 --> 00:38:57,266
你可以看到它以竖屏模式出现。

936
00:38:57,335 --> 00:38:59,536
它的表现就像是iPhone。

937
00:39:00,471 --> 00:39:01,471
看，好吗？

938
00:39:01,539 --> 00:39:02,371
只是这样做

939
00:39:02,440 --> 00:39:05,341
但看看如果我去景观模式会发生什么，

940
00:39:05,410 --> 00:39:06,209
我得到一个拆分视图。

941
00:39:07,445 --> 00:39:08,078
他的工作很好

942
00:39:10,014 --> 00:39:15,518
所以看看我们如何在故事板中建立这个混合的UI和

943
00:39:15,587 --> 00:39:18,154
它适用于所有不同类型的设备。

944
00:39:18,223 --> 00:39:19,856
不管他们是否与你或者他们一起控制

945
00:39:19,924 --> 00:39:21,290
不会默认返回使用

946
00:39:21,359 --> 00:39:22,859
navigationController，无论如何。

947
00:39:22,927 --> 00:39:24,594
而我们在代码中唯一要做的就是

948
00:39:24,663 --> 00:39:27,029
作为跨平台的让步是检查

949
00:39:27,098 --> 00:39:28,864
那个navigationController和只为

950
00:39:28,933 --> 00:39:30,367
我们正在走走的事情。

951
00:39:35,139 --> 00:39:36,239
回到幻灯片。

952
00:39:42,280 --> 00:39:45,915
我们的下一个主题是View Controller生命周期。

953
00:39:45,983 --> 00:39:48,351
现在，一切都有一个生命周期，

954
00:39:48,419 --> 00:39:51,987
即使我们有一个生命周期：我们出生，我们过着生命，

955
00:39:52,056 --> 00:39:53,289
事情发生了，我们死了。

956
00:39:53,358 --> 00:39:55,224
那么这也是一个视图控制器。

957
00:39:55,293 --> 00:39:58,093
它刚刚出生，事情发生了，然后它死了，

958
00:39:58,162 --> 00:39:58,995
它离开堆。

959
00:39:59,063 --> 00:40:01,230
这就是死亡发生的情况。

960
00:40:01,299 --> 00:40:03,533
为什么我们关心视图控制器的生命周期？

961
00:40:03,602 --> 00:40:07,637
因为我们经常想做各种各样的事情

962
00:40:07,705 --> 00:40:10,373
拐点在其一生中。

963
00:40:10,442 --> 00:40:12,175
生命周期的开始真的很简单。

964
00:40:12,243 --> 00:40:15,678
它被初始化，99.99％

965
00:40:15,747 --> 00:40:19,815
视图控制器从故事板出来的时间。

966
00:40:19,884 --> 00:40:23,086
它的初始化器是这个特殊的初始化器出来

967
00:40:23,154 --> 00:40:24,387
的故事板。

968
00:40:24,456 --> 00:40:25,621
在阅读作业中，

969
00:40:25,690 --> 00:40:27,156
我实际上解释了如何运作。

970
00:40:27,224 --> 00:40:31,226
但是我们通常不会覆盖视图的初始化程序

971
00:40:31,295 --> 00:40:32,695
我们将使用我们知道的其他方式来初始化

972
00:40:32,696 --> 00:40:34,096
控制器。

973
00:40:34,165 --> 00:40:35,198
每个变量。

974
00:40:36,734 --> 00:40:38,401
我甚至不会谈论如何在代码中做一个。

975
00:40:38,470 --> 00:40:40,236
因为我们只是不要这样做

976
00:40:40,305 --> 00:40:41,471
你可以明白为什么吧？

977
00:40:41,540 --> 00:40:43,773
因为视图控制器很复杂

978
00:40:43,842 --> 00:40:45,441
它有所有的UI，按钮和所有的东西。

979
00:40:45,509 --> 00:40:49,912
你通常不会在代码中做这个。

980
00:40:49,981 --> 00:40:51,648
创建后会发生什么？

981
00:40:51,716 --> 00:40:54,750
接下来的事情是如果它被转移到，

982
00:40:54,819 --> 00:40:55,819
它准备好了

983
00:40:57,488 --> 00:40:59,188
就像我们准备好FaceView Controller一样

984
00:40:59,257 --> 00:40:59,956
将其设置为模型。

985
00:41:00,025 --> 00:41:01,490
那是下一件事情

986
00:41:01,559 --> 00:41:03,426
初始化。

987
00:41:03,495 --> 00:41:06,329
接下来的事情就是它的出口设置。

988
00:41:06,397 --> 00:41:07,196
所以，对于FaceView，

989
00:41:07,264 --> 00:41:10,366
它的FaceView outlet准备好了。

990
00:41:11,636 --> 00:41:13,670
然后，它出现并在屏幕上消失。

991
00:41:15,373 --> 00:41:18,541
在我们的例子中，master

992
00:41:18,610 --> 00:41:21,343
在屏幕上不断出现和消失。

993
00:41:21,412 --> 00:41:23,979
每一次，在iPhone上，例如，我们打了快乐或

994
00:41:24,048 --> 00:41:25,481
难过，它会消失。

995
00:41:25,550 --> 00:41:27,149
面孔会来的。

996
00:41:27,218 --> 00:41:30,252
然后，我们会回来，它会重新出现。

997
00:41:30,321 --> 00:41:32,922
顺便说一下，当这种情况发生的时候，脸上没有消失。

998
00:41:32,991 --> 00:41:33,723
那么它消失了

999
00:41:33,791 --> 00:41:35,425
它也被抛出了堆。

1000
00:41:35,494 --> 00:41:37,526
因为我们重用了我们所传达的东西。

1001
00:41:37,595 --> 00:41:39,662
但是那位高手，我们并没有走过。

1002
00:41:39,731 --> 00:41:42,632
它一直坐在那里作为分裂视图的master。

1003
00:41:42,701 --> 00:41:44,533
但它在屏幕上出现和消失。

1004
00:41:44,602 --> 00:41:47,169
所以这是一个很大的事情发生在它的生命周期。

1005
00:41:47,238 --> 00:41:48,237
另一件事情发生

1006
00:41:48,306 --> 00:41:51,407
在它的一生中，它正在改变其方向。

1007
00:41:51,476 --> 00:41:53,342
我们转到横屏。

1008
00:41:53,411 --> 00:41:54,210
我们在iPad上

1009
00:41:54,279 --> 00:41:58,013
我们将其作为托盘以纵向模式滑出

1010
00:41:58,082 --> 00:42:00,082
然后我们旋转到竖屏，它坐在一边。

1011
00:42:00,151 --> 00:42:02,785
所以它改变了它的形状。

1012
00:42:02,854 --> 00:42:05,187
即使是iPad的脸型，当我们在竖屏，

1013
00:42:05,256 --> 00:42:06,623
它大，高，大。

1014
00:42:06,691 --> 00:42:08,391
但是，随着我们转向横屏，它更是如此

1015
00:42:08,460 --> 00:42:10,592
像一个广场，还有一点点。

1016
00:42:10,661 --> 00:42:12,628
所以它总是在改变几何。

1017
00:42:12,697 --> 00:42:15,831
然后它可能处于低记忆状态以及哪里

1018
00:42:15,900 --> 00:42:16,899
我们需要恢复一些记忆，

1019
00:42:16,968 --> 00:42:19,368
这几乎从来没有发生过，但我必须提及。

1020
00:42:19,437 --> 00:42:21,404
这真的可能甚至不是视图控制器的一部分

1021
00:42:21,472 --> 00:42:24,273
生命周期，但它是一个讨论它的好地方，

1022
00:42:24,342 --> 00:42:25,608
这不是真的那么重要。

1023
00:42:26,844 --> 00:42:31,714
我们来谈谈这些消息

1024
00:42:31,782 --> 00:42:34,383
被发送到在视图控制器中调用方法

1025
00:42:34,452 --> 00:42:37,086
当这些各种事情发生时。

1026
00:42:37,154 --> 00:42:40,623
所以你已经知道你的网点被设置了。

1027
00:42:40,692 --> 00:42:42,625
你可以用你的确定来观看，

1028
00:42:42,694 --> 00:42:43,959
属性监听，确定了。

1029
00:42:44,028 --> 00:42:45,594
你已经知道准备，

1030
00:42:45,663 --> 00:42:46,996
我刚刚向你展示了这一点。

1031
00:42:47,064 --> 00:42:49,164
所以在这两个步骤完成之后，

1032
00:42:49,233 --> 00:42:51,834
你会得到这个消息，viewDidLoad。

1033
00:42:51,903 --> 00:42:53,936
超重要的方法

1034
00:42:54,005 --> 00:42:57,106
你一生中只会收到一次

1035
00:42:57,175 --> 00:42:58,007
的一个viewController。

1036
00:42:59,277 --> 00:43:01,878
这真的是你要放的地方

1037
00:43:01,946 --> 00:43:04,780
几乎所有的初始化。

1038
00:43:04,849 --> 00:43:07,950
例如，很多时候这里你会称之为你的

1039
00:43:08,019 --> 00:43:11,554
更新UI方法，从您的UI更新UI

1040
00:43:11,622 --> 00:43:16,025
模型，很多时候你会在viewDidLoad中调用它。

1041
00:43:16,093 --> 00:43:18,728
Cuz现在你的模型是因为准备好了

1042
00:43:18,796 --> 00:43:21,330
可能，你的网点是设置的，因为这是怎么回事

1043
00:43:21,399 --> 00:43:23,299
总是出现在outlet设置之后。

1044
00:43:23,368 --> 00:43:25,534
现在，有一件事不在这里呢。

1045
00:43:25,603 --> 00:43:27,136
非常小心，仔细听。

1046
00:43:27,205 --> 00:43:29,805
在viewDidLoad中不要做基于几何的东西。

1047
00:43:29,874 --> 00:43:31,173
因为当viewDidLoad发生时，

1048
00:43:31,242 --> 00:43:34,711
你还没有建立你的最终几何。

1049
00:43:36,681 --> 00:43:38,814
你不太了解你是否是竖屏，横屏，

1050
00:43:38,883 --> 00:43:40,649
你还有什么设备，你还不知道。

1051
00:43:40,718 --> 00:43:44,353
所以不要在viewDidLoad中用你的边界做事情。

1052
00:43:44,421 --> 00:43:47,890
你们中有许多人会犯这样的错误，让这些耳朵变得厉害。

1053
00:43:47,958 --> 00:43:48,924
不要那样做。

1054
00:43:48,993 --> 00:43:50,759
我会在新的控制器中显示其他方法

1055
00:43:50,828 --> 00:43:54,663
这样做的生命周期，但不在viewDidLoad中。

1056
00:43:54,732 --> 00:43:57,199
接下来我对你说的话，出现和消失。

1057
00:43:57,268 --> 00:43:59,902
你总是在屏幕上出现和消失。

1058
00:43:59,971 --> 00:44:02,071
当你出现的时候，你会收到两条消息。

1059
00:44:02,140 --> 00:44:04,306
第一个是viewWillAppear。

1060
00:44:04,375 --> 00:44:08,410
而这是在你实际上在屏幕之前发送给你的，但是

1061
00:44:08,479 --> 00:44:10,613
很快就会成为，

1062
00:44:10,682 --> 00:44:13,315
保证你即将在屏幕上。

1063
00:44:13,384 --> 00:44:15,951
那么，ViewWillAppear是什么？

1064
00:44:16,020 --> 00:44:17,653
你会在视图中做什么？

1065
00:44:17,722 --> 00:44:21,023
那么一件事就是如果有什么变化的话

1066
00:44:21,092 --> 00:44:22,891
当你不在屏幕上时，

1067
00:44:22,960 --> 00:44:25,060
也许你的模型是网络数据库

1068
00:44:25,129 --> 00:44:27,496
有些东西在屏幕上改变了。

1069
00:44:27,565 --> 00:44:30,332
然后，当出现视图出现时，您将通常更新

1070
00:44:30,401 --> 00:44:31,901
您的模型中的UI。

1071
00:44:31,969 --> 00:44:34,537
所以也许你不会在viewDidLoad中更新UI，

1072
00:44:34,605 --> 00:44:36,539
你可以在这里做。

1073
00:44:36,607 --> 00:44:38,540
那就是当它不在屏幕上时可以改变。

1074
00:44:38,609 --> 00:44:39,475
很多MVC，

1075
00:44:39,543 --> 00:44:41,743
所以他们的模型只有在屏幕上才会改变

1076
00:44:41,812 --> 00:44:43,312
你不必在这里做任何事情。

1077
00:44:43,380 --> 00:44:45,181
但是如果您的型号可以从您下面更改

1078
00:44:45,250 --> 00:44:47,316
当你离开屏幕时，那么当你重新出现时，

1079
00:44:47,384 --> 00:44:49,685
显然你想显示你的模型的当前状态。

1080
00:44:49,753 --> 00:44:50,920
很好

1081
00:44:50,988 --> 00:44:52,821
另外你可以在viewWillAppear中做

1082
00:44:52,890 --> 00:44:54,557
开始昂贵的东西

1083
00:44:54,625 --> 00:44:58,060
因为在viewDidLoad你不能保证你是

1084
00:44:58,129 --> 00:44:59,628
永远会来屏幕

1085
00:44:59,697 --> 00:45:02,264
有MVC偶尔加载，

1086
00:45:02,333 --> 00:45:04,500
但是用户点击了别的地方

1087
00:45:04,569 --> 00:45:05,868
你永远不会在屏幕上显示。

1088
00:45:05,937 --> 00:45:07,102
但是如果viewWillAppear发生，

1089
00:45:07,171 --> 00:45:08,404
你知道你正在屏幕上

1090
00:45:08,473 --> 00:45:11,073
所以在这里你可以启动一些昂贵的东西。

1091
00:45:11,142 --> 00:45:12,608
特别是开始一个线程

1092
00:45:12,677 --> 00:45:14,309
在背景中做一些昂贵的事情。

1093
00:45:14,378 --> 00:45:16,745
我们将在下周讨论多线程

1094
00:45:16,814 --> 00:45:19,314
你会看到任何需要任何时间的东西

1095
00:45:19,383 --> 00:45:21,584
或处理器或网络部分的能量，

1096
00:45:21,652 --> 00:45:23,619
你要做一个单独的线程。

1097
00:45:23,688 --> 00:45:26,455
所以你可以在viewWillAppear中启动这样一个线程。

1098
00:45:26,524 --> 00:45:28,323
还有一种方法，

1099
00:45:28,392 --> 00:45:31,727
viewDidAppear完全在屏幕上进入。

1100
00:45:31,795 --> 00:45:34,596
在屏幕上让你看到的动画在屏幕上

1101
00:45:34,665 --> 00:45:35,598
你在那儿。

1102
00:45:35,667 --> 00:45:37,899
你会在这里做什么？

1103
00:45:37,968 --> 00:45:39,668
这里通常不会很多。

1104
00:45:39,737 --> 00:45:42,438
你可以开始一个动画。

1105
00:45:42,506 --> 00:45:45,374
你有一些MVC有一些动画。

1106
00:45:45,443 --> 00:45:47,677
在它之前启动它没有任何意义

1107
00:45:47,745 --> 00:45:48,578
所以一旦它在屏幕上，那么你开始它。

1108
00:45:48,579 --> 00:45:49,412
在屏幕上

1109
00:45:50,782 --> 00:45:52,214
ViewWillAppear和viewDidAppear就这样发生

1110
00:45:52,283 --> 00:45:55,117
靠近在一起，可能不会节省太多等待

1111
00:45:55,186 --> 00:45:56,752
直到viewDidAppear开始动画，

1112
00:45:56,821 --> 00:45:58,354
但是呃，很多人会这样做，

1113
00:45:58,422 --> 00:46:01,356
只是为了清晰的编程。

1114
00:46:01,425 --> 00:46:01,924
然后，当然，

1115
00:46:01,993 --> 00:46:04,060
你可以消失，得到同样的东西在那里，

1116
00:46:04,128 --> 00:46:06,495
viewWillDisappear和viewDidDisappear。

1117
00:46:06,564 --> 00:46:09,999
您在所有这些视图控制器中注意到一件事

1118
00:46:10,068 --> 00:46:12,701
生命周期是我调用super。

1119
00:46:12,770 --> 00:46:13,402
你看到了吗

1120
00:46:13,471 --> 00:46:16,405
super.viewWillDisappear，我做到了

1121
00:46:16,474 --> 00:46:20,509
superViewDidLoad和superViewWillAppear。

1122
00:46:20,578 --> 00:46:23,312
所有这些，所有的视图控制器生命周期的方法，

1123
00:46:23,381 --> 00:46:25,681
总是叫super。

1124
00:46:25,750 --> 00:46:28,083
你总是想让你的父类去做。

1125
00:46:28,152 --> 00:46:30,253
你会在演示中看到你为什么这样做。

1126
00:46:31,655 --> 00:46:32,254
总是这样做

1127
00:46:32,322 --> 00:46:33,589
总是做super

1128
00:46:35,025 --> 00:46:38,060
所以在viewWillDisappear，很多次你在这里

1129
00:46:38,128 --> 00:46:40,663
撤消在viewDidAppear中执行的操作。

1130
00:46:40,732 --> 00:46:42,030
喜欢，如果你有一个动画，

1131
00:46:42,099 --> 00:46:43,065
你会在这里停下来

1132
00:46:43,133 --> 00:46:44,400
因为你即将消失。

1133
00:46:46,070 --> 00:46:48,870
在这里你也可以开始一些清理。

1134
00:46:48,939 --> 00:46:50,138
你的MVC消失了，

1135
00:46:50,207 --> 00:46:52,641
所以，如果你分配了一些资源或东西

1136
00:46:52,710 --> 00:46:55,344
你不需要，网络连接打开或什么。

1137
00:46:55,413 --> 00:46:58,080
当您的MVC开启时，这只能是开放的，

1138
00:46:58,149 --> 00:47:00,749
那么这里是一个很好的地方，你可以关闭它，

1139
00:47:00,818 --> 00:47:03,052
并且还有一个版本的这个。

1140
00:47:04,388 --> 00:47:06,555
人们很多时候看着viewDidAppear和

1141
00:47:06,623 --> 00:47:09,691
viewWillDisappear作为匹配，你知道，一个撤消

1142
00:47:09,760 --> 00:47:12,295
另一个，然后与viewWillAppear相同的事情

1143
00:47:12,363 --> 00:47:15,498
viewDidDisappear，那些将会相互撤销。

1144
00:47:17,134 --> 00:47:20,736
到目前为止，我还没有谈论几何。

1145
00:47:20,805 --> 00:47:22,904
你不想在viewWillAppear中做几何。

1146
00:47:22,973 --> 00:47:25,007
您的几何实际上可能已设置

1147
00:47:25,075 --> 00:47:27,042
在viewWillAppear，但你不应该指望。

1148
00:47:27,111 --> 00:47:29,311
你不应该在视图中做几何

1149
00:47:29,379 --> 00:47:31,313
也出现并消失。

1150
00:47:31,382 --> 00:47:35,050
几何变化：有特别的方法。

1151
00:47:35,119 --> 00:47:37,686
有一件事要考虑，你几乎不需要写任何东西

1152
00:47:37,755 --> 00:47:40,122
几何变化时的代码

1153
00:47:40,191 --> 00:47:42,023
这是你有自动布局。

1154
00:47:42,092 --> 00:47:43,792
我的意思是看看我刚刚写的应用程序。

1155
00:47:43,861 --> 00:47:47,129
我有悲伤，快乐，担心的文本块，和

1156
00:47:47,198 --> 00:47:48,497
当我旋转它停留在中间。

1157
00:47:48,566 --> 00:47:50,632
我没有写任何代码。

1158
00:47:50,701 --> 00:47:52,568
甚至更复杂的UI。

1159
00:47:52,637 --> 00:47:54,336
你通常使用自动布局

1160
00:47:54,404 --> 00:47:55,804
这是为你做的

1161
00:47:55,873 --> 00:47:57,206
所以大部分时间你不需要任何代码。

1162
00:47:57,274 --> 00:48:00,242
但是如果你确实觉得你需要做一些代码

1163
00:48:00,311 --> 00:48:02,411
让我们谈一谈你怎么做的。

1164
00:48:04,082 --> 00:48:06,982
有两种方法，viewWillLayoutSubviews和

1165
00:48:07,050 --> 00:48:08,550
viewDidLayoutSubviews。

1166
00:48:08,619 --> 00:48:10,019
这些都是发送给你的。

1167
00:48:10,087 --> 00:48:13,656
在发送给您之间，发生Autolayout。

1168
00:48:15,193 --> 00:48:18,994
所以如果你想参与你的几何变化

1169
00:48:19,063 --> 00:48:21,898
在Autolayout启动前，

1170
00:48:21,966 --> 00:48:23,399
您可以在视图中进行布局子视图。

1171
00:48:23,468 --> 00:48:25,534
如果你想等到Autolayout做它做的事情

1172
00:48:25,603 --> 00:48:26,568
然后你想参与，

1173
00:48:26,637 --> 00:48:29,037
您可以在viewDidLayoutSubviews中执行此操作。

1174
00:48:29,106 --> 00:48:31,474
那么这些叫什么时候呢？

1175
00:48:32,576 --> 00:48:35,378
当视图的界限发生变化时，

1176
00:48:35,446 --> 00:48:38,714
所有的子视图都可能需要移动。

1177
00:48:38,783 --> 00:48:40,582
也许这个观点很高，

1178
00:48:40,651 --> 00:48:43,052
薄而不是短而宽。

1179
00:48:43,120 --> 00:48:45,521
它的意图将被移动到右边

1180
00:48:45,589 --> 00:48:48,490
地方，就像我们再次旋转情绪的东西

1181
00:48:48,559 --> 00:48:50,559
我们需要移动堆栈视图或

1182
00:48:50,628 --> 00:48:53,762
在中间有一点点持续。

1183
00:48:53,831 --> 00:48:55,197
这就是它的原理

1184
00:48:55,265 --> 00:48:58,334
这就是为什么这个方法称为viewWillLayoutSubviews。

1185
00:48:58,402 --> 00:48:59,668
它的界限改变了

1186
00:48:59,737 --> 00:49:01,837
现在所有的子视图都需要布局。

1187
00:49:01,905 --> 00:49:04,307
这个观点实际上是如何画出来的

1188
00:49:04,375 --> 00:49:05,207
脸？

1189
00:49:05,276 --> 00:49:06,842
这与这无关。

1190
00:49:06,911 --> 00:49:08,743
这是一个看法。

1191
00:49:08,812 --> 00:49:11,647
那个面貌，当边界改变，如果它的内容

1192
00:49:11,716 --> 00:49:14,950
模式正在重画，就像我们将其设置为面部视图，它是绘制

1193
00:49:15,019 --> 00:49:18,720
方法将自动在新界限中被呼叫。

1194
00:49:18,789 --> 00:49:20,455
所以你不必在那里做任何事情。

1195
00:49:20,524 --> 00:49:22,224
所以viewWillLayoutSubviews，

1196
00:49:22,293 --> 00:49:24,659
当你有子视图时会发生什么。

1197
00:49:24,728 --> 00:49:27,596
这在视图级别发生，所以视图有一个方法

1198
00:49:27,665 --> 00:49:30,199
布局他们的子视图，称为layoutSubviews。

1199
00:49:30,268 --> 00:49:33,102
子视图和ViewController也可以

1200
00:49:33,170 --> 00:49:36,905
找出它的看法，而这个我的意思是var

1201
00:49:36,974 --> 00:49:39,241
在ViewController中查看，你还记得那个var是什么？

1202
00:49:39,310 --> 00:49:41,410
那就是顶级视图。

1203
00:49:41,479 --> 00:49:43,212
在您的ViewController中有一个var，

1204
00:49:43,281 --> 00:49:46,615
这是说，这个视图将会布局其子视图

1205
00:49:46,684 --> 00:49:49,718
通常，当顶级视图发生变化时

1206
00:49:49,786 --> 00:49:52,488
由于旋转，但其他事情也可以改变它。

1207
00:49:55,793 --> 00:49:59,728
这些方法的一件事是你应该期望它们

1208
00:49:59,797 --> 00:50:02,198
可能会一直被称为。

1209
00:50:02,266 --> 00:50:04,299
不要试图预测他们什么时候被调用。

1210
00:50:04,368 --> 00:50:06,735
只要，每当他们调用，你做你所想的，

1211
00:50:06,803 --> 00:50:07,702
你应该做，

1212
00:50:07,771 --> 00:50:10,372
并且它们可能被重复地称为相同

1213
00:50:10,441 --> 00:50:11,373
bounds,

1214
00:50:11,442 --> 00:50:13,375
所以界限实际上可能并没有改变，

1215
00:50:13,444 --> 00:50:15,578
因为这不是所谓的视图界限改变了

1216
00:50:15,646 --> 00:50:18,280
称为viewWillLayoutSubviews和viewDidLayoutSubviews。

1217
00:50:18,349 --> 00:50:20,682
除了界限变化之外还有其他的事情

1218
00:50:20,751 --> 00:50:23,152
可能会导致顶级视图必须进行布局

1219
00:50:23,220 --> 00:50:24,020
子视图。

1220
00:50:24,088 --> 00:50:26,488
所以期望这个被公平地称为

1221
00:50:26,557 --> 00:50:29,458
你应该总是对它做出正确的反应。

1222
00:50:29,526 --> 00:50:31,026
即使它是反复使用相同的

1223
00:50:31,095 --> 00:50:31,927
边界或其他。

1224
00:50:33,430 --> 00:50:35,297
现在，自动旋转，

1225
00:50:35,366 --> 00:50:38,466
实际上通过旋转设备来改变界限

1226
00:50:38,535 --> 00:50:41,603
有几个额外的兴趣点。

1227
00:50:41,672 --> 00:50:44,473
最值得注意的是动画。

1228
00:50:44,541 --> 00:50:46,942
所以通常当你旋转它只是将来

1229
00:50:47,011 --> 00:50:50,011
ViewWillLayoutSubviews和一切只是去，

1230
00:50:50,080 --> 00:50:53,949
汽车布局将会发生，一切都正常。

1231
00:50:54,018 --> 00:50:57,519
然而，这些变化，所有这些变化都是动画的。

1232
00:50:57,588 --> 00:51:00,289
如果您在旋转设备时仔细观察，全部

1233
00:51:00,358 --> 00:51:03,892
这些观点是跨越其新位置的。

1234
00:51:03,961 --> 00:51:05,394
实际上真的很酷

1235
00:51:06,931 --> 00:51:07,630
他们正在动画化。

1236
00:51:07,698 --> 00:51:09,698
他们不只是流行出现在新的地方，

1237
00:51:09,766 --> 00:51:11,100
他们滑过

1238
00:51:11,168 --> 00:51:13,068
那你可以参加那个动画，

1239
00:51:13,137 --> 00:51:14,336
现在我们还没有谈论动画。

1240
00:51:14,405 --> 00:51:16,905
我们将在三个星期左右。

1241
00:51:16,974 --> 00:51:18,407
但是你可以用这种方法参与，

1242
00:51:18,475 --> 00:51:20,576
ViewwillTransition与协调器大小。

1243
00:51:20,644 --> 00:51:24,246
那个协调员有一个可以设置的关闭

1244
00:51:24,315 --> 00:51:27,016
这将导致您想要的一些动画

1245
00:51:27,084 --> 00:51:31,052
与旋转动画一起发生。

1246
00:51:31,121 --> 00:51:33,822
所以如果你想动画移动一些用户在做

1247
00:51:33,891 --> 00:51:36,224
其他一些不会为您自动发生的事情，

1248
00:51:36,293 --> 00:51:37,959
大多数东西都用autolayout做的，

1249
00:51:38,028 --> 00:51:39,728
你可以用这个方法来做到这一点。

1250
00:51:43,567 --> 00:51:48,337
低内存：didReceiveMemoryWarning

1251
00:51:48,406 --> 00:51:49,671
将被发送到您的视图控制器

1252
00:51:49,740 --> 00:51:51,840
该系统的内存不足，它试图得到一些回报。

1253
00:51:51,909 --> 00:51:53,409
这几乎从来没有发生。

1254
00:51:53,477 --> 00:51:55,311
我不记得最后一次这是因为

1255
00:51:55,379 --> 00:51:57,379
这些设备有这么多的内存。

1256
00:51:58,649 --> 00:52:01,116
通常如果发生这种情况，你要

1257
00:52:01,185 --> 00:52:03,419
注意了因为你使用了很多内存。

1258
00:52:03,487 --> 00:52:06,055
如果系统发送给你，或者你是或

1259
00:52:06,124 --> 00:52:07,922
一些其他应用程序正在使用大量的内存。

1260
00:52:07,991 --> 00:52:10,926
顺便说一句，如果你是一个使用大量内存的应用程序，

1261
00:52:10,995 --> 00:52:12,094
你不要控制它，

1262
00:52:12,163 --> 00:52:14,263
该系统有权杀死你。

1263
00:52:15,332 --> 00:52:16,531
只要杀死你的应用程序

1264
00:52:16,600 --> 00:52:18,400
它会做，绝对。

1265
00:52:18,468 --> 00:52:19,901
即使你在后台，

1266
00:52:19,970 --> 00:52:23,805
如果你已经分配了大量的内存，你是一个坏的

1267
00:52:23,874 --> 00:52:27,909
公民，他们只是杀了你，让你的记忆回到什么

1268
00:52:27,978 --> 00:52:30,679
如果你有这种方法，你会释放一些记忆。

1269
00:52:30,747 --> 00:52:33,082
假设你有一张当前没有的图像

1270
00:52:33,150 --> 00:52:36,284
屏幕，您可以从磁盘上的文件创建它。

1271
00:52:36,353 --> 00:52:39,321
我们还没有真正谈论过这个，但是你的手机已经有了

1272
00:52:39,390 --> 00:52:42,625
永久存储，闪存，你有，

1273
00:52:42,693 --> 00:52:44,627
我们假设一个JPEG图像，你可以重新创建它。

1274
00:52:44,695 --> 00:52:46,461
那么你肯定会在这里发布。

1275
00:52:46,530 --> 00:52:47,529
Cuz它不在屏幕上，和

1276
00:52:47,598 --> 00:52:48,997
您可以从磁盘真正快速创建它，

1277
00:52:49,066 --> 00:52:50,165
所以没有理由保持它。

1278
00:52:50,234 --> 00:52:51,967
所以这是你可以释放的东西。

1279
00:52:52,036 --> 00:52:55,003
基本上任何可以快速重新创建的内存。

1280
00:52:55,072 --> 00:52:57,205
或者当前不在屏幕上，和

1281
00:52:57,274 --> 00:52:59,808
当您回到屏幕上时，您可以创建它。

1282
00:52:59,877 --> 00:53:02,177
这是一件很好的事情。

1283
00:53:02,246 --> 00:53:03,678
但只有大的事情。

1284
00:53:03,747 --> 00:53:05,947
不要发出小小的100字节的东西。

1285
00:53:06,016 --> 00:53:08,984
不，我们正在谈论图像，声音，视频，

1286
00:53:09,052 --> 00:53:13,355
大ol的东西

1287
00:53:13,424 --> 00:53:14,556
还有一件小事：

1288
00:53:14,625 --> 00:53:16,992
它不是UIcontroller生命周期的一部分，但是

1289
00:53:17,061 --> 00:53:20,662
从故事板出来的每一个物体：视图，

1290
00:53:20,731 --> 00:53:24,165
试图控制器，一切都被发送到awakeFromNib和

1291
00:53:24,234 --> 00:53:25,634
他们可以很早地发送。

1292
00:53:26,904 --> 00:53:27,936
一旦他们来就喜欢

1293
00:53:28,004 --> 00:53:29,938
他们从头尖被唤醒。

1294
00:53:30,006 --> 00:53:32,974
现在你不能使用它来满足要求

1295
00:53:33,043 --> 00:53:35,811
所有变量都被初始化。

1296
00:53:35,879 --> 00:53:38,947
但是你可以早点使用它，真的很早的初始化。

1297
00:53:39,016 --> 00:53:41,350
例如记得我提到你想要你的

1298
00:53:41,419 --> 00:53:43,819
分割视图控制器来显示脸部或

1299
00:53:43,887 --> 00:53:46,855
显示情绪而不是展示脸吗？

1300
00:53:47,825 --> 00:53:48,257
在你的计算器，

1301
00:53:48,326 --> 00:53:49,524
它会显示计算器，

1302
00:53:49,593 --> 00:53:52,828
而不是计算器的图形，和

1303
00:53:52,897 --> 00:53:54,863
我说你需要通过设置代表来做到这一点。

1304
00:53:54,932 --> 00:53:56,932
这个代表SplitViewController，

1305
00:53:57,001 --> 00:53:58,500
这是你想要做的事情

1306
00:53:59,503 --> 00:54:00,702
让该delegate早日参与。

1307
00:54:00,771 --> 00:54:03,738
星期三我们会谈论delegate(代理)。

1308
00:54:03,807 --> 00:54:07,108
所以awake from nib，很少使用，有时过度使用。

1309
00:54:07,177 --> 00:54:09,878
我会说如果你可以把它放在另一种方法，如view

1310
00:54:09,947 --> 00:54:11,713
did load或will appear或view。

1311
00:54:11,782 --> 00:54:13,181
did layout是否放在第一位

1312
00:54:13,250 --> 00:54:14,717
不要把它放在awakefromNib，

1313
00:54:14,785 --> 00:54:17,185
这是一个放下事情的最后手段。

1314
00:54:17,254 --> 00:54:19,722
这可能胜过超越它。

1315
00:54:19,790 --> 00:54:21,824
但这是唯一比它更好的事情。

1316
00:54:23,693 --> 00:54:25,661
所以这里是整个视图控制器的总结

1317
00:54:25,729 --> 00:54:26,561
生命周期

1318
00:54:26,630 --> 00:54:30,232
您可以从故事板中实例化，创建。

1319
00:54:30,300 --> 00:54:32,734
你可以从发送给你awake from nib。

1320
00:54:32,803 --> 00:54:33,969
Segue准备发生。

1321
00:54:34,038 --> 00:54:36,471
有人准备你，如果你被转移到

1322
00:54:36,539 --> 00:54:38,407
大多数MVC都是。

1323
00:54:38,475 --> 00:54:39,508
outlet设置。

1324
00:54:39,577 --> 00:54:41,176
您的脸部视图和您的计算器。

1325
00:54:41,244 --> 00:54:44,412
这是你的显示器和类似的东西设置。

1326
00:54:44,481 --> 00:54:47,015
ViewDidLoad被调用。

1327
00:54:47,084 --> 00:54:49,551
再次，用viewDidLoad，看看所有的东西

1328
00:54:49,619 --> 00:54:51,453
发生在viewDidLoad被调用的时候。

1329
00:54:51,522 --> 00:54:53,255
这是放置初始化的好地方。

1330
00:54:54,659 --> 00:54:57,058
你进入正常的生命周期

1331
00:54:57,127 --> 00:54:59,460
你在哪里出现和消失。

1332
00:54:59,529 --> 00:55:01,413
随着意志消失，确实出现并消失。

1333
00:55:01,414 --> 00:55:03,298
出现和

1334
00:55:03,367 --> 00:55:05,501
一路上，在任何时候，实际上，

1335
00:55:05,569 --> 00:55:08,070
甚至在viewDidLoad之前，你可以把这些发送到。

1336
00:55:08,139 --> 00:55:09,571
虽然这是罕见的。

1337
00:55:09,640 --> 00:55:10,472
但随时你可以，

1338
00:55:10,540 --> 00:55:13,308
其实我不知道你可以在viewDidLoad之前得到它。

1339
00:55:13,377 --> 00:55:16,144
拿回来，但任何时候，当视图会出现和

1340
00:55:16,213 --> 00:55:19,314
无论你是在屏幕还是在屏幕上，都会消失

1341
00:55:19,383 --> 00:55:22,050
不是，你可以得到viewWillLayout子视图和

1342
00:55:22,119 --> 00:55:25,854
viewDidLayout发送给您的子视图，自动布局发生。

1343
00:55:25,923 --> 00:55:28,389
顺便说一句，你为什么要这些方法呢？

1344
00:55:28,458 --> 00:55:29,591
当你不在屏幕上？

1345
00:55:29,659 --> 00:55:32,327
那么这个系统可能正在为你准备动画

1346
00:55:32,396 --> 00:55:33,429
来屏幕上

1347
00:55:34,631 --> 00:55:36,364
当系统动画时，

1348
00:55:36,433 --> 00:55:40,135
它可以做的一个方法是让你画一个

1349
00:55:40,203 --> 00:55:42,537
方向，你是否在另一方画画

1350
00:55:42,606 --> 00:55:45,307
那么它会将位从一个移动到另一个。

1351
00:55:45,376 --> 00:55:47,142
这是一种动画可以做的。

1352
00:55:47,211 --> 00:55:48,977
所以你可能会离开屏幕，这是要求你的

1353
00:55:49,046 --> 00:55:49,544
这两个。

1354
00:55:49,613 --> 00:55:50,712
所以它给你两次，

1355
00:55:50,781 --> 00:55:52,547
一旦得到这个方向和绘制，和

1356
00:55:52,616 --> 00:55:54,950
那么一旦得到这样的方向和画。

1357
00:55:55,018 --> 00:55:56,017
然后当你进入屏幕时，

1358
00:55:56,086 --> 00:55:57,786
它从一个到另一个动画你。

1359
00:55:58,956 --> 00:56:01,022
所以，这就是为什么你可以随时得到这个

1360
00:56:01,091 --> 00:56:01,757
在屏幕上或关闭。

1361
00:56:03,727 --> 00:56:06,995
也可以随时获得低内存警告。

1362
00:56:07,063 --> 00:56:08,197
然后你完成了

1363
00:56:09,500 --> 00:56:12,033
当它离开屏幕时离开堆，如果它是

1364
00:56:12,102 --> 00:56:18,706
只要它本身不会变成某种东西，

1365
00:56:18,775 --> 00:56:21,709
但是当它完成它被抛出。

1366
00:56:21,778 --> 00:56:23,278
好的，所以我会给你一个演示

1367
00:56:23,347 --> 00:56:25,247
将使所有这一切更具体。

1368
00:56:26,850 --> 00:56:28,417
让我看看其余的，以防我不能得到

1369
00:56:28,485 --> 00:56:29,984
回到幻灯片，我想我们会的，因为

1370
00:56:30,053 --> 00:56:32,588
我想我们有时间来做这个其他的话题。

1371
00:56:34,124 --> 00:56:35,123
演示后，我会回来

1372
00:56:35,192 --> 00:56:37,025
开始谈论内存管理，希望。

1373
00:56:37,094 --> 00:56:39,995
周三，延展(extensions)，协议(protocols)，代理(delegation)，

1374
00:56:40,064 --> 00:56:41,463
我告诉你你需要知道的事情

1375
00:56:41,532 --> 00:56:43,932
你的分裂视图的事情，如果你想做那个额外的信用。

1376
00:56:44,001 --> 00:56:46,034
我们将开始谈论滚动视图，

1377
00:56:46,103 --> 00:56:47,302
更复杂的对象。

1378
00:56:47,370 --> 00:56:49,137
星期五，星期五重要的一个，

1379
00:56:49,206 --> 00:56:50,805
如果你想要额外的信用，

1380
00:56:50,874 --> 00:56:53,241
关于计算器图表的性能。

1381
00:56:53,310 --> 00:56:55,377
所以你绝对想要出现那个。

1382
00:56:55,446 --> 00:56:57,813
接下来我们将开始进行多线程化，

1383
00:56:57,882 --> 00:56:59,615
表视图，一堆很酷的东西。

1384
00:57:00,918 --> 00:57:03,084
好的，让我们在这里做演示。

1385
00:57:03,153 --> 00:57:06,788
我会去看我们的脸，我们刚刚进来的同样的事情，

1386
00:57:06,857 --> 00:57:08,156
这面对它的应用程序。

1387
00:57:08,225 --> 00:57:10,959
我会拖一下我写的一小段代码，

1388
00:57:11,028 --> 00:57:13,428
我会在这里给你看的。

1389
00:57:13,497 --> 00:57:17,299
让我们把导航仪放回这里，把它放在这里。

1390
00:57:17,368 --> 00:57:18,600
所以我只是把它放在这里。

1391
00:57:18,668 --> 00:57:20,202
顺便说一句，当你拖动代码，

1392
00:57:20,271 --> 00:57:22,537
如果需要，您可能想要复制项目。

1393
00:57:22,606 --> 00:57:24,639
否则，它会与另一个链接，

1394
00:57:24,708 --> 00:57:25,874
如果你在另一个地方改变它，

1395
00:57:25,943 --> 00:57:27,242
它会在这里改变。

1396
00:57:27,311 --> 00:57:30,712
可能会导致意想不到的结果。

1397
00:57:32,015 --> 00:57:32,781
我把它放在这里

1398
00:57:32,849 --> 00:57:34,782
我们来看看这个刚刚放在这里的小类，

1399
00:57:34,851 --> 00:57:36,951
它被称为VCLLoggingViewController。

1400
00:57:37,020 --> 00:57:39,054
它是UIViewController的子类。

1401
00:57:40,424 --> 00:57:44,292
记录视图控制器并记录VCL方法。

1402
00:57:44,361 --> 00:57:46,661
查看控制器生命周期方法。

1403
00:57:46,730 --> 00:57:50,431
所以它基本上只是覆盖每一个。

1404
00:57:50,500 --> 00:57:53,435
视图将出现，查看布局子视图远离笔尖。

1405
00:57:53,504 --> 00:57:55,436
甚至告诉你什么时候离开堆。

1406
00:57:55,505 --> 00:57:57,372
这是在这里super init

1407
00:57:57,441 --> 00:58:00,942
它只是打印出来，发生了什么。

1408
00:58:01,011 --> 00:58:02,210
所以它只是坐在控制台上，

1409
00:58:02,279 --> 00:58:04,179
打印发生的一切。

1410
00:58:04,248 --> 00:58:05,147
这有点酷，

1411
00:58:05,215 --> 00:58:07,048
因为它显示了每个人的实例。

1412
00:58:07,117 --> 00:58:09,351
所以你可以看到实例来来去往，

1413
00:58:09,420 --> 00:58:12,054
因为他们被淘汰，然后脱落。

1414
00:58:12,122 --> 00:58:15,390
随着时间的推移，它也有可能缩小，所以你可以，当你

1415
00:58:15,459 --> 00:58:18,259
点击一些，你可以看到一堆发生在一起。

1416
00:58:18,328 --> 00:58:21,196
现在我们要用这个方式，我们就是要做

1417
00:58:21,265 --> 00:58:26,868
这个类是我们两个控制器的父类。

1418
00:58:26,937 --> 00:58:29,304
所以我们将把它放到一个VCL登录视图控制器中。

1419
00:58:29,373 --> 00:58:32,674
而且我们将把它变成一个VCL登录视图控制器。

1420
00:58:32,743 --> 00:58:36,411
在那里，你可以看到为什么我们总是调用给super

1421
00:58:36,479 --> 00:58:38,713
在我们所有的视图控制方法。

1422
00:58:38,782 --> 00:58:40,648
如果我们做了这些视图控制器的任何一个

1423
00:58:40,717 --> 00:58:41,850
生命周期方法，和

1424
00:58:41,918 --> 00:58:44,385
我们从VCL登录视图控制器进行子类化，

1425
00:58:44,454 --> 00:58:46,788
如果我们不叫super，它不会被记录。

1426
00:58:46,856 --> 00:58:48,890
而且晚些时候来也不常见

1427
00:58:48,959 --> 00:58:51,759
弹出您和之间的不同类型的视图控制器

1428
00:58:51,828 --> 00:58:52,894
UI视图控制器。

1429
00:58:52,962 --> 00:58:56,264
某些视图控制器执行类似日志记录或

1430
00:58:56,332 --> 00:58:57,732
别的东西

1431
00:58:57,801 --> 00:58:58,867
好的，就这样。

1432
00:58:58,935 --> 00:59:00,501
这就是我们需要做的，以使这项工作。

1433
00:59:00,570 --> 00:59:01,369
所以我要去吧

1434
00:59:01,438 --> 00:59:03,137
跑步，我们会坚持使用iPhone 7 plus。

1435
00:59:03,206 --> 00:59:07,009
让我们继续前进，让控制台在这里。

1436
00:59:10,748 --> 00:59:11,546
开始了。

1437
00:59:11,615 --> 00:59:13,414
这已经来了，我们已经看到了很多

1438
00:59:13,483 --> 00:59:15,783
查看控制器生命周期的东西在这里发生。

1439
00:59:15,852 --> 00:59:17,852
好吧，我们有我们的EmotionsViewController和

1440
00:59:17,921 --> 00:59:18,920
我们的FaceViewController，

1441
00:59:18,989 --> 00:59:21,623
这两个视图控制器发出。

1442
00:59:21,692 --> 00:59:23,458
他们从故事板出来，和

1443
00:59:23,527 --> 00:59:25,426
它们使用这个init与init with coder。

1444
00:59:25,495 --> 00:59:26,594
那就是那件事情

1445
00:59:26,663 --> 00:59:27,862
出来界面构建器。

1446
00:59:27,931 --> 00:59:31,033
他们都得到awakeFromNib，你看到了吗？

1447
00:59:31,101 --> 00:59:34,435
然后情绪一，首先得到viewDidLoad。

1448
00:59:34,504 --> 00:59:37,371
然后它得到viewwillAppear(animated =

1449
00:59:37,440 --> 00:59:38,990
那是因为我们刚刚启动我们的应用程序，所以是这样的

1450
00:59:38,991 --> 00:59:40,541
fasle)

1451
00:59:40,610 --> 00:59:43,678
不滑动导航控制器或某物。

1452
00:59:43,747 --> 00:59:46,848
它只是出现，所以它不是动画。

1453
00:59:46,917 --> 00:59:50,919
然后注意，它被布置了两次，两者都是相同的大小，

1454
00:59:50,988 --> 00:59:54,622
295 x 414，这是这个大小在这里。

1455
00:59:54,691 --> 00:59:56,624
它看起来，做了两次。

1456
00:59:56,693 --> 00:59:57,642
一些动画，我不知道这是怎么回事，

1457
00:59:57,643 --> 00:59:58,592
再一次，为什么？

1458
00:59:58,661 --> 00:59:59,494
为什么我这样做

1459
00:59:59,563 --> 01:00:00,662
但你不在乎，

1460
01:00:00,730 --> 01:00:04,466
只要注意这些布局可以重复出现。

1461
01:00:04,534 --> 01:00:06,902
现在这里是脸部视图控制器，它被加载。

1462
01:00:08,505 --> 01:00:10,838
它被告知会出现，它会出现。

1463
01:00:10,907 --> 01:00:12,274
它被布置了一次。

1464
01:00:13,877 --> 01:00:17,479
然后他们都得到了DidAppear，现在他们在屏幕上。

1465
01:00:17,547 --> 01:00:19,181
所以这正是你所期望的。

1466
01:00:20,517 --> 01:00:24,252
现在我们旋转这个东西，所以

1467
01:00:24,321 --> 01:00:26,821
我们去肖像(竖屏)模式。

1468
01:00:26,890 --> 01:00:29,090
我们不会看到master。

1469
01:00:29,159 --> 01:00:33,428
我们只会在这里看到细节(detail)。

1470
01:00:35,866 --> 01:00:37,765
所以在这里，master消失了。

1471
01:00:37,834 --> 01:00:39,334
所以这是，看到破折号？

1472
01:00:39,403 --> 01:00:42,570
当我轮到这个时候，发生了什么事情。

1473
01:00:42,639 --> 01:00:44,839
所以这是全新的东西。

1474
01:00:44,908 --> 01:00:46,374
现在注意到EmotionViewController

1475
01:00:46,443 --> 01:00:47,142
马上就是

1476
01:00:47,210 --> 01:00:50,678
告诉我们将会有一个旋转动画。

1477
01:00:50,747 --> 01:00:54,049
它有机会参与动画。

1478
01:00:54,118 --> 01:00:58,719
FaceView的新尺寸重新布局。

1479
01:00:58,788 --> 01:01:01,322
现在很高，所以它被布局了

1480
01:01:01,391 --> 01:01:03,124
它获取viewWillLayoutSubviews。

1481
01:01:03,193 --> 01:01:05,927
情绪控制员被告知会消失。

1482
01:01:07,331 --> 01:01:09,164
所以它会消失。

1483
01:01:09,232 --> 01:01:11,766
注意动画故障，这是动画中的动画

1484
01:01:11,834 --> 01:01:15,403
该旋转情况由旋转动画处理。

1485
01:01:15,471 --> 01:01:18,373
所以它不会滑入或移出，但它是动画

1486
01:01:18,442 --> 01:01:21,109
在那里，但由旋转动画。

1487
01:01:21,178 --> 01:01:21,943
那我们有

1488
01:01:22,012 --> 01:01:24,212
面部视图控制器再次布置。

1489
01:01:28,619 --> 01:01:30,952
现在我们得到了EmotionsViewController

1490
01:01:31,021 --> 01:01:32,487
正在得到它的机会

1491
01:01:32,555 --> 01:01:35,389
动画旁边的旋转，就在这里。

1492
01:01:35,458 --> 01:01:37,693
我们这里有几个虚假的东西

1493
01:01:39,129 --> 01:01:41,829
iOS新的UIKit，我们可以摆脱那些。

1494
01:01:41,898 --> 01:01:46,134
然后这两个控制器的动画结束。

1495
01:01:46,203 --> 01:01:47,069
合理？

1496
01:01:47,137 --> 01:01:49,604
现在我要点击这种情感的事情，和

1497
01:01:49,673 --> 01:01:52,941
回到master，看看会发生什么。

1498
01:01:53,009 --> 01:01:54,743
好的，所以我们回到master。

1499
01:01:54,812 --> 01:01:57,812
FaceViewController被告知会消失，

1500
01:01:57,881 --> 01:02:00,382
当然，cuz它确实消失了。

1501
01:02:00,450 --> 01:02:02,718
情绪被告知会出现，

1502
01:02:02,786 --> 01:02:05,553
它在这个新的高排列中被布置。

1503
01:02:05,622 --> 01:02:07,154
然后脸部控制器告诉它，

1504
01:02:07,223 --> 01:02:08,623
失踪了

1505
01:02:08,692 --> 01:02:10,759
情绪视图控制器被告知它消失了。

1506
01:02:12,462 --> 01:02:14,829
现在我们走吧，带回一个。

1507
01:02:14,898 --> 01:02:18,633
你可以看看，看看，FaceViewController(2)。

1508
01:02:18,702 --> 01:02:20,835
创建了一个新的FaceViewController，

1509
01:02:20,904 --> 01:02:24,138
因为我们转向它，所以它创造了它。

1510
01:02:24,207 --> 01:02:25,139
你看到了吗

1511
01:02:25,208 --> 01:02:28,676
事实上，如果我们来回走动，我们会看到我们是

1512
01:02:28,745 --> 01:02:31,413
每次得到新的FaceViewController，

1513
01:02:31,481 --> 01:02:33,148
FaceView 3。

1514
01:02:33,216 --> 01:02:35,984
看看老人的FaceViewController

1515
01:02:36,053 --> 01:02:39,254
3左堆，他们会被丢在下面。

1516
01:02:41,191 --> 01:02:43,725
所以我会发布所有这些代码。

1517
01:02:43,794 --> 01:02:45,693
您可以删除此日志记录视图控制器。

1518
01:02:45,762 --> 01:02:48,162
其实你可以把它放进你的计算器，

1519
01:02:48,231 --> 01:02:50,899
如果你想，并尝试看它带来的东西和

1520
01:02:50,967 --> 01:02:52,033
关屏幕等

1521
01:02:54,604 --> 01:02:58,439
让我们回到这里的幻灯片。

1522
01:02:58,508 --> 01:03:02,243
我们来谈谈我们的下一个话题，

1523
01:03:02,312 --> 01:03:06,214
这是内存管理。

1524
01:03:06,282 --> 01:03:08,983
到目前为止，我们已经避免了这个话题

1525
01:03:09,052 --> 01:03:10,918
我是一个重要的顶尖话题。

1526
01:03:10,987 --> 01:03:13,154
如果您有引用计数数据结构，

1527
01:03:13,223 --> 01:03:14,822
一类tha是唯一的参考，

1528
01:03:14,891 --> 01:03:17,458
好，我不是唯一的数据计数参考结构

1529
01:03:17,527 --> 01:03:18,994
你会看到一秒钟。

1530
01:03:19,062 --> 01:03:22,263
但是，如果你有一个参考计数的东西，它生活

1531
01:03:22,332 --> 01:03:26,167
在堆里，你怎么知道什么时候摆脱它？

1532
01:03:26,236 --> 01:03:29,136
我在这个演示中看到，我只是做了面部控制器

1533
01:03:29,205 --> 01:03:30,505
离开堆

1534
01:03:30,573 --> 01:03:32,507
怎么知道离开堆？

1535
01:03:32,576 --> 01:03:35,810
因为我们没有做任何事情来告诉它离开堆。

1536
01:03:35,879 --> 01:03:37,645
我们正在使用它，和

1537
01:03:37,714 --> 01:03:40,147
当我们不再使用它了，它消失了。

1538
01:03:40,216 --> 01:03:43,217
那么当然，你知道一种让事情离开的方法

1539
01:03:43,286 --> 01:03:45,419
堆，它被称为垃圾收集。

1540
01:03:45,488 --> 01:03:47,021
有多少人知道垃圾收集是什么，

1541
01:03:47,090 --> 01:03:48,890
之前听过这个短语吗？

1542
01:03:48,959 --> 01:03:51,225
所以，超过一半的你，这样很好。

1543
01:03:51,294 --> 01:03:55,330
运行时像Java一样，做垃圾收集。

1544
01:03:55,398 --> 01:03:58,065
这是一个非常好的方法。

1545
01:03:58,134 --> 01:03:59,767
它涉及通过堆和

1546
01:03:59,836 --> 01:04:01,602
一种标记使用的一切和

1547
01:04:01,671 --> 01:04:02,804
然后扫过

1548
01:04:02,873 --> 01:04:05,740
摆脱没有使用的东西。

1549
01:04:05,809 --> 01:04:08,376
Swift不做任何事情，它使用完全不同

1550
01:04:08,445 --> 01:04:11,613
机制称为自动引用计数。

1551
01:04:11,682 --> 01:04:13,815
基本上每次你创建一个var或

1552
01:04:13,884 --> 01:04:16,551
一个让我们指出一堆堆的东西，

1553
01:04:16,619 --> 01:04:19,754
斯威夫特在某个地方过了一个标记。

1554
01:04:19,823 --> 01:04:21,322
另一个，还有另一个。

1555
01:04:21,391 --> 01:04:24,025
它跟踪它，直到不再有这些

1556
01:04:24,094 --> 01:04:25,426
let和vars。

1557
01:04:25,495 --> 01:04:28,629
当它们消失时，它会擦除​​它们。

1558
01:04:28,698 --> 01:04:29,664
喜欢，也许他们是

1559
01:04:29,733 --> 01:04:32,066
在另一个离开堆的对象中的var。

1560
01:04:32,135 --> 01:04:34,735
所以现在，var不再指向这个其他对象。

1561
01:04:34,804 --> 01:04:37,438
所以它基本上是跟踪所有的vars除非

1562
01:04:37,507 --> 01:04:38,539
他们指着堆里的东西。

1563
01:04:38,608 --> 01:04:40,475
而没有人再指出，

1564
01:04:40,544 --> 01:04:42,477
它让它从堆中。

1565
01:04:42,545 --> 01:04:44,045
现在为什么这么好？

1566
01:04:44,114 --> 01:04:45,880
这是非常可预测的内存使用。

1567
01:04:45,949 --> 01:04:48,249
你究竟知道什么事情会离开堆。

1568
01:04:48,318 --> 01:04:51,519
他们一旦没有人指出他们就离开堆。

1569
01:04:51,588 --> 01:04:53,821
这还有什么好处，就是你几乎必须

1570
01:04:53,890 --> 01:04:55,389
在你的代码中不要做任何事情来做这个工作。

1571
01:04:55,458 --> 01:04:56,657
这只是自动的

1572
01:04:56,726 --> 01:04:59,293
这就是为什么它被称为自动引用计数。

1573
01:04:59,362 --> 01:05:01,262
你可以参与。

1574
01:05:01,330 --> 01:05:04,131
你可以参与的方式是影响

1575
01:05:04,200 --> 01:05:06,501
电弧的工作方式。

1576
01:05:06,569 --> 01:05:09,003
并且您在Swift中使用三个关键字

1577
01:05:09,072 --> 01:05:12,072
称为强(strong)，弱(weak)，无名(unowned)。

1578
01:05:12,141 --> 01:05:14,876
我实际上告诉过你，我会告诉你这些

1579
01:05:14,945 --> 01:05:17,445
回到第一个讲座，你记得我们什么时候

1580
01:05:17,514 --> 01:05:20,081
做了显示的outlet，weak。

1581
01:05:20,150 --> 01:05:20,615
还记得吗

1582
01:05:20,684 --> 01:05:22,850
这就是这里的weak。

1583
01:05:22,919 --> 01:05:24,619
那么 strong, weak and unknown.

1584
01:05:24,687 --> 01:05:26,287
所以让我们来谈一谈这些。

1585
01:05:26,356 --> 01:05:29,390
强，这是正常的引用计数。

1586
01:05:29,459 --> 01:05:31,692
如果你有一个strong的var或

1587
01:05:31,761 --> 01:05:34,629
strong让堆中的东西，那个东西

1588
01:05:34,697 --> 01:05:37,398
将留在堆中，只要存在var，

1589
01:05:37,467 --> 01:05:40,968
它强烈地把东西放在堆里。

1590
01:05:41,037 --> 01:05:42,102
这是默认值。

1591
01:05:42,171 --> 01:05:45,773
你甚至没有键入这个关键字，这是默认的。

1592
01:05:45,842 --> 01:05:49,244
每一个var，除非你说它很weak，会变得很strong。

1593
01:05:50,947 --> 01:05:51,913
所以很简单

1594
01:05:51,981 --> 01:05:53,448
神奇地工作

1595
01:05:53,517 --> 01:05:54,215
然后有weak。

1596
01:05:54,283 --> 01:05:57,652
现在，weak是Swift中一个非常有趣的关键字。

1597
01:05:57,720 --> 01:06:01,188
当你把weak的顶部放在一个var上时，

1598
01:06:01,257 --> 01:06:05,193
它说，我在堆中看这个东西，但是

1599
01:06:05,262 --> 01:06:07,762
如果没有人对堆感兴趣的话

1600
01:06:07,831 --> 01:06:10,298
你可以把它从堆中抛出来，使我变为零。

1601
01:06:10,366 --> 01:06:13,034
那么弱只能用什么类型？

1602
01:06:15,771 --> 01:06:17,372
>>可选(Optional)。 >>可选，确切地说，

1603
01:06:17,441 --> 01:06:19,907
你必须能够将其设置为零。

1604
01:06:19,976 --> 01:06:22,376
所以只有可选项才能weak。

1605
01:06:22,445 --> 01:06:26,514
所以在你的计算器显示outlet，

1606
01:06:26,583 --> 01:06:31,486
这是一个weak的UILabel感叹号，

1607
01:06:31,555 --> 01:06:34,722
这意味着它是一个可选的UILabel。

1608
01:06:34,791 --> 01:06:35,523
所以它是weak的。

1609
01:06:35,592 --> 01:06:36,357
那是什么意思？

1610
01:06:36,426 --> 01:06:38,326
这意味着如果那个UILabel为

1611
01:06:38,395 --> 01:06:41,929
有一些原因，其他人都把它抛出去，

1612
01:06:41,998 --> 01:06:46,167
那么显示var将自动设置为nil。

1613
01:06:46,236 --> 01:06:50,138
现在，为什么显示var设置本身很weak？

1614
01:06:50,206 --> 01:06:51,672
为什么说weak？

1615
01:06:51,741 --> 01:06:54,442
那么，因为它指向的是那个视图

1616
01:06:54,510 --> 01:06:55,376
层次结构。

1617
01:06:55,445 --> 01:06:57,778
具有所有计算器按钮的视图层次结构

1618
01:06:57,847 --> 01:06:59,013
显示和所有在那里。

1619
01:06:59,082 --> 01:07:02,149
如果该视图层次结构停止指向它，

1620
01:07:02,218 --> 01:07:06,020
这意味着它已经走了，所以显示器outlet是不

1621
01:07:06,089 --> 01:07:09,457
更有兴趣试图设置数字，以及

1622
01:07:09,526 --> 01:07:12,393
像这样的事情，因为它已经走了。

1623
01:07:12,461 --> 01:07:16,297
所以，当你有一个非常strong的var

1624
01:07:16,366 --> 01:07:19,033
持有您完全依赖的数据结构

1625
01:07:19,102 --> 01:07:21,702
你的语义意味着什么

1626
01:07:21,771 --> 01:07:22,670
那么你可以使它变weak。

1627
01:07:24,808 --> 01:07:28,442
所以我们完美无暇，如果这个显示器在零

1628
01:07:28,511 --> 01:07:31,679
如果视图层次结构不再指向该UILabel

1629
01:07:31,748 --> 01:07:33,815
因为在这一点上可能是无意义的。

1630
01:07:36,153 --> 01:07:39,053
所以我们通常不会那么weak。

1631
01:07:39,122 --> 01:07:41,989
很多时候我们会用它来避免

1632
01:07:42,058 --> 01:07:44,159
一个对象强烈指向另一个对象

1633
01:07:44,227 --> 01:07:46,361
有这个对象强烈地回到这个对象。

1634
01:07:47,530 --> 01:07:48,829
这是非常糟糕的情况。

1635
01:07:48,898 --> 01:07:51,365
这就是所谓的内存周期。

1636
01:07:51,434 --> 01:07:54,101
这将把这两个对象保存在堆中

1637
01:07:54,170 --> 01:07:57,304
永远是因为永远是一个strong

1638
01:07:57,373 --> 01:07:58,806
指向他们中的每一个。

1639
01:07:58,874 --> 01:08:00,108
他们各自指向对方。

1640
01:08:00,177 --> 01:08:01,776
所以他们中的任何一个都可以离开堆

1641
01:08:01,845 --> 01:08:03,210
释放他们指向另一个的指针。

1642
01:08:03,279 --> 01:08:04,245
除非你设置一个，

1643
01:08:04,314 --> 01:08:06,647
像他们可以选择设置为零或某事。

1644
01:08:06,716 --> 01:08:07,882
所以如果你有这样的情况，

1645
01:08:07,951 --> 01:08:10,018
你可以用waek来打破这个循环

1646
01:08:10,086 --> 01:08:12,487
的指针是一个弱指针。

1647
01:08:12,556 --> 01:08:14,089
这将允许它可能发生。

1648
01:08:15,525 --> 01:08:17,024
我会在这里给你一个例子

1649
01:08:17,093 --> 01:08:20,928
使这种内存周期超级容易的情况。

1650
01:08:20,997 --> 01:08:21,929
那很糟糕，很简单。

1651
01:08:21,998 --> 01:08:23,865
因为你可以得到事情的周期

1652
01:08:23,933 --> 01:08:25,099
举行内存

1653
01:08:25,168 --> 01:08:27,034
最后一个是unowned的。

1654
01:08:27,103 --> 01:08:30,471
不知道的意思是，“嘿，自动参考计数器，别担心

1655
01:08:30,540 --> 01:08:33,708
关于这一个，我会照顾它，我会确保我从来没有

1656
01:08:33,776 --> 01:08:36,477
当它不指向堆中的东西时使用它“。

1657
01:08:36,546 --> 01:08:38,746
这可能是相当危险的。

1658
01:08:38,815 --> 01:08:40,381
我们几乎从不使用这个。

1659
01:08:40,449 --> 01:08:42,916
它真的只能用来打破这些内存之一

1660
01:08:42,985 --> 01:08:45,586
循环，它只能用于进行内存循环

1661
01:08:45,655 --> 01:08:48,723
当你100％确定你知道谁是谁

1662
01:08:48,791 --> 01:08:51,292
使用该指针，因为自动引用计数

1663
01:08:51,361 --> 01:08:53,694
不会算是一个强有力的参考，而且

1664
01:08:53,763 --> 01:08:55,296
它也不会检查。

1665
01:08:55,364 --> 01:08:58,099
所以如果你使用它，和你指向的东西

1666
01:08:58,168 --> 01:09:01,702
已经离开堆，它会崩溃你的程序。

1667
01:09:01,771 --> 01:09:02,970
所以这就是不了解的。

1668
01:09:03,039 --> 01:09:05,206
现在，由于unown只是崩溃你的程序，如果你

1669
01:09:05,275 --> 01:09:06,474
尝试使用它，它不在堆中，

1670
01:09:06,542 --> 01:09:07,108
它不是可选的。

1671
01:09:07,177 --> 01:09:09,344
没有设置为零，

1672
01:09:09,412 --> 01:09:11,479
总是假定不为零。

1673
01:09:11,548 --> 01:09:12,980
如果没有和

1674
01:09:13,049 --> 01:09:15,716
该代码执行，bam，它崩溃。

1675
01:09:15,785 --> 01:09:17,018
如此无知，

1676
01:09:17,087 --> 01:09:18,987
我会告诉你我们如何在一时间内使用不了解的。

1677
01:09:20,256 --> 01:09:21,890
只能打破周期。

1678
01:09:23,026 --> 01:09:26,927
现在，关闭有一个有趣的属性

1679
01:09:26,996 --> 01:09:29,530
关于他们，希望你在阅读中阅读

1680
01:09:29,599 --> 01:09:32,867
这个任务真的跟这个strong有很多关系，

1681
01:09:32,936 --> 01:09:35,369
weak和unowned 。

1682
01:09:35,438 --> 01:09:38,839
然后封闭物内部发生的是闭包

1683
01:09:38,908 --> 01:09:44,678
捕获其中的所有引用。

1684
01:09:44,747 --> 01:09:48,983
它捕捉到它们，并强力指向他们。

1685
01:09:49,052 --> 01:09:51,219
所以，如果你引用一个封闭的东西，

1686
01:09:51,288 --> 01:09:52,954
记住闭包的是什么。

1687
01:09:53,022 --> 01:09:53,821
打开大括号，和

1688
01:09:53,889 --> 01:09:55,557
我们在那里有一些代码，就像我们在

1689
01:09:57,093 --> 01:09:59,093
我们的计算器脑的操作表。

1690
01:09:59,162 --> 01:10:00,294
所以在这个封闭中，

1691
01:10:00,363 --> 01:10:03,597
在那些花括号内，你引用一些参考类型，

1692
01:10:03,666 --> 01:10:05,066
堆中的东西

1693
01:10:05,135 --> 01:10:07,968
该封闭本身就是一个参考类型。

1694
01:10:08,037 --> 01:10:09,737
它住在堆里

1695
01:10:09,805 --> 01:10:12,573
它会保持strong的指向另一件事。

1696
01:10:12,642 --> 01:10:15,142
问题出在哪里，如果别的东西很强

1697
01:10:15,211 --> 01:10:17,378
指针回到那个闭包。

1698
01:10:17,447 --> 01:10:18,846
因为现在你有一个内存周期。

1699
01:10:18,915 --> 01:10:21,148
闭包将对象保存在该对象中

1700
01:10:21,217 --> 01:10:23,350
有一个指针闭包是保持闭包。

1701
01:10:23,419 --> 01:10:25,119
他们正在保持对方的内存。

1702
01:10:25,188 --> 01:10:27,422
现在他们都不能离开。

1703
01:10:27,490 --> 01:10:31,392
它被称为内存循环，它真的更容易内存

1704
01:10:31,460 --> 01:10:33,928
循环在一个闭包，你会看到。

1705
01:10:33,997 --> 01:10:36,463
所以，这里是我们的计算器的例子。

1706
01:10:36,532 --> 01:10:39,466
假设我给我的计算器脑添加了一种新方法

1707
01:10:39,535 --> 01:10:42,469
addUnaryOperation我允许人们

1708
01:10:42,538 --> 01:10:45,072
在我的操作表中添加新的操作。

1709
01:10:45,140 --> 01:10:47,941
现在我们不允许，因为它都是私人的。

1710
01:10:48,010 --> 01:10:50,344
但是让我们说一个公共方法，addUnaryOperation。

1711
01:10:50,413 --> 01:10:51,846
您可以添加新操作。

1712
01:10:51,914 --> 01:10:52,680
不会那么酷吗？

1713
01:10:53,816 --> 01:10:55,449
是的，那会很酷

1714
01:10:55,518 --> 01:10:56,917
让我们看看它是什么样的

1715
01:10:56,986 --> 01:10:58,953
一个想要的视图控制器

1716
01:10:59,021 --> 01:11:02,523
例如，添加一个平方根的一元操作，但是

1717
01:11:02,592 --> 01:11:04,192
它将显示绿色。

1718
01:11:05,195 --> 01:11:06,794
我称它为绿色平方根。

1719
01:11:06,862 --> 01:11:08,963
那么，写什么样的东西呢？

1720
01:11:09,032 --> 01:11:11,598
那我调用addUnaryOperation，

1721
01:11:11,667 --> 01:11:12,967
给它一些符号。

1722
01:11:13,036 --> 01:11:15,636
我会看起来像一个绿色的平方根，但是

1723
01:11:15,705 --> 01:11:19,139
它推动它在那里，但它是一种什么样子。

1724
01:11:19,208 --> 01:11:21,742
它将通过操作

1725
01:11:21,811 --> 01:11:23,110
绿色平方根。

1726
01:11:23,179 --> 01:11:26,213
在这之前，现在只是一些清理的东西。

1727
01:11:26,282 --> 01:11:28,783
这就是addUnary的操作参数

1728
01:11:28,851 --> 01:11:29,816
操作。

1729
01:11:29,885 --> 01:11:34,755
我们知道，我们可以使用尾随

1730
01:11:34,824 --> 01:11:38,626
闭包语法这里可以摆脱那个操作冒号。

1731
01:11:38,695 --> 01:11:41,328
我们只是关闭它，因为闭包是最后的

1732
01:11:41,397 --> 01:11:43,464
我们只是在括号结束之后加以说明。

1733
01:11:43,533 --> 01:11:46,033
记得从当我谈到过滤器和地图？

1734
01:11:46,102 --> 01:11:48,102
所以我们可以在这里做，以便清理它。

1735
01:11:48,170 --> 01:11:49,871
另外当然，

1736
01:11:49,939 --> 01:11:55,709
我们可以让Swift在这里推断类型，只需使用$0。

1737
01:11:55,778 --> 01:11:57,311
每个人都明白这个代码在这里？

1738
01:11:57,380 --> 01:11:58,446
不能简单，对吧？

1739
01:11:58,514 --> 01:12:01,282
我只是添加这个一元操作，绿色平方根。

1740
01:12:01,350 --> 01:12:03,851
而且它正在做的就是设置，这是我从这里做的

1741
01:12:03,920 --> 01:12:06,387
我的视图控制器，所以它的设置显示颜色

1742
01:12:06,455 --> 01:12:08,021
绿色回归平方根，

1743
01:12:08,090 --> 01:12:10,458
与平方根相同，但显示只是绿色。

1744
01:12:10,527 --> 01:12:11,859
现在，这不会编译。

1745
01:12:13,229 --> 01:12:14,528
为什么这个不能编译？

1746
01:12:14,597 --> 01:12:16,263
让我们看看为什么不。

1747
01:12:16,332 --> 01:12:21,035
这是因为它会说你必须明确地说

1748
01:12:21,103 --> 01:12:25,072
自我点在那里，因为我想让你明白你

1749
01:12:25,141 --> 01:12:32,113
在这个闭包中捕获了一个strong的指针。

1750
01:12:32,181 --> 01:12:37,618
所以在某种程度上你会指出这个闭包，

1751
01:12:37,687 --> 01:12:39,353
我们的视图控制器，

1752
01:12:39,422 --> 01:12:41,388
因为我们的视图控制器有计算器脑，

1753
01:12:41,457 --> 01:12:43,224
计算器脑有操作表，

1754
01:12:43,292 --> 01:12:45,493
操作表中有这个闭包。

1755
01:12:47,630 --> 01:12:49,363
所以我间接指出

1756
01:12:49,432 --> 01:12:52,333
从我的视图控制器，它现在指向我。

1757
01:12:52,401 --> 01:12:54,702
自我点，它会捕获自我。

1758
01:12:54,771 --> 01:12:57,371
自我是一个指向自己的指针，我自己的View Controller。

1759
01:12:57,440 --> 01:12:58,338
现在我创建了一个内存周期。

1760
01:12:58,407 --> 01:13:00,007
是的。

1761
01:13:00,076 --> 01:13:01,476
每个人都明白发生了什么事？

1762
01:13:02,612 --> 01:13:03,810
闭包生活在堆里。

1763
01:13:03,879 --> 01:13:05,279
View Controller驻留在堆中。

1764
01:13:05,347 --> 01:13:06,547
他们现在指着对方。

1765
01:13:07,784 --> 01:13:09,049
闭包直接指向视图

1766
01:13:09,118 --> 01:13:10,717
控制器和视图控制器间接

1767
01:13:10,786 --> 01:13:12,453
指向关闭通过计算器脑，

1768
01:13:12,522 --> 01:13:13,721
通过操作表。

1769
01:13:15,758 --> 01:13:18,092
他们必须加入这个操作。

1770
01:13:18,160 --> 01:13:19,794
所以让我们来谈谈我们如何打破这个周期

1771
01:13:19,862 --> 01:13:20,628
因为是这样的

1772
01:13:20,697 --> 01:13:23,231
很容易做到，我们也需要能够轻松地打破它。

1773
01:13:24,300 --> 01:13:26,167
首先我们要做的，

1774
01:13:26,235 --> 01:13:29,670
我们将要创建一个特殊的局部变量。

1775
01:13:29,738 --> 01:13:32,973
所以闭包允许你在这个词之前，

1776
01:13:33,042 --> 01:13:36,177
放开方括号，列出特殊变量。

1777
01:13:36,245 --> 01:13:38,479
这些只是刚刚生活的局部变量

1778
01:13:38,548 --> 01:13:40,580
这个闭包只有。

1779
01:13:40,649 --> 01:13:42,650
现在这些变量可以有任何名称。

1780
01:13:42,719 --> 01:13:45,353
您可以将它们设置为您想要的任何值

1781
01:13:45,421 --> 01:13:46,554
这里的范围。

1782
01:13:46,623 --> 01:13:48,922
所以我创建了一个局部变量叫我和

1783
01:13:48,991 --> 01:13:50,691
我已经把它设置为等于自我。

1784
01:13:52,128 --> 01:13:54,161
好的，“我”是一个局部变量，

1785
01:13:54,230 --> 01:13:56,430
它将是类型视图控制器，

1786
01:13:56,499 --> 01:13:58,866
它被添加到自己，所以现在我可以使用我在那里和

1787
01:13:58,935 --> 01:14:01,702
你已经使用了自我，所以我已经用自己替代了自己。

1788
01:14:01,771 --> 01:14:03,704
这根本不利于我们的周期。

1789
01:14:03,773 --> 01:14:08,442
但是，如果我把这个变量，

1790
01:14:08,511 --> 01:14:10,711
不是自我，而是我，不知道？

1791
01:14:12,281 --> 01:14:14,615
如果我让这件事情不了解，

1792
01:14:14,683 --> 01:14:17,652
现在不会创建那个strong的指针。

1793
01:14:18,755 --> 01:14:21,488
因为我住在堆里，但是

1794
01:14:21,557 --> 01:14:24,024
自动引用计数不引用计数，所以

1795
01:14:24,093 --> 01:14:25,592
它不重视它。

1796
01:14:25,661 --> 01:14:27,294
现在这样会意味着什么，

1797
01:14:27,363 --> 01:14:30,397
是，如果这段代码被执行，而我，

1798
01:14:30,466 --> 01:14:33,133
这是视图控制器，我设置它等于自我，如果

1799
01:14:33,202 --> 01:14:36,570
视图控制器出了堆，这会崩溃。

1800
01:14:36,639 --> 01:14:37,838
但这是非常好的。

1801
01:14:37,907 --> 01:14:40,207
你知道为什么好吗？

1802
01:14:40,275 --> 01:14:43,511
何时执行计算器操作

1803
01:14:43,580 --> 01:14:45,846
如果视图控制器不在堆中？

1804
01:14:45,914 --> 01:14:46,814
不可能。

1805
01:14:46,882 --> 01:14:49,450
视图控制器提供导致此问题的所有UI

1806
01:14:49,518 --> 01:14:50,284
要执行的事情

1807
01:14:50,353 --> 01:14:52,286
绝对没有办法可以发生，所以

1808
01:14:52,355 --> 01:14:55,122
在这里说不明白是非常好的。

1809
01:14:55,191 --> 01:14:57,891
这样会很好地打破周期。

1810
01:14:57,960 --> 01:15:00,194
但我们来谈谈另一种做法。

1811
01:15:00,263 --> 01:15:02,396
顺便说一下，它不一定被称为'我'，

1812
01:15:02,465 --> 01:15:04,531
我可以说'未知的自我'等于'自我'。

1813
01:15:04,600 --> 01:15:06,600
换句话说，局部变量可以阴影或

1814
01:15:06,669 --> 01:15:09,804
具有与全局变量“self”相同的名称。

1815
01:15:09,872 --> 01:15:11,972
所以我可以说未知的自我等于自我，而且

1816
01:15:12,041 --> 01:15:14,508
事实上，如果我只是说未知的自我是一样的

1817
01:15:14,576 --> 01:15:16,344
说'未知的自我等于自我。

1818
01:15:16,412 --> 01:15:18,245
所以这是很多次，我们如何打破一个循环，

1819
01:15:18,314 --> 01:15:20,815
我们会说未知的自我，这基本上意味着里面

1820
01:15:20,883 --> 01:15:24,385
这个机箱，你可以假定自己在堆里。

1821
01:15:27,356 --> 01:15:29,190
现在我们来谈谈打破它的weak。

1822
01:15:29,259 --> 01:15:32,293
所以我也可以说weak self。

1823
01:15:32,361 --> 01:15:35,062
这意味着self现在是一个局部变量

1824
01:15:35,131 --> 01:15:37,964
闭包这是一个可选的视图控制器。

1825
01:15:38,033 --> 01:15:41,935
如果不是，如果该视图控制器不在堆中，

1826
01:15:42,004 --> 01:15:45,872
这个变量自身与全局cell不同

1827
01:15:45,941 --> 01:15:47,107
将会是零。

1828
01:15:47,176 --> 01:15:48,875
所以这是一个安全的方法。

1829
01:15:48,944 --> 01:15:51,111
由于这是一个可选的，

1830
01:15:51,180 --> 01:15:53,147
我们不能说self.display，

1831
01:15:53,215 --> 01:15:56,617
在那里我们必须说可选的链接self.display。

1832
01:15:56,686 --> 01:15:58,385
所以如果这个闭包执行和

1833
01:15:58,454 --> 01:16:01,288
视图控制器不在堆中，自我问号

1834
01:16:01,357 --> 01:16:04,792
将不会执行该行的其余部分。

1835
01:16:04,860 --> 01:16:06,093
它仍然会返回平方根，

1836
01:16:06,162 --> 01:16:08,695
但它不会因为原因而变成绿色

1837
01:16:08,764 --> 01:16:10,031
这个视图控制器甚至没有。

1838
01:16:11,567 --> 01:16:13,867
所以这就是我们如何利用weak去做。

1839
01:16:13,936 --> 01:16:16,604
有时我们使用weak，我们可以创建其他

1840
01:16:16,672 --> 01:16:18,071
变量，通常我们会这样做。

1841
01:16:18,140 --> 01:16:19,907
这可能是在这里做的最常用的方式，

1842
01:16:19,976 --> 01:16:22,877
就是说weakself等于self。

1843
01:16:22,945 --> 01:16:25,045
所以，wealself就是这个参数，

1844
01:16:25,114 --> 01:16:27,514
这个局部变量只是在闭包的内部

1845
01:16:27,583 --> 01:16:29,216
这是一个weak版本的self。

1846
01:16:30,320 --> 01:16:31,819
好的，这更清楚

1847
01:16:31,888 --> 01:16:33,687
发生了什么事情，而不是说你自己说weakSelf。

1848
01:16:33,756 --> 01:16:36,290
那就像自我是一个可选的，这很奇怪。

1849
01:16:36,358 --> 01:16:37,791
现在至少你有一个不同的变量叫做

1850
01:16:37,860 --> 01:16:40,927
weakSelf，好的。

1851
01:16:40,996 --> 01:16:43,130
好的，让我们在最后几分钟内去

1852
01:16:43,199 --> 01:16:44,464
只需在计算器中执行此操作。

1853
01:16:44,533 --> 01:16:47,334
让我们做我所说的，这个绿色的平方根。

1854
01:16:47,403 --> 01:16:50,437
我要回到我们的计算器。

1855
01:16:50,506 --> 01:16:52,173
我们的计算器在哪里？

1856
01:16:52,241 --> 01:16:53,474
在某处

1857
01:16:53,543 --> 01:16:54,708
在那里

1858
01:16:54,777 --> 01:16:55,943
我们还没有看到这段代码。

1859
01:16:56,011 --> 01:16:57,011
你看过很多了

1860
01:16:57,079 --> 01:16:58,712
我没有看到它在很长一段时间。

1861
01:16:58,781 --> 01:16:59,946
好的，所以这里是我们的计算器

1862
01:17:00,015 --> 01:17:03,483
我告诉你，我只是要添加这个新功能。

1863
01:17:03,552 --> 01:17:05,886
添加一元操作。

1864
01:17:07,023 --> 01:17:11,124
这将是我们的象征

1865
01:17:11,193 --> 01:17:13,660
想要拥有它在这里，所以它会是这样的

1866
01:17:13,729 --> 01:17:16,564
绿色的平方根，或者我们所说的那样。

1867
01:17:16,632 --> 01:17:19,033
实际上，我们可能想说一些像命名的东西

1868
01:17:19,101 --> 01:17:21,902
符号，这可能是一个更好的命名那里，

1869
01:17:21,971 --> 01:17:23,136
这是一个字符串。

1870
01:17:23,205 --> 01:17:25,439
这将会有一个争议，

1871
01:17:25,508 --> 01:17:28,976
让我们在这里做更多的空间，这是操作。

1872
01:17:29,045 --> 01:17:31,111
我们真的不需要有一个外部名称，因为我们是

1873
01:17:31,180 --> 01:17:36,416
可能会使用尾部闭包语法来做到这一点。

1874
01:17:36,485 --> 01:17:39,887
但这只是一个Double，返回一个Double功能。

1875
01:17:39,956 --> 01:17:43,256
希望你现在都很熟悉使用

1876
01:17:43,325 --> 01:17:45,493
一个功能就像一个类型在那里。

1877
01:17:46,829 --> 01:17:48,061
所以我们有这个UnaryOperation。

1878
01:17:48,130 --> 01:17:50,564
我们需要做的是做这项工作

1879
01:17:50,633 --> 01:17:52,366
我们在这里有我们的操作表。

1880
01:17:52,435 --> 01:17:57,304
我只是说这个operations sub that symbol =

1881
01:17:57,373 --> 01:18:00,541
operation

1882
01:18:00,610 --> 01:18:04,978
这个操作是参数。

1883
01:18:05,047 --> 01:18:06,680
我的意思是说它不会简单。

1884
01:18:06,749 --> 01:18:09,383
真的，那是那么简单，因为我们建立了这么好的东西

1885
01:18:09,451 --> 01:18:12,786
数据结构这里存储我们所有的操作。

1886
01:18:12,855 --> 01:18:15,388
现在注意我们在这里有一个错误。

1887
01:18:15,457 --> 01:18:17,424
你看到这有一个错误。

1888
01:18:17,493 --> 01:18:18,124
怎么说？

1889
01:18:18,193 --> 01:18:19,660
标记此方法变异。

1890
01:18:19,729 --> 01:18:20,895
好的，为什么呢？

1891
01:18:20,963 --> 01:18:23,663
那是因为我们正在改变这个操作表

1892
01:18:23,732 --> 01:18:25,499
所以当然必须要变异。

1893
01:18:26,936 --> 01:18:28,635
但这不是唯一的错误，我们还有另一个错误。

1894
01:18:28,704 --> 01:18:29,837
这是什么意思？

1895
01:18:29,906 --> 01:18:33,173
这里说的是这个参数操作

1896
01:18:33,242 --> 01:18:34,508
是“逃脱(escaping)”

1897
01:18:34,577 --> 01:18:38,011
这是什么意思，它逃脱了？

1898
01:18:38,080 --> 01:18:39,613
让我们继续解决它。

1899
01:18:39,682 --> 01:18:43,417
它把这个词放在这里，@escaping。

1900
01:18:43,485 --> 01:18:46,753
Escaping意味着这个功能，

1901
01:18:46,822 --> 01:18:50,558
正在逃过这些花括号。

1902
01:18:52,895 --> 01:18:54,128
实际上逃脱了。

1903
01:18:54,196 --> 01:18:55,362
它在哪里逃脱？

1904
01:18:55,431 --> 01:18:56,497
正在跳进这里

1905
01:18:58,333 --> 01:19:01,602
每当你有一个你通过的功能，和

1906
01:19:01,670 --> 01:19:04,338
它得到了一些其他的数据结构，换句话说，

1907
01:19:04,407 --> 01:19:08,208
它从它所在的方法的大括号中逃出来，

1908
01:19:08,277 --> 01:19:11,344
你必须标记它逃脱，以便你明白和

1909
01:19:11,413 --> 01:19:14,682
快速了解你正在存储那个地方。

1910
01:19:14,750 --> 01:19:16,750
这是因为它可能会创建一个内存周期

1911
01:19:16,818 --> 01:19:18,785
如果你这样做

1912
01:19:18,854 --> 01:19:20,954
所以修复它会自动提醒你这样做

1913
01:19:21,023 --> 01:19:22,790
你不必那么记得。

1914
01:19:22,859 --> 01:19:24,691
我们有这个很棒的新功能

1915
01:19:24,760 --> 01:19:27,962
我们来看我们的视图控制器并添加它。

1916
01:19:28,030 --> 01:19:30,431
嘿，我们如何使用视图加载。

1917
01:19:31,767 --> 01:19:34,201
这里是加载视图，超级点视图加载。

1918
01:19:34,270 --> 01:19:36,002
我从来不想忘记。

1919
01:19:36,071 --> 01:19:38,738
所以这样会发生，我们都被初始化了，

1920
01:19:38,807 --> 01:19:40,140
我们的网点设置好

1921
01:19:40,208 --> 01:19:43,143
让我们继续在这里调用addUnaryOperation。

1922
01:19:43,212 --> 01:19:49,182
让我们称之为大脑addUnaryOperation。

1923
01:19:49,251 --> 01:19:50,984
那是我所说的吗

1924
01:19:51,053 --> 01:19:55,522
addUnaryOperation，我不知道为什么不是，

1925
01:19:55,590 --> 01:19:56,357
在那里它做到了

1926
01:19:57,426 --> 01:19:58,692
这只是一点点慢

1927
01:19:58,760 --> 01:20:03,263
addUnaryOperation将使用命名的符号。

1928
01:20:03,332 --> 01:20:04,631
我要去吧

1929
01:20:04,700 --> 01:20:09,036
做这个绿色的感叹号，如果我能在这里找到它。

1930
01:20:10,005 --> 01:20:11,372
那个东西在哪里？

1931
01:20:13,609 --> 01:20:16,843
这可能是象形文字，也许没有。

1932
01:20:16,912 --> 01:20:18,712
任何人都知道会在哪里？

1933
01:20:18,781 --> 01:20:20,814
我们来试试，叫什么，勾选或者什么。

1934
01:20:20,883 --> 01:20:21,948
在那里

1935
01:20:22,017 --> 01:20:25,152
那里有我们很好的标志

1936
01:20:25,220 --> 01:20:26,953
我们也将其添加到我们的UI中。

1937
01:20:27,022 --> 01:20:28,522
我们来到我们的故事板，

1938
01:20:28,591 --> 01:20:30,824
我们将添加它而不是Pi。

1939
01:20:30,893 --> 01:20:33,661
所以，我们将摆脱Pi，而不是这样

1940
01:20:34,863 --> 01:20:35,830
在那里操作

1941
01:20:37,132 --> 01:20:38,866
又叫什么

1942
01:20:38,935 --> 01:20:39,500
检查。

1943
01:20:41,837 --> 01:20:46,406
哎呀，其中两个。

1944
01:20:46,475 --> 01:20:48,775
我们有了这个新的绿色平方根。

1945
01:20:48,844 --> 01:20:51,144
我们还有旧的平方根。

1946
01:20:51,213 --> 01:20:52,813
但是我们必须添加这个操作

1947
01:20:52,881 --> 01:20:57,550
我将在那里使用该结尾闭包语法。

1948
01:20:57,619 --> 01:21:01,154
当然，我们知道这是double的double。

1949
01:21:01,223 --> 01:21:05,025
这将是那里的东西在那里。

1950
01:21:05,094 --> 01:21:09,830
但是我们可以让Swift推断出这一点，只要使用$ 0，

1951
01:21:09,899 --> 01:21:11,899
平方根$ 0。

1952
01:21:11,968 --> 01:21:15,035
所以我们做了一切，除了绿色。

1953
01:21:15,104 --> 01:21:18,004
大家都同意吗？

1954
01:21:18,073 --> 01:21:21,174
我正在添加名为这个符号的一元操作，这里是

1955
01:21:21,243 --> 01:21:24,578
第二个参数放在尾随闭包处。

1956
01:21:24,647 --> 01:21:25,479
那么我们怎么把它变成绿色？

1957
01:21:25,548 --> 01:21:28,315
嗯，我们只是说display.textColor。

1958
01:21:28,383 --> 01:21:34,121
原来UILabel有一个textcolor= UIColor.green。

1959
01:21:34,190 --> 01:21:36,222
现在，我们把这个放在这里，

1960
01:21:36,291 --> 01:21:37,790
它会抱怨的。

1961
01:21:37,859 --> 01:21:38,792
为什么？

1962
01:21:38,861 --> 01:21:41,428
因为，参考属性显示和

1963
01:21:41,497 --> 01:21:44,097
关闭需要一个明确的自点

1964
01:21:44,166 --> 01:21:47,300
使捕获语义明确。

1965
01:21:47,369 --> 01:21:49,837
这是Swift说的小心点。

1966
01:21:49,905 --> 01:21:53,040
如果你这样做，你将在这里捕捉自己。

1967
01:21:54,243 --> 01:21:56,176
这将创建一个内存周期。

1968
01:21:59,281 --> 01:22:00,714
这个闭包在这里，

1969
01:22:00,782 --> 01:22:03,550
住在堆里，指着自己。

1970
01:22:03,619 --> 01:22:05,786
这个附加操作会导致它，

1971
01:22:05,854 --> 01:22:08,422
这个闭包，放在操作表中就是

1972
01:22:08,490 --> 01:22:09,689
View Controller指出。

1973
01:22:09,758 --> 01:22:12,692
现在他们指着对方。

1974
01:22:12,761 --> 01:22:15,262
我们来看看，还有什么我在这里忘记的。

1975
01:22:15,330 --> 01:22:16,230
缺少回报。

1976
01:22:17,466 --> 01:22:19,065
是。

1977
01:22:19,134 --> 01:22:21,468
返回平方根。

1978
01:22:24,806 --> 01:22:25,772
每个人都很酷吗？

1979
01:22:25,840 --> 01:22:32,513
现在，为了打破这个循环，我们可以说，自己的自我。

1980
01:22:32,581 --> 01:22:34,915
这是打破周期的一种方式。

1981
01:22:34,983 --> 01:22:40,888
我们可以说，weakSelf = self，如果我们这样做

1982
01:22:40,956 --> 01:22:45,491
一个，虽然我们要去这里说weakSelf？

1983
01:22:45,560 --> 01:22:47,026
任何一个都会打破这个周期。

1984
01:22:47,095 --> 01:22:50,597
在你的家庭作业中，我已经更新了你的家庭作业来说你

1985
01:22:50,666 --> 01:22:54,167
在作业中不能有任何这些循环。

1986
01:22:54,236 --> 01:22:56,303
好的，在作业三。

1987
01:22:56,372 --> 01:22:58,572
这是在评估标准。

1988
01:22:58,641 --> 01:23:00,774
所以我把它放在论坛上。

1989
01:23:00,843 --> 01:23:02,109
所以我们来看看这是否有效。

1990
01:23:05,180 --> 01:23:08,248
顺便说一句，如果我们不打破这个周期，会发生什么，

1991
01:23:08,316 --> 01:23:12,019
视图控制器将开始累积在内存中。

1992
01:23:12,088 --> 01:23:13,921
因为他们会保持，

1993
01:23:13,989 --> 01:23:15,956
这些关闭将保持他们的内存。

1994
01:23:16,024 --> 01:23:19,193
例如，如果你有一个CalculatorViewController

1995
01:23:19,261 --> 01:23:22,028
那是被推到你身上的

1996
01:23:22,097 --> 01:23:25,465
然后离开，它不会进出堆，

1997
01:23:25,533 --> 01:23:27,467
在这种情况下，它会保持堆积。

1998
01:23:27,536 --> 01:23:29,736
这里是我们的计算器。

1999
01:23:29,805 --> 01:23:32,906
那么81平方根是9平方根？

2000
01:23:32,975 --> 01:23:33,640
喔喔

2001
01:23:33,709 --> 01:23:34,842
平方根变成绿色。

2002
01:23:36,444 --> 01:23:39,279
好的，就是这样，下次见。

2003
01:23:41,516 --> 01:23:43,784
如果你们有任何问题，我一如以往。

2004
01:23:46,021 --> 01:23:56,629
>>更多，请访问我们的stanford.edu。

