1
00:00:00,401 --> 00:00:04,435
[MUSIC]

2
00:00:04,504 --> 00:00:07,605
斯坦福大学

3
00:00:07,674 --> 00:00:11,109
>> 欢迎来到斯坦福CS193P，

4
00:00:11,178 --> 00:00:14,946
开发iOS应用程序，2017年冬季。

5
00:00:15,015 --> 00:00:18,183
这是9号讲座。

6
00:00:18,252 --> 00:00:20,786
而今天我们只有一个主题是表视图。

7
00:00:20,854 --> 00:00:23,187
我会通过一堆幻灯片来谈论

8
00:00:23,256 --> 00:00:23,989
它的概念。

9
00:00:24,058 --> 00:00:26,992
然后我们将会有一个很棒的演示

10
00:00:27,061 --> 00:00:29,360
我们要建立一个Twitter客户端

11
00:00:29,429 --> 00:00:31,296
它将使用表视图和

12
00:00:31,365 --> 00:00:33,532
我们学到的其他一些东西，如输入框。

13
00:00:34,802 --> 00:00:36,835
和表视图，是什么？

14
00:00:36,903 --> 00:00:40,739
您已经看到各种iOS应用程序中的表视图。

15
00:00:40,807 --> 00:00:43,908
只是这个UI里面有一个事情列表。

16
00:00:43,977 --> 00:00:46,879
表视图有两种不同的外观。

17
00:00:46,947 --> 00:00:48,479
左边那边有那种，

18
00:00:48,548 --> 00:00:50,648
我们称之为普通(plain)风格。

19
00:00:50,717 --> 00:00:53,818
普通的风格只是一个事情的清单。

20
00:00:53,887 --> 00:00:56,721
它可能被收集成小组，如小节。

21
00:00:56,790 --> 00:00:59,291
但它大多只是一个很长的名单。

22
00:00:59,359 --> 00:01:02,660
在右侧，称为分组样式。

23
00:01:02,729 --> 00:01:05,230
表中的哪些部分，

24
00:01:05,299 --> 00:01:08,934
你更明显地彼此断开连接。

25
00:01:09,003 --> 00:01:11,436
他们有你知道，之间的巨大差距。

26
00:01:11,505 --> 00:01:17,943
通常我们用于动态数据的平面样式。

27
00:01:18,011 --> 00:01:20,445
那里可能有任何数量的项目的数据。

28
00:01:20,514 --> 00:01:22,580
我们倾向于用于静态数据的组风格，

29
00:01:22,649 --> 00:01:25,050
在那里我们知道什么行会在那里，

30
00:01:25,119 --> 00:01:28,120
究竟是什么会在他们身上。

31
00:01:28,188 --> 00:01:31,289
所以让我们来谈谈所有部分的名字

32
00:01:31,358 --> 00:01:33,558
一个表视图，所以当我解释这一切，

33
00:01:33,627 --> 00:01:35,461
你会知道什么是术语。

34
00:01:36,563 --> 00:01:38,230
首先我们有一个表头。

35
00:01:38,298 --> 00:01:39,363
这是一个UIView。

36
00:01:39,432 --> 00:01:40,999
只有其中之一。

37
00:01:41,068 --> 00:01:43,135
它在表的最顶端。

38
00:01:43,204 --> 00:01:44,902
这是你在演示中看到的地方，

39
00:01:44,971 --> 00:01:49,040
你可能会放置一个搜索字段或搜索的东西

40
00:01:49,109 --> 00:01:51,009
找到你的表里还有什么东西。

41
00:01:51,078 --> 00:01:53,478
同样地，还有一个页脚视图。

42
00:01:53,546 --> 00:01:54,513
很少看到这个用过。

43
00:01:54,582 --> 00:01:57,749
但它只是一个位于底部的UIView

44
00:01:57,817 --> 00:01:59,301
而在这之间，有这些东西叫做段落。

45
00:01:59,302 --> 00:02:00,786
表中的

46
00:02:00,854 --> 00:02:03,989
所以一个部分只是一个标题和的组合

47
00:02:04,058 --> 00:02:05,857
一个通常是字符串的页脚，但是

48
00:02:05,925 --> 00:02:09,460
也可以是UIViews，然后任意数量的行。

49
00:02:09,529 --> 00:02:10,728
这就是我们所说的一个部分。

50
00:02:10,797 --> 00:02:12,397
那就是那里的一个部分。

51
00:02:12,466 --> 00:02:15,667
这是我拥有的两个部分的部分标题

52
00:02:15,736 --> 00:02:18,537
在这张表中显示，正确的是，它标题为0。

53
00:02:18,605 --> 00:02:20,705
这些都是页脚

54
00:02:20,774 --> 00:02:22,440
我有两个部分。

55
00:02:22,509 --> 00:02:25,310
这两个部分都有相同的数字

56
00:02:25,379 --> 00:02:28,113
每个行中的两个，但是一个部分有一个部分

57
00:02:28,182 --> 00:02:31,583
一百行，一个可以只有1，这是非常好的。

58
00:02:32,786 --> 00:02:36,521
这个权利在这里，我们称之为一个表单元格。

59
00:02:36,589 --> 00:02:39,023
细胞，细胞，这是UIView，

60
00:02:39,092 --> 00:02:40,692
实际上是UITableViewCell，

61
00:02:40,761 --> 00:02:43,495
它是在那里的子类的名称。

62
00:02:43,564 --> 00:02:46,731
这是要绘制数据的东西

63
00:02:46,800 --> 00:02:47,799
特定行。

64
00:02:47,868 --> 00:02:49,467
我们将看看它是如何工作的。

65
00:02:49,536 --> 00:02:52,203
顺便说一下，你可以看到底部的源代码

66
00:02:52,272 --> 00:02:54,005
那种对应于这些东西。

67
00:02:54,074 --> 00:02:57,075
别担心，我会回来给你所有的东西

68
00:02:57,143 --> 00:02:57,976
在后来的幻灯片。

69
00:02:58,045 --> 00:03:01,145
所以这是我们用来命名所有部分的命名

70
00:03:01,214 --> 00:03:03,014
表视图。

71
00:03:03,083 --> 00:03:04,148
这是普通的风格。

72
00:03:04,217 --> 00:03:06,618
所有相同的名字都以组风格工作。

73
00:03:06,687 --> 00:03:08,519
一切都有点不一样。

74
00:03:08,588 --> 00:03:10,088
好的，还有一个标题，页脚，

75
00:03:10,157 --> 00:03:12,123
部分，都一样。

76
00:03:12,192 --> 00:03:14,059
只是一点点不同的UI看。

77
00:03:15,896 --> 00:03:18,930
现在，表可以有段或不可以。

78
00:03:18,999 --> 00:03:20,832
你不必有任何部分，所以

79
00:03:20,900 --> 00:03:25,003
左边的桌子只是一个城市的列表

80
00:03:25,071 --> 00:03:27,205
他们所在的国家只是一个很长的名单。

81
00:03:27,273 --> 00:03:29,307
在右边是同样的列表，但是

82
00:03:29,376 --> 00:03:31,943
你可以看到它们被分为几个部分

83
00:03:32,011 --> 00:03:32,811
按国家，对吗

84
00:03:32,880 --> 00:03:35,213
所以日本那里，墨西哥等

85
00:03:35,282 --> 00:03:37,248
所以部分是可选的，

86
00:03:37,317 --> 00:03:40,318
在选项的情况下不是可选的，但是

87
00:03:40,387 --> 00:03:44,856
您可以拥有或不拥有这些部分，这完全取决于您。

88
00:03:46,160 --> 00:03:51,096
单元格的类型，像每行一样，有四个

89
00:03:51,164 --> 00:03:54,432
有一个预定义的类型，然后有一个自定义类型。

90
00:03:54,501 --> 00:03:57,969
四个预定义的类型是您刚刚获得的副标题

91
00:03:58,037 --> 00:03:58,737
像一个标题和

92
00:03:58,806 --> 00:04:01,773
一个小的文字副标题下面。

93
00:04:01,842 --> 00:04:03,575
默认是一样的，除了

94
00:04:03,643 --> 00:04:05,644
没有小副标题的东西。

95
00:04:05,712 --> 00:04:08,179
值1和值2，就像副标题，

96
00:04:08,248 --> 00:04:10,715
这只是下面的小事情

97
00:04:10,784 --> 00:04:13,218
一个不同的地方，它是蓝色和

98
00:04:13,287 --> 00:04:17,588
在左边，或者有点灰色，但是

99
00:04:17,657 --> 00:04:21,326
我只是在那里布置基本信息。

100
00:04:21,395 --> 00:04:23,995
现在，一个自定义单元格可以有任意UI

101
00:04:24,063 --> 00:04:25,130
在它将像你会看到。

102
00:04:26,533 --> 00:04:30,234
那么我们如何使用表视图？

103
00:04:30,303 --> 00:04:32,070
好的，一个表视图是一个UIView，

104
00:04:32,139 --> 00:04:35,073
我实际上是子类UIScrollView，因为我是

105
00:04:35,141 --> 00:04:38,176
滚动所有这些行。

106
00:04:38,245 --> 00:04:40,495
好吧99％的时间，我们使用特殊的ViewController

107
00:04:40,496 --> 00:04:42,746
所以，要怎么实现呢？

108
00:04:42,816 --> 00:04:45,884
在UIKit中调用UITableViewController。

109
00:04:45,952 --> 00:04:50,922
而UITableViewController只是一个方便的包

110
00:04:50,991 --> 00:04:56,261
使用UITableView，其self.view是一个UITableView。

111
00:04:56,330 --> 00:04:59,063
好的，所以你只能使用一个UITableViewController

112
00:04:59,132 --> 00:05:02,066
当你的整个self.view将被填补

113
00:05:02,135 --> 00:05:04,035
与表视图。

114
00:05:04,104 --> 00:05:06,771
而且你可以通过拖动来添加一个到你的故事板

115
00:05:06,840 --> 00:05:08,139
我们一直在做。

116
00:05:08,208 --> 00:05:09,841
有一个叫Table View Controller的东西

117
00:05:09,910 --> 00:05:10,675
它只是把它拖出来。

118
00:05:10,744 --> 00:05:12,878
现在它是一个控制器，所以当你把它拖出来，

119
00:05:12,946 --> 00:05:14,512
它看起来像一个MVC。

120
00:05:14,581 --> 00:05:16,314
但是在MVC里面，

121
00:05:16,383 --> 00:05:18,316
坐在那里的桌子视图好吗？

122
00:05:18,385 --> 00:05:20,986
所以你在这里看到的控制器，

123
00:05:21,055 --> 00:05:22,420
是一个UITableViewController，

124
00:05:22,489 --> 00:05:26,191
它的self.view是一个UITableView。

125
00:05:26,260 --> 00:05:27,793
好的，UIScrollView的子类。

126
00:05:29,329 --> 00:05:31,662
现在像任何其他ViewController，

127
00:05:31,731 --> 00:05:33,498
如果你要做这件事情，

128
00:05:33,567 --> 00:05:35,400
你需要把它分类吧？

129
00:05:35,469 --> 00:05:37,302
就像你创建一个计算器视图控制器或

130
00:05:37,370 --> 00:05:38,169
图形视图控制器，

131
00:05:38,237 --> 00:05:41,540
你需要子类化你的UITableViewController。

132
00:05:41,608 --> 00:05:43,074
你这样做也是一样吗？

133
00:05:43,142 --> 00:05:44,910
创建新文件。

134
00:05:44,978 --> 00:05:48,146
当然可以是Cocoa Touch Class。

135
00:05:48,214 --> 00:05:50,548
它将成为UITableViewController的子类。

136
00:05:50,617 --> 00:05:51,549
确保你选择了。

137
00:05:51,618 --> 00:05:53,585
不要说它是UIViewController的子类。

138
00:05:53,654 --> 00:05:56,955
它必须是一个子类UITableViewController，如果你

139
00:05:57,023 --> 00:05:59,090
想要它工作。

140
00:05:59,158 --> 00:06:02,660
然后您只需将其设置在身份检查器中

141
00:06:02,729 --> 00:06:03,995
就像任何其他控制器一样，只是它有

142
00:06:03,996 --> 00:06:05,262
成为你的班

143
00:06:05,332 --> 00:06:08,033
作为UITableViewController的子类。

144
00:06:08,101 --> 00:06:11,002
这个UITableViewController子类

145
00:06:11,070 --> 00:06:14,739
也将作为数据源和代理。

146
00:06:14,808 --> 00:06:16,707
好的，数据源只是一种特殊的代理

147
00:06:16,776 --> 00:06:19,010
获取表中的数据。

148
00:06:19,079 --> 00:06:21,045
对于它内部的表视图。

149
00:06:21,114 --> 00:06:23,114
所以，我们会谈谈更多关于这一点

150
00:06:23,183 --> 00:06:24,449
在这里的路上。

151
00:06:24,517 --> 00:06:27,352
顺便说一下，如果您右键单击视图控制器和

152
00:06:27,421 --> 00:06:29,888
你得到那个黑色的窗口来，你可以看到

153
00:06:29,957 --> 00:06:31,623
如果你向下看，

154
00:06:31,691 --> 00:06:33,225
你看到数据源和委托。

155
00:06:33,293 --> 00:06:35,560
他们的属性和他们预先为你连线。

156
00:06:35,628 --> 00:06:37,862
如果你使用这个UITableViewController的东西，

157
00:06:37,930 --> 00:06:39,431
只是预先连线。

158
00:06:39,500 --> 00:06:41,399
控制器是代表和

159
00:06:41,468 --> 00:06:44,335
表视图的数据源。

160
00:06:44,404 --> 00:06:46,304
如果不使用UITableViewController，

161
00:06:46,373 --> 00:06:48,373
顺便说一下，这种预包装的一个？

162
00:06:48,442 --> 00:06:50,375
那么你必须连接数据源

163
00:06:50,443 --> 00:06:52,811
代理，你知道，无论是在代码中说

164
00:06:54,147 --> 00:06:57,215
tableView.delegate = self或类似的东西。

165
00:06:57,283 --> 00:06:59,150
你必须自己做，但99％的时间

166
00:06:59,219 --> 00:07:00,685
只要使用这个UITableViewController。

167
00:07:00,754 --> 00:07:02,921
Cuz通常是桌面视图的最佳UI，适用于

168
00:07:02,989 --> 00:07:05,156
它接管整个屏幕。

169
00:07:05,225 --> 00:07:07,025
为了填满整个屏幕，很少见

170
00:07:07,094 --> 00:07:08,560
在您的屏幕的一部分有一个表视图。

171
00:07:11,497 --> 00:07:14,866
所以你可以编辑表视图本身的属性，

172
00:07:14,935 --> 00:07:16,734
当然，只要点击它就可以了

173
00:07:16,803 --> 00:07:18,670
提升属性检查员。

174
00:07:18,738 --> 00:07:21,172
有一件事对于桌面视图有点令人沮丧

175
00:07:21,241 --> 00:07:24,309
你有表视图单元格，它们是UIViews。

176
00:07:24,377 --> 00:07:26,844
然后你看到它的表格视图

177
00:07:26,913 --> 00:07:27,479
包含在

178
00:07:27,547 --> 00:07:29,147
这也是UIView。

179
00:07:29,215 --> 00:07:31,149
然后你就可以看到桌面视图控制器了。

180
00:07:31,218 --> 00:07:33,651
你想在所有这些事情上设置属性。

181
00:07:33,720 --> 00:07:38,523
所以不要忘了你可以按Ctrl + Shift +左键单击

182
00:07:38,592 --> 00:07:39,424
它会放一个小菜单。

183
00:07:39,492 --> 00:07:41,459
说，好的，你想要什么东西在鼠标下？

184
00:07:41,527 --> 00:07:44,796
你想要单元格，表格视图还是控制器？

185
00:07:44,864 --> 00:07:48,800
所以这将帮助你挖掘你想要的东西。

186
00:07:48,869 --> 00:07:50,368
好的，但一旦你选择了，

187
00:07:50,437 --> 00:07:52,203
无论你想要什么，像TableView或

188
00:07:52,272 --> 00:07:55,506
Controller或Cell，当然可以检查它。

189
00:07:55,575 --> 00:07:59,877
现在，一个重要的事情是这个组风格与普通风格

190
00:07:59,946 --> 00:08:01,045
我一开始就告诉你了。

191
00:08:01,114 --> 00:08:03,648
所以在这里我要把这个是简单的

192
00:08:03,716 --> 00:08:05,182
转到分组。

193
00:08:05,251 --> 00:08:07,352
所以我只是选择分组在那里的风格，

194
00:08:07,421 --> 00:08:08,619
在检查员。

195
00:08:08,688 --> 00:08:11,455
另一个重要的属性是动态与静态。

196
00:08:11,524 --> 00:08:15,259
所以动态是所有的内容都是来自一些数据库。

197
00:08:15,328 --> 00:08:18,363
而静态是，我将把所有的内容放在这里

198
00:08:18,431 --> 00:08:19,698
故事板，好吗？

199
00:08:19,766 --> 00:08:21,199
所以在这里我们将把它切换到静态。

200
00:08:21,267 --> 00:08:25,570
所以这是一个静态的分组表视图。

201
00:08:25,639 --> 00:08:28,205
而且我告诉过你通常静态的表格视图

202
00:08:28,274 --> 00:08:31,509
被分组，通常只有分组的是静态的。

203
00:08:31,577 --> 00:08:33,011
所以通常这些都是一起去的。

204
00:08:33,080 --> 00:08:35,880
他们不需要，他们是分开的属性，但是

205
00:08:35,949 --> 00:08:37,682
他们一般走在一起。

206
00:08:37,750 --> 00:08:41,051
现在这些行的UI大部分时间都是

207
00:08:41,120 --> 00:08:43,921
只需要通过拖动UI来构建。

208
00:08:43,990 --> 00:08:47,759
所以在这里我只是把标签拖到这里，你知道，

209
00:08:47,827 --> 00:08:51,429
也许我会更改标签的名称，拖动UI

210
00:08:51,498 --> 00:08:55,199
切换到那里，我想要设置一些设置。

211
00:08:55,268 --> 00:08:58,569
通常，顺便说一句，这个东西用于设置和

212
00:08:58,638 --> 00:08:59,737
像这样的东西。

213
00:08:59,806 --> 00:09:03,008
然后如果我想和这些交换机通话

214
00:09:03,076 --> 00:09:06,410
我带来的标签，我其实也是

215
00:09:06,479 --> 00:09:09,581
为我的UITableViewController创建出口。

216
00:09:09,649 --> 00:09:12,383
因为这个表中的内容是固定的

217
00:09:12,452 --> 00:09:14,485
所有时间都在故事板上。

218
00:09:14,554 --> 00:09:15,954
我在一个故事板上建造，

219
00:09:16,022 --> 00:09:17,122
这是非常好的

220
00:09:17,190 --> 00:09:20,191
所以我只需Ctrl +拖动到我的控制器，

221
00:09:20,260 --> 00:09:23,061
这将工作，然后我可以创建一个outlet

222
00:09:23,130 --> 00:09:25,730
例如，我的功能启用开关outlet和

223
00:09:25,799 --> 00:09:27,798
它会在这里创建一个outlet。

224
00:09:27,867 --> 00:09:29,134
然后在我的代码和我的控制器中，

225
00:09:29,202 --> 00:09:31,969
我明显可以做任何我想要的切换。

226
00:09:32,038 --> 00:09:35,573
所以，这几乎就像当你有一个静态表视图，它是

227
00:09:35,642 --> 00:09:38,843
几乎就像一个普通的视图，你将构建UI。

228
00:09:38,911 --> 00:09:40,845
只是它分为这些行。

229
00:09:40,913 --> 00:09:42,914
哪个是很喜欢的设置，对吧？

230
00:09:42,983 --> 00:09:45,549
如果你想到设置应用程序，对，

231
00:09:45,618 --> 00:09:46,817
在你的手机上

232
00:09:46,886 --> 00:09:50,355
它有很多UI，在行中是正确的

233
00:09:50,423 --> 00:09:51,356
在表中。

234
00:09:51,424 --> 00:09:53,958
所以，如果你真的想看静态表视图的工作原理，

235
00:09:54,027 --> 00:09:56,493
拿出你的手机，去一般的设置应用程序和

236
00:09:56,562 --> 00:09:57,662
在那里环顾四周。

237
00:09:57,731 --> 00:10:01,232
那就是表视图之后的表视图在表视图之后

238
00:10:01,300 --> 00:10:04,769
这些行是静态地内置在某个故事板的某处

239
00:10:04,838 --> 00:10:05,736
'Apple'.

240
00:10:05,805 --> 00:10:11,075
好的，所以这是静态表的几乎所有。

241
00:10:11,144 --> 00:10:12,776
这些都很简单。

242
00:10:12,845 --> 00:10:14,712
所以我要从这里清除这个UI，

243
00:10:14,780 --> 00:10:17,649
这个功能启用了，那么我们会谈谈

244
00:10:17,717 --> 00:10:21,252
关于一种不同的表视图，这是动态的。

245
00:10:21,321 --> 00:10:24,555
所以一个动态的表格视图，你可以通过选择动态来设置它

246
00:10:24,624 --> 00:10:27,992
属性，原型，而不是静态细胞，

247
00:10:28,060 --> 00:10:30,694
真的是一种完全不同的动物，而且

248
00:10:30,763 --> 00:10:33,798
由于通常是动态的，我会重新回到平淡的风格

249
00:10:33,867 --> 00:10:35,700
表是普通的风格。

250
00:10:35,769 --> 00:10:39,003
现在这些行，而不是你的东西

251
00:10:39,071 --> 00:10:40,338
要建立UI和

252
00:10:40,406 --> 00:10:43,274
它们是静态的，而不是原型。

253
00:10:43,343 --> 00:10:46,043
他们是每一行将被复制的东西。

254
00:10:46,112 --> 00:10:48,813
所以你可以在这些行之一中构建任何UI。

255
00:10:48,882 --> 00:10:50,381
并且您可以构建自定义UI，

256
00:10:50,450 --> 00:10:52,116
就像我们看到的那样静态的。

257
00:10:52,185 --> 00:10:54,518
它将被复制为每一行。

258
00:10:54,587 --> 00:10:55,419
所以这些都是原型。

259
00:10:55,488 --> 00:10:56,721
你看我的原型是什么意思？

260
00:10:56,790 --> 00:10:58,923
它就像一个将被复制的模板

261
00:10:58,992 --> 00:11:02,460
一遍又一遍地做你的桌子。

262
00:11:02,529 --> 00:11:05,162
所以这是一个真正不一样的

263
00:11:05,231 --> 00:11:06,197
看事情的方式

264
00:11:06,266 --> 00:11:08,232
因为这些数据会进入这些行

265
00:11:08,301 --> 00:11:10,969
来自某些数据库可能和某个地方

266
00:11:11,037 --> 00:11:12,403
填写所有这些信息。

267
00:11:12,472 --> 00:11:14,204
所以建立起来有点复杂

268
00:11:14,273 --> 00:11:16,641
这样的桌子，但不是很多。

269
00:11:16,709 --> 00:11:19,977
所以你可以点击任一个单元格

270
00:11:20,046 --> 00:11:21,612
你可以检查一下吧？

271
00:11:21,681 --> 00:11:22,947
你想要的原型。

272
00:11:23,016 --> 00:11:26,250
例如，您可以将其类型从自定义更改

273
00:11:26,319 --> 00:11:27,651
成为副标题

274
00:11:27,720 --> 00:11:29,854
好的，所以这里是一个副标题单元格。

275
00:11:29,923 --> 00:11:31,956
记得我在第二张幻灯片中显示了你，

276
00:11:32,024 --> 00:11:34,391
它是预先罐装的类型之一。

277
00:11:34,460 --> 00:11:35,693
只要你知道，

278
00:11:35,762 --> 00:11:38,463
一个文本字段，像一个较小的文本字段。

279
00:11:38,531 --> 00:11:40,698
所以这是一个副标题。

280
00:11:40,767 --> 00:11:43,535
您也可以随附附件，

281
00:11:43,603 --> 00:11:45,536
一个可以出现在右边的小东西。

282
00:11:45,604 --> 00:11:48,506
它可以是一个打开和关闭的小勾号。

283
00:11:48,575 --> 00:11:49,873
它可能是一个披露指标(disclosure indicator)，

284
00:11:49,942 --> 00:11:52,544
如果点击这一行，你想放在那里

285
00:11:52,612 --> 00:11:53,845
去隔离

286
00:11:53,913 --> 00:11:56,514
好吧，那么少的披露指标只是一点点，

287
00:11:56,583 --> 00:11:58,716
一种灰色的箭头的东西，让用户知道，

288
00:11:58,785 --> 00:12:00,918
嘿，如果我点击这一行，它将要走了。

289
00:12:00,987 --> 00:12:05,423
还有一种称为细节披露的特殊的一种。

290
00:12:05,492 --> 00:12:06,857
而细节披露看起来像这样，

291
00:12:06,926 --> 00:12:08,292
它在一个圈子里有点“我”。

292
00:12:08,361 --> 00:12:10,662
那么真的很酷，你可以走了

293
00:12:10,730 --> 00:12:13,898
点击行，但如果你点击蓝色

294
00:12:13,967 --> 00:12:16,066
我，它做了一个不同的段落。

295
00:12:16,135 --> 00:12:18,169
好的，所以你有这样做有两个不同的行

296
00:12:18,238 --> 00:12:20,438
取决于他们是否碰到小我或者

297
00:12:20,506 --> 00:12:21,573
触摸别的地方

298
00:12:21,641 --> 00:12:24,308
你看到我旁边的小灰箭头？

299
00:12:24,377 --> 00:12:26,277
这是披露指标。

300
00:12:26,346 --> 00:12:28,579
所以如果我点击这一行，它将会消失。

301
00:12:28,648 --> 00:12:29,914
如果我点击小我，

302
00:12:29,982 --> 00:12:32,350
它会做一些不同的segue。

303
00:12:32,418 --> 00:12:34,818
也许提出一些模式面板的一些信息或

304
00:12:34,887 --> 00:12:36,287
这样的东西

305
00:12:36,355 --> 00:12:39,423
我们将在一秒钟内讨论如何工作。

306
00:12:39,492 --> 00:12:41,225
好吧，所以我要回去看看非细节，

307
00:12:41,293 --> 00:12:43,327
去吧，摆脱那个东西。

308
00:12:43,396 --> 00:12:45,997
但除了四个预先罐装之外的另一种风格

309
00:12:46,066 --> 00:12:48,433
我在本讲座开始时谈到的

310
00:12:48,502 --> 00:12:49,834
你可以选择是定制的。

311
00:12:49,902 --> 00:12:53,438
所以习惯意味着，那只是一个UIView，

312
00:12:53,506 --> 00:12:55,606
你可以构建任何你想要的UI。

313
00:12:55,675 --> 00:12:57,842
再次类似于该功能启用

314
00:12:57,911 --> 00:12:59,911
与我显示的开关。

315
00:12:59,979 --> 00:13:01,779
但是再次，这个UI将被复制过来

316
00:13:01,848 --> 00:13:05,550
一遍又一遍

317
00:13:05,618 --> 00:13:07,785
请注意，有多种原型。

318
00:13:07,854 --> 00:13:10,421
这意味着你可以有不同的UI设置

319
00:13:10,489 --> 00:13:13,123
你可以使用不同的行，好吗？

320
00:13:13,192 --> 00:13:15,493
我们将会为这些原型命名

321
00:13:15,562 --> 00:13:18,229
在我们的代码中，我们可以选择我们想要的原型

322
00:13:18,298 --> 00:13:18,996
一排

323
00:13:19,065 --> 00:13:20,632
它将复制该原型。

324
00:13:21,868 --> 00:13:26,237
现在，这些自定义单元格，您可以调整大小。

325
00:13:26,306 --> 00:13:30,508
你可以将东西拖入他们，构建你想要的UI。

326
00:13:30,577 --> 00:13:32,376
在这里，我已经用文本构建了这个复杂的UI

327
00:13:32,445 --> 00:13:33,511
输入框和图像。

328
00:13:33,580 --> 00:13:36,214
这与我将要建立的UI非常相似

329
00:13:36,282 --> 00:13:38,483
好的，现在当你建立这个UI你会想要的

330
00:13:38,484 --> 00:13:40,685
演示。

331
00:13:40,753 --> 00:13:42,519
使用正确的布局。

332
00:13:42,588 --> 00:13:45,589
所以堆叠视图，把它挂在边缘就像你一样

333
00:13:45,658 --> 00:13:48,259
与计算器甚至内部的东西。

334
00:13:48,328 --> 00:13:49,827
今天我会告诉你一点点，

335
00:13:49,896 --> 00:13:51,228
多一点自动布局。

336
00:13:51,297 --> 00:13:54,431
因为如果你这样做，那么表格视图就可以了

337
00:13:54,500 --> 00:13:58,436
弄清楚这件事情需要动态的大小。

338
00:13:58,505 --> 00:14:00,171
好的，如果你不做正确的自动布局，那么你

339
00:14:00,240 --> 00:14:02,273
那种只是要修正行的高度，而且

340
00:14:02,341 --> 00:14:05,109
我也会在一会儿谈论。

341
00:14:05,178 --> 00:14:07,144
所以一般你想做自动布局正确

342
00:14:07,213 --> 00:14:08,445
在那里如果可以的话。

343
00:14:08,514 --> 00:14:11,348
现在我没有办法把这些连线

344
00:14:11,417 --> 00:14:13,184
元素直接送到我的控制器。

345
00:14:13,252 --> 00:14:14,451
你明白为什么吗

346
00:14:14,520 --> 00:14:18,222
因为我的控制器中只有一个outlet

347
00:14:18,291 --> 00:14:19,757
其中一个标签。

348
00:14:19,826 --> 00:14:21,492
但是有数百行。

349
00:14:21,561 --> 00:14:22,794
那么我的一个outlet怎么样？

350
00:14:22,862 --> 00:14:25,997
一次不能连接到100个，好的。

351
00:14:26,066 --> 00:14:28,566
但我仍然需要渠道，因为我会怎么样

352
00:14:28,635 --> 00:14:29,834
设置这些东西？

353
00:14:29,903 --> 00:14:30,968
好的，等等

354
00:14:31,037 --> 00:14:33,538
我们将要处理的方式是我们要打通这些

355
00:14:33,606 --> 00:14:37,474
事情到UITableViewCell的outlet。

356
00:14:37,543 --> 00:14:40,645
包含它们的UIView。

357
00:14:40,714 --> 00:14:42,780
所以我告诉你，这个单元格是一个UIView，

358
00:14:42,848 --> 00:14:46,050
一个UITableViewCell，它包含所有这些东西，

359
00:14:46,119 --> 00:14:47,485
这些标签和东西。

360
00:14:47,554 --> 00:14:48,753
所以，我们会有outlet。

361
00:14:48,821 --> 00:14:50,488
现在这是你第一次见过

362
00:14:50,556 --> 00:14:53,390
除了一个控制器，几乎没有任何东西

363
00:14:53,459 --> 00:14:55,493
这是唯一的其他时间你会有outlet。

364
00:14:55,561 --> 00:14:57,795
您不能有常规视图中的outlet，但是

365
00:14:57,863 --> 00:15:01,699
您可以在这些特殊的表视图单元格中有出口。

366
00:15:01,767 --> 00:15:04,569
好的，所以让我们看看一下这个工作原理。

367
00:15:04,637 --> 00:15:07,238
所以，有一件事，如果你有outlet，

368
00:15:07,306 --> 00:15:09,974
你知道你会需要有子类，对吗？

369
00:15:10,043 --> 00:15:12,476
就像你有一个控制器，你不能使用

370
00:15:12,545 --> 00:15:15,812
一个通用的UIViewController，不能放置任何outlet;

371
00:15:15,881 --> 00:15:19,050
你必须将它们子类化，这样你就可以把它们连线，同样的事情在这里。

372
00:15:19,118 --> 00:15:21,419
你要做一个自定义的子类，

373
00:15:21,488 --> 00:15:22,686
一个UITableViewCell。

374
00:15:22,755 --> 00:15:24,288
你用新文件来做。

375
00:15:24,357 --> 00:15:27,058
它仍然是Cocoa Touch Class，但在这里你会去

376
00:15:27,127 --> 00:15:29,459
选择UITableViewCell作为父类，

377
00:15:29,528 --> 00:15:31,028
不是UITableViewController。

378
00:15:31,096 --> 00:15:32,830
UITableViewCell中。

379
00:15:32,899 --> 00:15:36,400
再次UITableViewCell也是UIView的一个子类，

380
00:15:36,469 --> 00:15:37,619
好的，所以你要选择一个UITableViewCell，

381
00:15:37,620 --> 00:15:38,770
顺便一提。

382
00:15:38,838 --> 00:15:41,605
称之为MyTableViewCell或其他任何东西。

383
00:15:41,674 --> 00:15:43,841
然后你会做同样的事情，你在哪里

384
00:15:43,910 --> 00:15:45,409
会选中该单元格。

385
00:15:45,478 --> 00:15:47,478
你会去身份检查员。

386
00:15:47,547 --> 00:15:49,614
你会改变它是一个通用的

387
00:15:49,683 --> 00:15:51,882
UITableViewCell为MyTableViewCell。

388
00:15:51,951 --> 00:15:54,585
这将允许你创建outlet

389
00:15:54,654 --> 00:15:57,922
在MyTableViewCell中包含的这些东西

390
00:15:57,991 --> 00:15:59,990
在MyTableViewCell内。

391
00:16:00,059 --> 00:16:02,092
好的，现在我们可以把它们连接起来。

392
00:16:02,161 --> 00:16:04,696
所以记住静态元素，

393
00:16:04,764 --> 00:16:06,630
那些我一开始就向你展示的东西，

394
00:16:06,699 --> 00:16:08,533
那些被连接到控制器。

395
00:16:08,601 --> 00:16:11,468
动态元素，我们有这些原型，

396
00:16:11,537 --> 00:16:15,205
那些连接到TableViewCell outlet。

397
00:16:15,274 --> 00:16:18,009
那么它是什么样的连线呢？

398
00:16:18,077 --> 00:16:20,244
我必须和控制器做同样的事情

399
00:16:20,313 --> 00:16:23,781
我将在屏幕上获取UI和代码

400
00:16:23,849 --> 00:16:25,349
同时与助理编辑。

401
00:16:25,418 --> 00:16:29,153
顺便说一下，当你这样做的时候，如果你处于自动模式，

402
00:16:29,221 --> 00:16:30,388
在那里，看到它在哪里说自动？

403
00:16:30,457 --> 00:16:31,722
它指向自动。

404
00:16:31,791 --> 00:16:34,992
即使你有这个UITableViewCell也不会出现

405
00:16:35,061 --> 00:16:37,261
在UI中选择了TableViewCell。

406
00:16:37,330 --> 00:16:39,696
它还会带来控制器，好吗？

407
00:16:39,765 --> 00:16:42,566
所以如果你想连接到TableViewCell的outlet，

408
00:16:42,635 --> 00:16:44,034
你必须手动或

409
00:16:44,103 --> 00:16:46,670
强制得到TableViewCell-不

410
00:16:46,739 --> 00:16:49,840
TableViewController- TableViewCell，在这边。

411
00:16:49,908 --> 00:16:53,044
所以你可以通过从“自动”切换

412
00:16:53,112 --> 00:16:56,146
到手动，然后导航到找到你的

413
00:16:56,215 --> 00:16:58,649
TableViewCell.swift类，对吧？

414
00:16:58,718 --> 00:17:00,017
然后选择。

415
00:17:00,086 --> 00:17:01,052
而现在你在手动模式，

416
00:17:01,121 --> 00:17:02,620
你有右边的TableViewCell，

417
00:17:02,689 --> 00:17:03,987
你的故事板在左边。

418
00:17:04,056 --> 00:17:05,656
所以，现在你可以Ctrl +拖动，对吧？

419
00:17:05,725 --> 00:17:06,991
你只需要Ctrl +拖动即可

420
00:17:07,060 --> 00:17:08,091
他们之间是问题。

421
00:17:08,160 --> 00:17:10,094
所以你必须把它们都放在屏幕上。

422
00:17:10,163 --> 00:17:11,828
好吧，那么一旦我们把它们放在屏幕上，

423
00:17:11,897 --> 00:17:14,965
我Ctrl +拖动，绝对正常。

424
00:17:15,034 --> 00:17:17,167
它会做所有的事情，一个outlet，

425
00:17:17,236 --> 00:17:18,870
它会问我，一个outlet或action。

426
00:17:18,938 --> 00:17:20,337
顺便说一句，你可以在这里做outlet或action。

427
00:17:20,406 --> 00:17:21,371
还要问

428
00:17:21,440 --> 00:17:24,141
所以在这里，我选了那张照片，蓝色的东西。

429
00:17:24,210 --> 00:17:26,043
假设这是一张照片。

430
00:17:26,112 --> 00:17:28,112
我调用给我这张photoImageView。

431
00:17:28,181 --> 00:17:30,081
它在这里创建了一个outlet。

432
00:17:30,149 --> 00:17:31,782
好的，那太好了

433
00:17:31,851 --> 00:17:35,152
现在这个TableViewCell代码可以和那张照片说话。

434
00:17:35,221 --> 00:17:38,055
ImageView可以设置图像或

435
00:17:38,123 --> 00:17:39,122
不管怎么叫他吧。

436
00:17:39,191 --> 00:17:42,360
但是，当然需要知道要提供哪些信息

437
00:17:42,428 --> 00:17:44,829
那张那张照片，对吧？

438
00:17:44,898 --> 00:17:47,765
这件事将重复100次，

439
00:17:47,834 --> 00:17:51,068
每个人都需要知道它的行的照片。

440
00:17:51,136 --> 00:17:54,472
所以你也需要一些公共API

441
00:17:54,540 --> 00:17:58,376
TableViewCell给它需要填写的数据

442
00:17:58,444 --> 00:17:59,643
所有的outlet。

443
00:17:59,712 --> 00:18:02,246
好的，所以你会有一些var，我有

444
00:18:02,315 --> 00:18:06,183
称为infoShownByThisCell，可以是任何您想要的类型。

445
00:18:06,252 --> 00:18:09,319
有人会设置它，你会很快看到谁设置它。

446
00:18:09,388 --> 00:18:11,822
一旦设置好了，现在我们可以更新UI和

447
00:18:11,891 --> 00:18:15,026
把所有这些信息放到outlet。

448
00:18:15,094 --> 00:18:18,028
好的，所以这是每一行的信息

449
00:18:18,097 --> 00:18:21,098
该表将被放入这些UI元素中。

450
00:18:21,167 --> 00:18:23,067
你们跟随我到目前为止

451
00:18:24,804 --> 00:18:28,305
好的，我们来谈谈这两个协议，

452
00:18:28,374 --> 00:18:31,142
数据源(dataSource)和代理(delegate)，好的。

453
00:18:31,210 --> 00:18:33,277
它们对于使UITableView工作至关重要。

454
00:18:33,346 --> 00:18:35,980
UITableView是一个字面上无法运行的类

455
00:18:36,049 --> 00:18:37,915
没有它的数据源和委托(代理)。

456
00:18:37,983 --> 00:18:40,650
这不是真的像分割视图控制器在哪里，呃，你

457
00:18:40,719 --> 00:18:43,454
如果您不想要，不必与代理人做任何事情，

458
00:18:43,523 --> 00:18:44,388
它仍然可以工作。

459
00:18:44,457 --> 00:18:46,022
这个，你真的要做到这一点。

460
00:18:46,091 --> 00:18:47,157
特别是dataSource。

461
00:18:47,226 --> 00:18:49,059
如果你不给它一个数据源，唯一的

462
00:18:49,128 --> 00:18:51,262
方式表视图将工作没有它的代理和

463
00:18:51,330 --> 00:18:53,597
dataSource是纯静态表。

464
00:18:53,666 --> 00:18:55,833
就像启用了该功能的表一样

465
00:18:55,902 --> 00:18:56,467
开关。

466
00:18:56,535 --> 00:18:58,435
你可以处理没有dataSource。

467
00:18:58,504 --> 00:19:00,771
但否则，如果它提供动态数据，

468
00:19:00,840 --> 00:19:01,806
显然需要数据。

469
00:19:01,874 --> 00:19:03,574
而获取数据的唯一方法就是

470
00:19:03,643 --> 00:19:05,042
通过其dataSource。

471
00:19:05,111 --> 00:19:07,745
所以，正如我已经告诉过你，UITableViewController

472
00:19:07,813 --> 00:19:10,848
自动将其自身设置为其委托和dataSource。

473
00:19:10,916 --> 00:19:13,284
所以你可以把代码放在这些委托方法中

474
00:19:13,352 --> 00:19:15,953
在你的UITableViewController的子类中，对吧。

475
00:19:16,021 --> 00:19:21,858
MyTableViewController，或任何，并把它放在那里。

476
00:19:21,927 --> 00:19:25,596
另外，在TableViewController中有一个很酷的var

477
00:19:25,665 --> 00:19:29,633
tableView，这基本上会返回self.view，但是

478
00:19:29,702 --> 00:19:31,034
作为UITableView。

479
00:19:31,103 --> 00:19:34,171
这样你可以和UITableView谈谈你的

480
00:19:34,240 --> 00:19:36,740
UITableViewController正在控制。

481
00:19:36,809 --> 00:19:39,343
那么我们什么时候需要实现dataSource呢？

482
00:19:39,412 --> 00:19:41,812
每当我们有动态数据，非静态。

483
00:19:41,881 --> 00:19:44,748
这里有三个非常重要的方法

484
00:19:44,817 --> 00:19:46,467
一个是，我的表(table)有多少段(section)？

485
00:19:46,468 --> 00:19:48,118
协议。

486
00:19:48,187 --> 00:19:49,654
如果整个事情只是一个可以是一个部分

487
00:19:49,722 --> 00:19:50,221
一堆行。

488
00:19:50,289 --> 00:19:51,521
多少段，和

489
00:19:51,590 --> 00:19:53,691
那么每个部分有多少行？

490
00:19:53,759 --> 00:19:55,359
你会一个一个被问到。

491
00:19:55,428 --> 00:19:56,326
本段有多少行？

492
00:19:56,395 --> 00:19:57,995
本段有多少行？本段有多少？

493
00:19:58,064 --> 00:20:00,231
所以它知道每个部分有多少行。

494
00:20:00,300 --> 00:20:03,200
那么最重要的是给我其中一

495
00:20:03,268 --> 00:20:06,103
UITableViewCell来绘制这个行。

496
00:20:06,172 --> 00:20:09,339
好的，所以对于TableView想要绘制的每一行，

497
00:20:09,408 --> 00:20:11,675
我要问你，好的，现在给我一个UITableViewCell，

498
00:20:11,744 --> 00:20:14,011
cuz我要画这一行。

499
00:20:14,080 --> 00:20:14,978
好的，那就是它的工作原理

500
00:20:15,047 --> 00:20:16,714
从根本上说，这是如何工作的。

501
00:20:16,782 --> 00:20:19,717
现在，所有这些方法都在UITableViewDataSource中

502
00:20:19,785 --> 00:20:20,884
协议。

503
00:20:20,953 --> 00:20:23,420
所以我们来看看最后一个，给我一个UITableViewCell，

504
00:20:23,489 --> 00:20:24,755
这是最复杂的。

505
00:20:24,824 --> 00:20:27,158
其他的是超级，超简单。

506
00:20:27,226 --> 00:20:30,894
所以你要给一个UITableViewCell的方式

507
00:20:30,963 --> 00:20:34,965
回到TableView的时候绘制一定的

508
00:20:35,034 --> 00:20:37,367
行是通过被调用的方法。

509
00:20:37,436 --> 00:20:39,770
现在，你可能会在这里担心，就像哇，

510
00:20:39,839 --> 00:20:43,173
我会有这个大UI，所有这些标签和

511
00:20:43,242 --> 00:20:47,477
我有图像视图，如果我有10万行怎么办？

512
00:20:47,546 --> 00:20:48,846
我要做十万次观看

513
00:20:48,915 --> 00:20:52,115
当然会是糟糕的表现。

514
00:20:52,184 --> 00:20:54,451
事实上，这将是可怕的表现，好的。

515
00:20:54,520 --> 00:20:55,353
观看不便宜。

516
00:20:56,655 --> 00:20:59,957
但不用担心，因为你所有的UITableViewCells，

517
00:21:00,025 --> 00:21:03,861
这些UIViews绘制行，它们被重用。

518
00:21:03,930 --> 00:21:06,897
所以只有可见的有UITableViewCells。

519
00:21:06,966 --> 00:21:09,900
当您滚动时，滚动的顶部

520
00:21:09,969 --> 00:21:13,770
拿起来放在底部使用，好吗？

521
00:21:13,839 --> 00:21:16,340
新数据不断涌入。

522
00:21:16,409 --> 00:21:17,474
明白我说什么了吗?

523
00:21:17,543 --> 00:21:18,876
所以那些细胞，只有，

524
00:21:18,945 --> 00:21:20,845
也许屏幕上的那两个或

525
00:21:20,913 --> 00:21:23,547
其中三个实际上已经创建。

526
00:21:23,616 --> 00:21:24,815
他们只是被重用。

527
00:21:24,884 --> 00:21:26,884
当您上下滚动时，它们会不断重复使用。

528
00:21:28,754 --> 00:21:30,287
现在，关于这个重用的事情，

529
00:21:30,356 --> 00:21:31,422
我要你非常小心。

530
00:21:31,490 --> 00:21:32,255
我把它放在红色

531
00:21:32,324 --> 00:21:34,191
当我把它变成红色，你知道这意味着醒来

532
00:21:34,260 --> 00:21:36,427
注意你的功课。

533
00:21:36,496 --> 00:21:38,795
当你做多线程的东西时，

534
00:21:38,864 --> 00:21:39,530
你一定要小心，

535
00:21:39,599 --> 00:21:42,366
因为当你从你所问的东西回来的时候

536
00:21:42,435 --> 00:21:47,471
在另一个线程上做，你的单元格可能被重用，好的。

537
00:21:47,540 --> 00:21:49,773
所以你必须做好准备。

538
00:21:49,842 --> 00:21:52,609
你必须明白你是否仍然是你的牢房

539
00:21:52,678 --> 00:21:55,346
以为你是当你把东西放进去的时候

540
00:21:55,414 --> 00:21:56,646
另一个线程。

541
00:21:56,715 --> 00:21:58,715
好的，所以我警告你。

542
00:21:58,784 --> 00:22:01,518
那么这个方法看起来像UITableView是什么

543
00:22:01,587 --> 00:22:03,954
要发送到其数据源来说，

544
00:22:04,023 --> 00:22:05,355
给我一个UITableViewCell？

545
00:22:05,424 --> 00:22:08,425
它被称为cellForRowAt indexPath。

546
00:22:08,494 --> 00:22:09,827
你看到它在那里

547
00:22:09,895 --> 00:22:11,094
这是它的签名。

548
00:22:11,163 --> 00:22:14,165
它真的只有一个参数indexPath。

549
00:22:14,233 --> 00:22:16,700
indexPath只是一个容器

550
00:22:16,769 --> 00:22:18,469
段和行。

551
00:22:18,537 --> 00:22:20,704
你可以想象这甚至称为cellForRowAt

552
00:22:20,772 --> 00:22:21,505
section and row。

553
00:22:21,573 --> 00:22:23,974
但它只是把它们放在一个叫做“

554
00:22:24,043 --> 00:22:25,275
一个indexPath，好的

555
00:22:25,344 --> 00:22:27,577
然后你返回的是一个UITableViewCell。

556
00:22:27,646 --> 00:22:30,047
它将使用该UITableViewCell绘制

557
00:22:30,115 --> 00:22:31,048
那行。

558
00:22:31,117 --> 00:22:33,651
所以它真的不能是一个更简单的API。

559
00:22:33,719 --> 00:22:36,687
正是它要求你做的事情的核心。

560
00:22:36,756 --> 00:22:38,555
现在，你该怎么做这个方法？

561
00:22:38,624 --> 00:22:41,859
那么，首先你要从你的数据中获取数据

562
00:22:41,928 --> 00:22:44,628
要在该行中显示的模型。

563
00:22:45,732 --> 00:22:46,463
好的。

564
00:22:46,532 --> 00:22:47,998
你可以这样做你想要的。

565
00:22:48,066 --> 00:22:50,234
我在这里有一个非常方便的数据结构

566
00:22:50,302 --> 00:22:52,569
我的内部数据结构恰好是分开的

567
00:22:52,637 --> 00:22:54,038
在部分和行。

568
00:22:54,107 --> 00:22:55,639
所以我可以索引到它。

569
00:22:55,708 --> 00:22:57,508
但是您可能会有不同的数据结构。

570
00:22:57,576 --> 00:22:59,543
但是你必须把这个部分和第一行放在一起

571
00:22:59,611 --> 00:23:01,912
你知道你正在谈论哪一行，

572
00:23:01,981 --> 00:23:03,347
从您的模型中获取数据。

573
00:23:03,416 --> 00:23:04,949
也许你在做一个数据库查询。

574
00:23:05,017 --> 00:23:07,685
也许你甚至在另一个网络查询

575
00:23:07,753 --> 00:23:10,921
线程，它将要返回并填写，无论如何。

576
00:23:10,989 --> 00:23:12,889
你需要弄清楚如何获取你的数据。

577
00:23:12,958 --> 00:23:15,959
现在，一旦你有了你的数据，你会创建一个单元格。

578
00:23:16,028 --> 00:23:17,328
我会告诉你如何做一秒钟。

579
00:23:17,396 --> 00:23:19,029
然后你只是加载那个单元格

580
00:23:19,098 --> 00:23:19,764
与数据。

581
00:23:21,200 --> 00:23:23,733
所以让我们来谈谈我们如何创建这个单元格

582
00:23:23,802 --> 00:23:24,902
所以我要拿这个小块的代码，

583
00:23:24,903 --> 00:23:26,003
加载它

584
00:23:26,072 --> 00:23:28,605
当我回去看你的时候，我会把它保留在屏幕上

585
00:23:28,674 --> 00:23:31,408
在这里的UI中发生了什么

586
00:23:31,477 --> 00:23:37,147
所以首先让我们谈谈一个不是一个定制单元格的单元格。

587
00:23:37,216 --> 00:23:38,648
它只是一个常规的单元格，如副标题。

588
00:23:38,717 --> 00:23:40,450
你看到副标题吗？

589
00:23:40,519 --> 00:23:43,687
好的，所以我们来使用这个方法

590
00:23:43,756 --> 00:23:47,925
dequeueReusableCell（withIdent- ifier：for：indexPath）。

591
00:23:47,993 --> 00:23:50,461
那只是要给我们一个UITableViewCell。

592
00:23:50,530 --> 00:23:53,630
现在，这是一个重用的UITableViewCell。

593
00:23:53,699 --> 00:23:57,468
好的，被重用，

594
00:23:57,536 --> 00:24:01,438
现在如果这个单元格，如果还没有创建，

595
00:24:01,507 --> 00:24:03,573
那么它将根据你的原型创建一个

596
00:24:03,642 --> 00:24:05,776
无论你在那里选择什么原型。

597
00:24:05,845 --> 00:24:08,979
你用这个字符串选择哪个原型，

598
00:24:09,047 --> 00:24:10,281
标识符字符串

599
00:24:10,349 --> 00:24:13,650
您在该单元格的检查器中。

600
00:24:13,719 --> 00:24:15,652
所以，它只是在那里，它被称为标识符，

601
00:24:15,721 --> 00:24:18,489
右侧的公用事业检查员正在检查该单元格，

602
00:24:18,558 --> 00:24:20,424
标题，副标题，

603
00:24:20,492 --> 00:24:21,258
它正在检查。

604
00:24:21,326 --> 00:24:23,761
我只是设置我的单元格的标识符，所以

605
00:24:23,829 --> 00:24:26,596
现在在我的代码当我说，dequeueReuseableCellwithIdent-

606
00:24:26,665 --> 00:24:30,634
如果我的MyCell，它会制作一个这个原型的副本。

607
00:24:31,737 --> 00:24:33,303
除非有一些被重用，

608
00:24:33,372 --> 00:24:34,638
那么它只会重用它们。

609
00:24:34,706 --> 00:24:36,339
但是，直到它足够重用，

610
00:24:36,408 --> 00:24:37,273
它使用那个原型和

611
00:24:37,342 --> 00:24:39,043
只需要复制它。

612
00:24:40,479 --> 00:24:43,680
现在，这是一个非定制单元格，所以

613
00:24:43,749 --> 00:24:46,149
唯一的，那么你可以设置几个字段。

614
00:24:46,218 --> 00:24:50,787
你可以看看UITableViewCell的API来找出。

615
00:24:50,856 --> 00:24:54,325
但是，单元格，设置这两个文本，标题和

616
00:24:54,393 --> 00:24:55,258
副标题。

617
00:24:55,327 --> 00:24:58,362
你只是，你使用textlabel.text和

618
00:24:58,430 --> 00:25:00,530
detailtextlabel.text。

619
00:25:00,599 --> 00:25:02,399
这些是可选的，所以它们可以是零，

620
00:25:02,468 --> 00:25:04,134
因为如果有一个自定义单元格，for

621
00:25:04,203 --> 00:25:05,469
例如，可能是零。

622
00:25:06,606 --> 00:25:08,472
所以无论如何，只是设置这些，

623
00:25:08,541 --> 00:25:09,673
那些只是UILabels。

624
00:25:09,742 --> 00:25:12,842
所以你只是设置文本，这不容易。

625
00:25:12,911 --> 00:25:13,710
这是真的

626
00:25:13,779 --> 00:25:16,279
所有的预先罐装的，你会设定这些。

627
00:25:16,348 --> 00:25:18,849
实际上，我可以显示它，但也有一个图像，

628
00:25:18,918 --> 00:25:22,419
你可以在单元格中设置一个小图像。

629
00:25:22,488 --> 00:25:23,920
这也是在预先的罐头，

630
00:25:23,989 --> 00:25:25,889
所以你也可以这样做，好吗？

631
00:25:25,957 --> 00:25:28,125
就这样，这只是简单，

632
00:25:28,194 --> 00:25:30,761
这就是您提供数据所需要做的所有工作

633
00:25:30,829 --> 00:25:33,764
到TableViewCell只是出现这些单元格之一。

634
00:25:33,832 --> 00:25:35,599
只是加载它并返回它，和

635
00:25:35,668 --> 00:25:38,868
现在tableView会用它来绘制。

636
00:25:38,937 --> 00:25:41,838
但是让我们来谈谈一个自定义单元格，所以

637
00:25:41,907 --> 00:25:43,974
现在我在谈论第二排。

638
00:25:44,042 --> 00:25:45,342
看它的类型，

639
00:25:45,410 --> 00:25:48,278
它的定制 - 它不是副标题 - 它是自定义。

640
00:25:48,346 --> 00:25:50,647
对于一个自定义单元格来说是不同

641
00:25:50,716 --> 00:25:53,383
你还要做dequeueReusableCellwithIdenti-

642
00:25:53,452 --> 00:25:54,751
对于索引路径，好吗？

643
00:25:54,820 --> 00:25:57,688
但是当然你会使用一个不同的标识符，

644
00:25:57,756 --> 00:26:00,524
现在我正在谈论我的第二个单元格

645
00:26:00,593 --> 00:26:01,758
调用给自定义单元格

646
00:26:01,827 --> 00:26:06,029
现在这里没有第二行的标题和副标题。

647
00:26:06,098 --> 00:26:08,298
大概有这样的图像和

648
00:26:08,366 --> 00:26:10,868
文字下面的东西和文字在一边。

649
00:26:10,937 --> 00:26:12,735
所有的东西，无论你的UI切换，

650
00:26:12,804 --> 00:26:15,138
无论你在这个定制单元格中建立什么

651
00:26:15,207 --> 00:26:18,274
所有这些东西都有网络连接

652
00:26:18,343 --> 00:26:21,879
包含它的UITableViewCell记住我们所做的一切？

653
00:26:21,947 --> 00:26:25,549
所以你需要把数据传递给那个UITableViewCell

654
00:26:25,618 --> 00:26:28,752
它负责加载所有的UI。

655
00:26:28,821 --> 00:26:30,153
现在你怎么做的？

656
00:26:30,222 --> 00:26:31,955
你需要做的第一件事就是把它带出去

657
00:26:32,023 --> 00:26:36,126
回来的东西，它的类型是UITableViewCell。

658
00:26:36,195 --> 00:26:38,895
并用“as”来表示

659
00:26:38,964 --> 00:26:41,765
你的UITableViewCell子类的类型。

660
00:26:41,834 --> 00:26:44,000
否则您将无法调用此API。

661
00:26:44,069 --> 00:26:47,871
好的，所以你要做，如果我能让这个细胞相等

662
00:26:47,940 --> 00:26:50,574
出现的行为是MyTableViewCell。

663
00:26:50,642 --> 00:26:54,444
然后我将使用它的API与MyTableViewCell交谈

664
00:26:54,513 --> 00:26:58,148
并设置，例如infoShownByThisCell为

665
00:26:58,217 --> 00:27:01,084
该行的应用程序的数据。

666
00:27:01,153 --> 00:27:04,087
好的，所以回到我之前展示的代码，

667
00:27:04,156 --> 00:27:07,191
单元格显示的信息就是那个var。

668
00:27:08,928 --> 00:27:11,628
我在MyTableViewCell中公开的var。

669
00:27:11,697 --> 00:27:14,331
然后它将更新UI并设置其所有的outlet和

670
00:27:14,400 --> 00:27:14,931
所有的。

671
00:27:15,000 --> 00:27:16,933
好的，就这样，它是如何工作的。

672
00:27:17,002 --> 00:27:19,236
那两种情况就是这样的，一种是罐装的

673
00:27:19,304 --> 00:27:21,271
定制的。

674
00:27:21,339 --> 00:27:23,540
他们差不多相同，你还在排队，

675
00:27:23,609 --> 00:27:26,676
你只是稍微设置数据。

676
00:27:26,745 --> 00:27:32,149
好的，数据源也必须知道有多少段和

677
00:27:32,218 --> 00:27:32,815
行。

678
00:27:32,884 --> 00:27:33,650
这真的很简单，

679
00:27:33,719 --> 00:27:35,919
在tableView中有一个名为numberOfSections的方法。

680
00:27:35,988 --> 00:27:37,287
这将返回int，

681
00:27:37,356 --> 00:27:38,788
有多少段？

682
00:27:38,857 --> 00:27:39,989
顺便说一句是可选的;

683
00:27:40,058 --> 00:27:41,558
你不必实现那个。

684
00:27:41,626 --> 00:27:43,927
如果你不这样做，它会假设有一个部分，

685
00:27:43,996 --> 00:27:46,629
所有的行都在这个大的部分。

686
00:27:46,698 --> 00:27:49,466
另一个虽然，它是numberOfRowsInSection在哪里

687
00:27:49,535 --> 00:27:50,900
给你一个段号，和

688
00:27:50,969 --> 00:27:53,003
你必须说这个部分有多少行。

689
00:27:53,071 --> 00:27:54,171
这不是可选的，

690
00:27:54,239 --> 00:27:57,140
这是强制性的，你必须回答这个问题

691
00:27:57,208 --> 00:27:59,976
你声称你的桌子的每一个部分

692
00:28:00,045 --> 00:28:03,513
在表中的numberOfSections，好吗？

693
00:28:03,581 --> 00:28:06,450
就这样，这很简单，为什么需要知道如何

694
00:28:06,519 --> 00:28:08,751
很多行和所有的部分，顺便说一下？

695
00:28:08,820 --> 00:28:11,155
Cuz它是一个滚动视图，它需要知道多大的事情，

696
00:28:11,223 --> 00:28:13,457
它需要基本上设置它的内容大小，对吧？

697
00:28:13,525 --> 00:28:15,992
它需要知道它的滚动有多大，所以

698
00:28:16,061 --> 00:28:16,826
它需要知道。

699
00:28:16,895 --> 00:28:20,296
但它也需要知道什么时候要求你的数据和

700
00:28:20,365 --> 00:28:23,066
所有这一切，所以很明显，它需要知道。

701
00:28:23,135 --> 00:28:24,534
在静态表中，

702
00:28:24,603 --> 00:28:26,102
不会问你这些问题。

703
00:28:26,171 --> 00:28:27,437
所以不用担心。

704
00:28:27,506 --> 00:28:29,906
故事板中的静态表是固定的，所以

705
00:28:29,975 --> 00:28:32,142
它从来没有要求你的数据。

706
00:28:32,211 --> 00:28:35,312
所以它永远不会问你有多少行和段

707
00:28:35,381 --> 00:28:37,113
所有的东西都是。

708
00:28:37,182 --> 00:28:39,849
所以总结是你设置tableView的数据源。

709
00:28:39,918 --> 00:28:42,219
如果你使用UITableViewController，那就是自动的。

710
00:28:42,287 --> 00:28:44,888
你实现了numberOfSections和numberOfRowsInSection。

711
00:28:44,957 --> 00:28:47,090
然后你实现cellForRowAt。

712
00:28:47,159 --> 00:28:48,324
并给一个tableView单元格，

713
00:28:48,393 --> 00:28:50,527
无论是自定义子类，如果你做自定义，

714
00:28:50,595 --> 00:28:54,431
或者只是设置详细的文本标签和

715
00:28:54,499 --> 00:28:57,501
那么正常的文字标签如果没有，问题？

716
00:28:57,570 --> 00:28:59,303
好的，所以问题是，我该怎么办？

717
00:28:59,371 --> 00:29:01,972
那段话的数量如果随着时间的推移，

718
00:29:02,041 --> 00:29:03,707
我的tableView正在增长，对吧？

719
00:29:03,775 --> 00:29:05,541
也许数据来自网络，或

720
00:29:05,610 --> 00:29:08,378
用户点击使更多桌面发生的事情。

721
00:29:08,446 --> 00:29:11,948
你可以随时回答不同的，但是

722
00:29:12,017 --> 00:29:15,619
你基本上说的是，如果我的模型改变了怎么办？

723
00:29:15,688 --> 00:29:18,455
我需要我的UI，对，跟上它。

724
00:29:18,524 --> 00:29:21,090
如果我的模型越来越大，那么我需要更多的行。

725
00:29:21,159 --> 00:29:23,960
嗯，你会看到，这真的很重要，

726
00:29:24,029 --> 00:29:25,529
每次你的型号改变，

727
00:29:25,598 --> 00:29:27,697
你需要告诉tableView关于它。

728
00:29:27,766 --> 00:29:28,931
你会告诉它的东西

729
00:29:29,000 --> 00:29:30,667
我添加了一个新的部分。

730
00:29:30,736 --> 00:29:31,501
然后会回来

731
00:29:31,570 --> 00:29:34,404
再次问你所有这些问题，好的。

732
00:29:34,473 --> 00:29:35,839
那么这就是它的工作原理。

733
00:29:35,907 --> 00:29:37,907
可能会回来问你这些问题，包括

734
00:29:37,976 --> 00:29:40,043
cellForRowAt一遍又一遍。

735
00:29:40,112 --> 00:29:42,178
当你告诉你，你已经改变了你的模型。

736
00:29:42,247 --> 00:29:44,047
但当然，您的型号可以随着时间的推移而改变。

737
00:29:46,519 --> 00:29:48,184
顺便说一下，这些部分的标题，

738
00:29:48,253 --> 00:29:50,153
记得当我向你们展示国家，并且有日本和

739
00:29:50,222 --> 00:29:51,220
墨西哥作为标题。

740
00:29:51,289 --> 00:29:53,056
这些被认为是数据的一部分。

741
00:29:53,125 --> 00:29:56,026
所以，这些是UITableViewDataSource的一部分

742
00:29:56,095 --> 00:29:57,193
协议以及。

743
00:29:57,262 --> 00:30:01,164
这个方法标题的页眉或页脚部分，以及

744
00:30:01,232 --> 00:30:02,933
你通过部分号码，它给你的东西。

745
00:30:03,002 --> 00:30:06,002
您还可以使用代理使用视图来执行此操作。

746
00:30:06,071 --> 00:30:07,537
但是如果你想做一个字符串，

747
00:30:07,606 --> 00:30:09,840
你会使用数据源。

748
00:30:09,909 --> 00:30:11,641
协议中还有很多其他的方法。

749
00:30:11,710 --> 00:30:12,776
我不会真的谈论他们，

750
00:30:12,844 --> 00:30:15,278
它们与删除行或

751
00:30:15,347 --> 00:30:18,348
重排排，这样的事情。

752
00:30:18,416 --> 00:30:20,450
如果你的模型允许这些事情发生，

753
00:30:20,519 --> 00:30:21,484
像被删除的东西。

754
00:30:21,553 --> 00:30:23,786
那么你就要教自己了。

755
00:30:23,855 --> 00:30:26,089
大多数人可能会最终这样做

756
00:30:26,158 --> 00:30:27,157
你最后的项目。

757
00:30:27,225 --> 00:30:28,692
我不会要求你做功课，但是

758
00:30:28,761 --> 00:30:30,093
你可能会为你的最后一个项目做。

759
00:30:30,161 --> 00:30:31,360
在作业中额外的功劳，

760
00:30:31,429 --> 00:30:34,130
如果你想得到一个开始。

761
00:30:34,199 --> 00:30:36,733
好的，我们来谈一谈。

762
00:30:36,802 --> 00:30:38,234
所以我有一排在那里，好的，

763
00:30:38,303 --> 00:30:41,270
这个实际上也有一个细节披露。

764
00:30:41,339 --> 00:30:44,474
我想从那个事情中消失，怎么办？

765
00:30:45,511 --> 00:30:46,409
很简单，

766
00:30:46,478 --> 00:30:49,179
就像任何其他的从按钮中删除的那样做。

767
00:30:49,248 --> 00:30:53,483
我只需要Ctrl +拖动从行到我想要的MVC

768
00:30:53,551 --> 00:30:54,318
断断续续

769
00:30:54,386 --> 00:30:56,386
而且这个黑色的窗户将会放下。

770
00:30:56,454 --> 00:30:57,187
现在，这个黑色的窗户

771
00:30:57,256 --> 00:30:58,622
与其他部分有点不同。

772
00:30:58,690 --> 00:31:02,459
因为你看到它有两个部分，选择Segue和

773
00:31:02,528 --> 00:31:04,761
配件动作好吗？

774
00:31:04,830 --> 00:31:07,697
所以选择Segue是他们点击行和

775
00:31:07,766 --> 00:31:09,099
附件操作是他们点击

776
00:31:09,168 --> 00:31:10,234
小配件按钮。

777
00:31:12,303 --> 00:31:16,639
但这只是一个正常的阶段，一旦你创建了segue，

778
00:31:16,708 --> 00:31:20,109
您可以点击它并检查它。

779
00:31:20,178 --> 00:31:21,778
就像其他任何一样，

780
00:31:21,847 --> 00:31:24,848
您可以将其标识符设置到某处。

781
00:31:24,917 --> 00:31:26,683
然后你会准备赛车。

782
00:31:26,752 --> 00:31:30,053
所以，这里我将标识符设置为AbcSegue。

783
00:31:30,122 --> 00:31:32,088
所以让我们来看看准备什么

784
00:31:32,157 --> 00:31:35,092
segue看起来像是在做这样的事情。

785
00:31:35,160 --> 00:31:36,893
看起来几乎完全一样，

786
00:31:36,961 --> 00:31:38,761
这里我有一个准备segue。

787
00:31:38,830 --> 00:31:40,964
我注意到发件人有Any。

788
00:31:41,033 --> 00:31:43,200
当你进入tableView时，

789
00:31:43,269 --> 00:31:45,836
你认为“任何”会是什么？

790
00:31:45,904 --> 00:31:49,272
UITableViewCell，好的，包含该行的视图。

791
00:31:49,340 --> 00:31:51,008
所以这将是发件人。

792
00:31:52,577 --> 00:31:53,710
就像一个按钮是发件人

793
00:31:53,779 --> 00:31:55,812
如果你点击一个按钮来排除，那行，

794
00:31:55,881 --> 00:31:58,382
在这种情况下，UITableViewCell是发件人。

795
00:32:00,085 --> 00:32:01,785
所以你会想要的第一件事

796
00:32:01,853 --> 00:32:04,554
做的是将发送方转换为TableViewCell。

797
00:32:04,623 --> 00:32:08,191
特别是你的子类或表视图单元格。

798
00:32:08,260 --> 00:32:11,327
如果你有一个自定义单元格，以防万一你想

799
00:32:11,396 --> 00:32:13,830
做任何特定于您的TableView单元格。

800
00:32:13,898 --> 00:32:17,534
如果没有，那么你可以做到UITableViewCell。

801
00:32:17,603 --> 00:32:20,570
然后你想得到该单元格的索引路径

802
00:32:20,638 --> 00:32:23,272
你知道你在哪里排队。

803
00:32:23,341 --> 00:32:25,975
因为每一行，你可以点击它，它会消失。

804
00:32:26,044 --> 00:32:27,410
所以，你需要知道哪一行。

805
00:32:27,479 --> 00:32:31,547
你这样做

806
00:32:31,616 --> 00:32:34,083
你不能通过，你必须通过

807
00:32:34,152 --> 00:32:37,754
UITableViewCell或其子类，indexPath(for：cell)。

808
00:32:37,823 --> 00:32:39,289
现在，我会给你一个索引路径

809
00:32:39,357 --> 00:32:42,492
还记得吗

810
00:32:42,561 --> 00:32:44,660
和行。

811
00:32:44,729 --> 00:32:48,398
然后，你会像往常一样得到你的seguedToMVC。

812
00:32:48,467 --> 00:32:53,069
而您将准备您的Segue到公共API，和

813
00:32:53,137 --> 00:32:56,739
您将使用您的模型中的数据来执行此操作

814
00:32:56,808 --> 00:32:59,776
在被点击的部分和行上。

815
00:33:01,446 --> 00:33:02,812
知道了吗？

816
00:33:02,881 --> 00:33:04,614
很容易从它脱离。

817
00:33:06,118 --> 00:33:07,750
那么是的，你会使用你的公开API

818
00:33:07,819 --> 00:33:08,585
转到MVC。

819
00:33:09,688 --> 00:33:11,321
表视图的代表如何？

820
00:33:11,390 --> 00:33:12,222
我们谈论了数据

821
00:33:12,290 --> 00:33:13,890
源;表视图的代理如何？

822
00:33:13,958 --> 00:33:15,592
它有一种杂项

823
00:33:15,660 --> 00:33:18,194
一些东西在那里，但一般代理

824
00:33:18,263 --> 00:33:21,030
正在谈论如何显示表视图，以及

825
00:33:21,099 --> 00:33:24,967
数据源是表中实际的数据。

826
00:33:25,036 --> 00:33:25,769
好的，这是有区别的。

827
00:33:25,837 --> 00:33:30,039
所以我们在谈论事情的代理，

828
00:33:30,108 --> 00:33:31,574
是的，他们通常是同一个对象。

829
00:33:31,643 --> 00:33:36,246
所以代表也有所有的意志，做，应该的事情。

830
00:33:36,314 --> 00:33:38,448
你可以看看桌面视图中发生了什么。

831
00:33:38,516 --> 00:33:40,750
这行确实得到了选择，这样的事情。

832
00:33:40,819 --> 00:33:44,988
例如，这里是表视图目标操作，所以

833
00:33:45,057 --> 00:33:47,356
如果你点击一行，如果你不想要一个segue，但是

834
00:33:47,425 --> 00:33:49,859
你只是想像一个按钮的目标动作，

835
00:33:49,928 --> 00:33:50,960
你真的不能这么做。

836
00:33:51,029 --> 00:33:53,163
您不能执行目标操作，因为行不是

837
00:33:53,232 --> 00:33:54,030
一个UIButton。

838
00:33:54,099 --> 00:33:56,766
但是可以实现这个委托方法tableView

839
00:33:56,835 --> 00:33:58,801
didSelectRowAt indexPath。

840
00:33:58,870 --> 00:34:00,736
当有人碰到这一行时，

841
00:34:00,805 --> 00:34:02,104
这将被打来。

842
00:34:02,173 --> 00:34:03,506
所以，就像目标动作一样。

843
00:34:03,575 --> 00:34:05,542
它告诉你发生了什么事。

844
00:34:05,610 --> 00:34:08,211
所以，现在可以看看section中的索引路径行

845
00:34:08,280 --> 00:34:11,681
知道哪一行被选中，所以我们称之为目标动作。

846
00:34:11,750 --> 00:34:13,550
你对这个细节做了同样的事情

847
00:34:13,618 --> 00:34:14,551
披露方式。

848
00:34:14,619 --> 00:34:17,119
所以我将点击我们将要详细披露的内容

849
00:34:17,188 --> 00:34:18,889
在你的委托中得到这个方法

850
00:34:18,957 --> 00:34:22,058
accessoryButtonTappedForRow-使用indexPath。

851
00:34:22,127 --> 00:34:23,560
好的，现在你知道那一行。

852
00:34:23,628 --> 00:34:26,162
所以当点击的时候，你可以使用segue或

853
00:34:26,230 --> 00:34:28,898
你可以用这些来找出点击的东西

854
00:34:28,966 --> 00:34:29,699
做你想做的。

855
00:34:31,136 --> 00:34:33,135
那么是的，很多意志和骰子以及所有这些东西。

856
00:34:33,204 --> 00:34:35,137
您可以查看文档

857
00:34:35,206 --> 00:34:37,340
的UITableViewDelegate。

858
00:34:37,408 --> 00:34:39,142
现在回到这个家伙以前问过什么。

859
00:34:39,210 --> 00:34:40,710
如果我的模型改变会怎么样？

860
00:34:40,778 --> 00:34:41,444
它变大了

861
00:34:41,512 --> 00:34:43,279
或者甚至变得更小还是更小？

862
00:34:43,348 --> 00:34:45,949
你可以做的一件事是一种锤子

863
00:34:46,018 --> 00:34:47,850
reloadData。

864
00:34:47,919 --> 00:34:50,286
如果您在表视图上重新加载数据，那么它将被调用

865
00:34:50,355 --> 00:34:51,988
所有的数据源方法再次。

866
00:34:52,056 --> 00:34:54,257
你有多少个部分，每个部分有多少行？

867
00:34:54,325 --> 00:34:56,158
给每个可见行的单元格。

868
00:34:56,227 --> 00:34:56,759
你懂我的意思么？

869
00:34:56,828 --> 00:34:58,695
这将要重新整理一遍。

870
00:34:58,763 --> 00:35:01,230
这是一个锤子，因为如果你只知道你

871
00:35:01,299 --> 00:35:03,599
改了一段好吗？

872
00:35:03,668 --> 00:35:06,169
那么你可以调用类似reloadRows(at

873
00:35:06,237 --> 00:35:07,403
indexPaths ...)。

874
00:35:07,472 --> 00:35:09,939
而indexPath会告诉各部分和行。

875
00:35:10,008 --> 00:35:11,474
有一些动画。

876
00:35:11,543 --> 00:35:14,677
动画可以像淡入淡出

877
00:35:14,746 --> 00:35:17,614
从底部滑下或类似的东西。

878
00:35:17,683 --> 00:35:19,349
所以有更轻的重量你可以叫。

879
00:35:19,417 --> 00:35:20,716
我实际上会在演示中显示你，

880
00:35:20,785 --> 00:35:23,720
我们来调用给我们，我们来告诉你们

881
00:35:23,788 --> 00:35:26,122
表格视图我们插入了一个部分

882
00:35:26,191 --> 00:35:28,657
它会马上就问我

883
00:35:28,726 --> 00:35:32,294
关于该部分的数据源消息，没有其他的。

884
00:35:32,363 --> 00:35:35,531
所以你需要告诉表视图

885
00:35:35,600 --> 00:35:37,667
每次你改变你的模型。

886
00:35:37,736 --> 00:35:38,601
如果你改变你的模型

887
00:35:38,670 --> 00:35:41,404
以任何方式改变部分和行的数量。

888
00:35:41,473 --> 00:35:42,672
或者甚至显示一行，

889
00:35:42,741 --> 00:35:44,708
你需要告诉表视图。

890
00:35:44,776 --> 00:35:46,242
所以，只要你一直在想

891
00:35:46,311 --> 00:35:47,210
写表视图代码。

892
00:35:47,279 --> 00:35:49,679
更改我的模型，告诉表视图。

893
00:35:49,748 --> 00:35:50,379
马上。

894
00:35:50,448 --> 00:35:52,215
你想立即告诉表视图。

895
00:35:52,283 --> 00:35:54,684
首先改变你的模型，然后改变你的表视图。

896
00:35:54,753 --> 00:35:55,852
因为当你告诉你的表视图

897
00:35:55,920 --> 00:35:58,588
事情发生了变化，所以会回去问你

898
00:35:58,656 --> 00:36:00,357
对于IndexPath，段数，

899
00:36:00,425 --> 00:36:02,725
它会问你这些问题，其中一些问题。

900
00:36:02,794 --> 00:36:04,593
所以确保你的模型已经改变了

901
00:36:04,662 --> 00:36:06,996
准备回答这些问题。

902
00:36:07,065 --> 00:36:08,932
谈论行的高度。

903
00:36:10,501 --> 00:36:11,334
行的高度

904
00:36:11,403 --> 00:36:13,702
通常设置在故事板中。

905
00:36:13,771 --> 00:36:17,373
所以你可以调整它的大小，并设置它，这是什么，但是

906
00:36:17,442 --> 00:36:20,110
你也可以问代理。

907
00:36:20,178 --> 00:36:22,845
您还可以在代理中实施一个方法

908
00:36:22,914 --> 00:36:25,915
它会问代理，这行应该有多高？

909
00:36:25,984 --> 00:36:28,784
这可能在您的家庭作业中非常有用。

910
00:36:28,853 --> 00:36:31,688
但是这是你的时候

911
00:36:31,757 --> 00:36:34,991
以某种计算方式更改高度的行。

912
00:36:36,228 --> 00:36:37,393
也许你有一个形象在那里，和

913
00:36:37,462 --> 00:36:41,097
例如，它有不同的宽高比。

914
00:36:41,165 --> 00:36:43,266
所以有时它是不同的高度，无论如何。

915
00:36:43,335 --> 00:36:44,901
所以你可以这样回答。

916
00:36:46,304 --> 00:36:48,304
当然，另一种方式可以控制高度

917
00:36:48,373 --> 00:36:50,440
是做自动布局，和

918
00:36:50,509 --> 00:36:53,443
将您的身高设为自动尺寸。

919
00:36:53,512 --> 00:36:56,780
如果将您的高度设置为UITableViewAutomaticDimension，

920
00:36:56,848 --> 00:37:00,450
这意味着要从汽车布局中找出来。

921
00:37:00,518 --> 00:37:02,051
那么那三个就是你可以设置的高度。

922
00:37:02,120 --> 00:37:05,554
把它固定在故事板上，回答这个代理

923
00:37:05,623 --> 00:37:07,657
方法这里，heightForRowAt indexPath，

924
00:37:07,726 --> 00:37:10,092
或将其设置为自动维度。

925
00:37:10,161 --> 00:37:13,863
如果你做自动方式，那么你也可能想要

926
00:37:13,932 --> 00:37:16,232
设置估计的行高。

927
00:37:16,301 --> 00:37:19,302
这只是告诉表视图从自动布局计算但是

928
00:37:19,370 --> 00:37:22,238
对于所有这些单元格，不是100,000个单元格

929
00:37:22,306 --> 00:37:26,075
在屏幕上，请勿对100,000个单元格进行自动布局。

930
00:37:26,144 --> 00:37:28,711
只是估计他们是关于这一点，当他们开始来

931
00:37:28,780 --> 00:37:30,846
在屏幕上，它会做自动布局和

932
00:37:30,915 --> 00:37:33,749
选择正确的高度好吧。

933
00:37:33,818 --> 00:37:35,118
所以这就是为什么你需要估计。

934
00:37:35,186 --> 00:37:36,419
还有一个微妙的方法，

935
00:37:36,488 --> 00:37:39,856
估计每行的高度在任何。

936
00:37:39,924 --> 00:37:42,892
所以在表视图中也有几十种方法。

937
00:37:42,961 --> 00:37:45,795
不在代表中，而是在表视图中。

938
00:37:45,864 --> 00:37:48,597
您可以滚动到一行，这是滚动视图。

939
00:37:48,666 --> 00:37:49,632
它知道如何做滚动。

940
00:37:49,701 --> 00:37:53,002
您可以控制外观，行之间的分隔符。

941
00:37:53,071 --> 00:37:54,003
所有这些事情。

942
00:37:54,071 --> 00:37:56,406
所以你一定要熟悉一下自己

943
00:37:56,475 --> 00:37:58,708
与表视图API本身。

944
00:37:58,777 --> 00:37:59,508
不要忘记这一点。

945
00:37:59,577 --> 00:38:02,478
好的，所以我不会回到这张幻灯片。

946
00:38:02,547 --> 00:38:04,881
所以只要给你一个快速来这里。

947
00:38:04,949 --> 00:38:06,382
周五我们收集了收藏。

948
00:38:06,451 --> 00:38:08,551
所以收集视图与表格视图非常相似，

949
00:38:08,620 --> 00:38:11,454
但布局不一定要在严格的表中。

950
00:38:11,522 --> 00:38:13,689
它可以是任何你想要的方式。

951
00:38:13,758 --> 00:38:15,691
但是它是同样的事情有数据和

952
00:38:15,760 --> 00:38:18,561
它会问你有多少节，多少行，

953
00:38:18,629 --> 00:38:21,430
那段不是行，而是那个部分的项目，那么它将会有

954
00:38:21,499 --> 00:38:23,633
这个小的额外的机制做一个布局。

955
00:38:23,702 --> 00:38:24,601
所以真的很棒

956
00:38:24,669 --> 00:38:26,836
我很乐意在不在的讲座中教授它

957
00:38:26,905 --> 00:38:29,438
可选部分，但我在这方面有很多教训

958
00:38:29,507 --> 00:38:32,142
当然你真的需要先了解TableView，

959
00:38:32,210 --> 00:38:34,210
这是一个更简单的，在你可以移动之前

960
00:38:34,279 --> 00:38:36,379
CollectionView-但真的不要错过星期五。

961
00:38:36,448 --> 00:38:40,282
这将是一个真正更强大的好方法

962
00:38:40,351 --> 00:38:42,719
数据呈现UI。

963
00:38:42,787 --> 00:38:45,221
然后下周我们会谈谈Core Data，

964
00:38:45,289 --> 00:38:47,756
这是iOS中面向对象的数据库，

965
00:38:47,825 --> 00:38:49,959
真正强大的机制。

966
00:38:50,028 --> 00:38:52,995
现在，我要做一个很大的演示

967
00:38:53,064 --> 00:38:54,730
如何做所有这些TableView的东西和

968
00:38:54,799 --> 00:38:56,999
还有TextField和其他一些东西。

969
00:38:57,068 --> 00:38:58,634
你的作业4出来了，

970
00:38:58,703 --> 00:39:01,537
这是在星期三的一周内到期的

971
00:39:01,606 --> 00:39:05,241
基本上要采取我今天做的，建立一个更好的。

972
00:39:05,310 --> 00:39:07,343
更多功能完整

973
00:39:07,412 --> 00:39:08,210
所以这就是为什么你

974
00:39:08,279 --> 00:39:10,780
总是想了解我正在做的讲座，因为

975
00:39:10,848 --> 00:39:13,115
我几乎总是只是要求你做同样的事情。

976
00:39:13,184 --> 00:39:14,984
好吧，我要完全建立

977
00:39:15,053 --> 00:39:16,286
从零开始的新应用程序

978
00:39:16,354 --> 00:39:18,554
就像我之前说过的，它将成为Twitter客户端。

979
00:39:18,623 --> 00:39:21,790
我们要做Twitter搜索。

980
00:39:21,859 --> 00:39:23,927
它将是一个单一的视图应用程序。

981
00:39:23,995 --> 00:39:26,079
我会把它称为Smashtag，就像主题标签那样。

982
00:39:26,080 --> 00:39:28,164
老样子啊~~

983
00:39:28,233 --> 00:39:30,099
这将是一个iPhone专用的应用程序。

984
00:39:30,168 --> 00:39:32,034
这也是你的作业也是如此。

985
00:39:32,103 --> 00:39:34,570
好吧，只有iPhone，我们不会做一个iPad的事情。

986
00:39:34,639 --> 00:39:36,439
你已经学会了与作业三。

987
00:39:36,508 --> 00:39:39,208
试图保持你正在学习的东西

988
00:39:39,277 --> 00:39:41,243
与每一个尽可能的新。

989
00:39:41,312 --> 00:39:44,113
我会把它放在我总是放在一切的地方。

990
00:39:44,182 --> 00:39:47,350
在这里我们去，我会把这些东西摆脱掉

991
00:39:47,419 --> 00:39:50,120
在这里，我们并没有真正使用很多。

992
00:39:50,188 --> 00:39:52,955
其实我会离开plist，你会看到。

993
00:39:53,024 --> 00:39:57,427
新组，我们将在此支持文件

994
00:39:57,495 --> 00:39:59,428
我会把它放下。

995
00:39:59,497 --> 00:40:02,498
现在我要从这里开始我的故事板

996
00:40:02,567 --> 00:40:04,167
只是完全擦掉它。

997
00:40:04,235 --> 00:40:06,402
好吧，我要拿一个我掌握的控制器，

998
00:40:06,470 --> 00:40:07,670
免费的，只是删除它。

999
00:40:07,738 --> 00:40:09,939
我甚至会在这里转过这个代码

1000
00:40:10,008 --> 00:40:12,408
删除，在同样的事情，我在最后一个演示。

1001
00:40:12,477 --> 00:40:14,344
Cuz我不需要任何的，

1002
00:40:14,412 --> 00:40:17,212
我将从头开始。

1003
00:40:17,281 --> 00:40:18,748
所以，我们正在构建一个表视图应用程序

1004
00:40:18,817 --> 00:40:21,551
我们来看一下表格，我会在这里滚下来。

1005
00:40:21,620 --> 00:40:24,287
这里是一个表视图，我只是把它拖出来。

1006
00:40:24,355 --> 00:40:28,558
现在这个表视图，如果我们想用它作为代理和

1007
00:40:28,627 --> 00:40:31,260
数据源，或者如果我们想要有outlet，我们，

1008
00:40:31,329 --> 00:40:32,795
当然需要一个子类。

1009
00:40:32,864 --> 00:40:37,533
所以让我们继续这样做，新建>文件，好吧。

1010
00:40:37,602 --> 00:40:40,102
它将成为Cocoa Touch子类，

1011
00:40:40,171 --> 00:40:42,471
即UITableViewController。

1012
00:40:42,540 --> 00:40:45,374
我会把它叫做我的TweetTableViewController，

1013
00:40:45,443 --> 00:40:47,510
因为它会显示推文。

1014
00:40:47,578 --> 00:40:49,812
好的，我会很小心地把它放在这里，

1015
00:40:49,881 --> 00:40:52,215
不在我的项目的顶层。

1016
00:40:53,584 --> 00:40:56,185
在这里我们去，这里是我们的代码在这里。

1017
00:40:56,254 --> 00:40:59,656
我将删除此View Controller生命周期

1018
00:40:59,724 --> 00:41:00,656
东西，像往常一样。

1019
00:41:00,725 --> 00:41:02,124
但是你会注意到TableViewController

1020
00:41:02,193 --> 00:41:03,826
还有一些额外的东西。

1021
00:41:03,895 --> 00:41:06,629
你认识到这些方法，numberOfSections，好的，

1022
00:41:06,697 --> 00:41:10,133
numberOfRowsInSection和cellForRowAt indexPath。

1023
00:41:10,202 --> 00:41:15,604
这些是关键的UITableViewDataSource

1024
00:41:15,673 --> 00:41:17,674
方法在这里

1025
00:41:17,742 --> 00:41:20,476
现在还有一些其他的UITableViewDataSource

1026
00:41:20,545 --> 00:41:22,678
这里的方法也是这些

1027
00:41:22,747 --> 00:41:25,181
像删除行，移动行。

1028
00:41:25,250 --> 00:41:27,149
所以当你在做额外的信用，或者

1029
00:41:27,218 --> 00:41:28,817
当你做最后的项目时，

1030
00:41:28,886 --> 00:41:30,486
你将不想删除那些。

1031
00:41:30,555 --> 00:41:34,390
但是我会删除那些只是让我们的代码一点点

1032
00:41:34,459 --> 00:41:36,359
这里更清洁

1033
00:41:36,428 --> 00:41:37,893
这就是我们的UITableViewController

1034
00:41:37,962 --> 00:41:40,129
子类，我们必须在一秒钟内实现这些。

1035
00:41:40,198 --> 00:41:41,898
但我们回到我们的故事板。

1036
00:41:41,966 --> 00:41:47,103
我们也显然想在这里设定我们的身份

1037
00:41:47,171 --> 00:41:51,641
只是通用的UITableViewController，

1038
00:41:51,709 --> 00:41:55,978
我们希望它成为一个TweetTableViewController。

1039
00:41:56,046 --> 00:41:57,780
此外，我们的箭在哪里进来？

1040
00:41:57,849 --> 00:42:00,482
没有箭头，所以让我们再次选择它

1041
00:42:00,551 --> 00:42:03,953
返回属性并选择是初始视图控制器，所以

1042
00:42:04,022 --> 00:42:05,621
我们得到这个箭头进来。

1043
00:42:05,690 --> 00:42:07,656
好的，否则，当我们推出我们的应用程序时，

1044
00:42:07,725 --> 00:42:10,926
它不会知道什么MVC开始，好吗？

1045
00:42:10,995 --> 00:42:13,830
现在每当我们有一个新的MVC，

1046
00:42:13,898 --> 00:42:16,632
我们一直想做的第一件事是什么？

1047
00:42:16,701 --> 00:42:18,200
定义其模型。

1048
00:42:18,269 --> 00:42:21,103
了解这个MVC是什么。

1049
00:42:21,172 --> 00:42:23,639
它显示或做什么？

1050
00:42:23,707 --> 00:42:29,645
我要选择我的模型来做一系列的推文。

1051
00:42:29,714 --> 00:42:31,313
好的，我会把它叫做tweets。

1052
00:42:31,382 --> 00:42:34,883
但我实际上会让它成为一个数组

1053
00:42:34,952 --> 00:42:37,253
的tweets数组。

1054
00:42:37,322 --> 00:42:40,890
好的，为什么我要做一个数组的tweets？

1055
00:42:40,959 --> 00:42:44,160
因为我可以把一些tweets放在我的桌子上

1056
00:42:44,228 --> 00:42:46,629
然后再取一些，放进更多的东西。

1057
00:42:46,697 --> 00:42:49,432
而且每次我把更多的东西，我会把它作为一个新的

1058
00:42:49,500 --> 00:42:52,101
部分，好的，表视图部分。

1059
00:42:52,170 --> 00:42:54,904
所以这个数组里面的每个数组

1060
00:42:54,973 --> 00:42:56,438
是另一批tweet。

1061
00:42:56,507 --> 00:42:58,808
外部数组是我的所有部分。

1062
00:42:58,876 --> 00:43:00,376
所以我在这里有一个非常好的数据结构。

1063
00:43:00,444 --> 00:43:02,578
它真的很好地与表视图相匹配。

1064
00:43:02,647 --> 00:43:05,748
有这样的数据结构很好。

1065
00:43:05,817 --> 00:43:07,817
我建议在作业中，如果可以的话

1066
00:43:07,885 --> 00:43:10,219
使您的数据结构与部分匹配

1067
00:43:10,288 --> 00:43:12,055
行，然后它实现

1068
00:43:12,123 --> 00:43:14,757
所有这些方法在这里下来很简单。

1069
00:43:16,026 --> 00:43:19,294
好的，所以我有另一部分我的模型，

1070
00:43:19,363 --> 00:43:22,064
虽然，这是一些searchText。

1071
00:43:22,133 --> 00:43:24,400
所以searchText就像#stanford，

1072
00:43:24,469 --> 00:43:26,936
这就是我想要搜索的内容。

1073
00:43:27,004 --> 00:43:29,271
所以这个searchText是我正在寻找的

1074
00:43:29,340 --> 00:43:30,740
找到我的推文。

1075
00:43:30,809 --> 00:43:32,141
我把这个公开，

1076
00:43:32,209 --> 00:43:34,410
这将是我的模型的公共部分。

1077
00:43:34,478 --> 00:43:37,779
所以任何人使用我的MVC，他们设置搜索文本。

1078
00:43:37,848 --> 00:43:40,082
我会显示这些推文。

1079
00:43:40,151 --> 00:43:40,917
所以我会这么做

1080
00:43:42,519 --> 00:43:45,188
好的，我会通过填充这部分来做到这一点

1081
00:43:45,256 --> 00:43:47,623
我的模特在这里给他们展示。

1082
00:43:47,691 --> 00:43:51,393
那么如果设置了searchText，我该怎么办？

1083
00:43:51,462 --> 00:43:54,163
所以我需要做一些didSet这里，所以公共模式，

1084
00:43:54,231 --> 00:43:56,699
如果有事情要做，我必须做出很好的反应。

1085
00:43:56,767 --> 00:43:59,469
我的意思是，我要做的一件事是删除

1086
00:43:59,537 --> 00:44:02,138
所有的tweets已经在我的表中。

1087
00:44:02,207 --> 00:44:05,340
当我把这些从我的模型中删除，

1088
00:44:05,409 --> 00:44:07,743
我需要告诉表视图。

1089
00:44:07,812 --> 00:44:10,479
所以我会有tableView.reloadData()，这样

1090
00:44:10,548 --> 00:44:13,382
是锤子，这是可以的，因为我删除了一切，

1091
00:44:13,451 --> 00:44:15,250
所以锤子会很轻，

1092
00:44:15,319 --> 00:44:16,619
一个小球刀。

1093
00:44:16,687 --> 00:44:18,754
好的，只是去清理表，所以

1094
00:44:18,823 --> 00:44:20,723
在这种情况下，这是完美的。

1095
00:44:22,059 --> 00:44:22,591
还需要做什么？

1096
00:44:22,660 --> 00:44:25,093
那我现在需要搜索tweet。

1097
00:44:25,162 --> 00:44:27,963
所以我必须编写一个功能去做搜索

1098
00:44:28,032 --> 00:44:28,998
一些推文。

1099
00:44:29,067 --> 00:44:32,501
我也将我的标题设置为与searchText相同。

1100
00:44:32,569 --> 00:44:34,703
这样，如果我碰巧在导航控制器或

1101
00:44:34,772 --> 00:44:37,272
像这样的东西，它会显示我正在寻找的任何东西

1102
00:44:37,341 --> 00:44:40,208
对于，#stanford或任何顶部，所以

1103
00:44:40,277 --> 00:44:43,613
我会让我的UI看起来不错。

1104
00:44:44,815 --> 00:44:45,547
好的，所以

1105
00:44:45,616 --> 00:44:48,384
我们要做这个私人的func searchForTweets。

1106
00:44:50,888 --> 00:44:53,055
好的，所以这是需要消除的事情

1107
00:44:53,124 --> 00:44:58,060
找到这些推文，所以我们稍后会这样做。

1108
00:44:58,128 --> 00:45:00,395
我还要做的一件事是我要做viewDidLoad，

1109
00:45:00,464 --> 00:45:01,531
仅用于测试目的。

1110
00:45:01,599 --> 00:45:04,466
你注意到我在开发过程中做了很多，而且

1111
00:45:04,535 --> 00:45:05,868
我想做一些测试，

1112
00:45:05,937 --> 00:45:08,137
我要把我的模型放在一些东西上。

1113
00:45:08,206 --> 00:45:11,740
所以我们会做#stanford，好的，只是为了测试。

1114
00:45:11,809 --> 00:45:13,509
一旦我们得到了我们的MVC的工作，

1115
00:45:13,577 --> 00:45:17,012
其公共API正在工作，那么我们将删除此代码。

1116
00:45:17,081 --> 00:45:17,914
这只是测试代码。

1117
00:45:19,050 --> 00:45:20,916
好的，现在我们在这里有一个错误。

1118
00:45:20,985 --> 00:45:24,586
而这个错误是斯威夫特说的对不起。

1119
00:45:24,655 --> 00:45:25,755
什么是推文？

1120
00:45:27,358 --> 00:45:28,991
那是什么类型的

1121
00:45:29,060 --> 00:45:32,094
而且我真的不希望你浪费你的时间

1122
00:45:32,163 --> 00:45:35,231
你的家庭作业找出如何去抓取

1123
00:45:35,299 --> 00:45:38,167
来自Twitter的推文，并提出要求。

1124
00:45:38,236 --> 00:45:41,703
所以我写了一个为你做的框架。

1125
00:45:41,772 --> 00:45:44,440
通过框架，我的意思是这样一个框架。

1126
00:45:44,508 --> 00:45:48,076
像UIKit一样，对，UIKit就像这样一个整体的库

1127
00:45:48,145 --> 00:45:50,746
一些数据结构，您可以用来构建您的应用程序。

1128
00:45:50,815 --> 00:45:54,083
嗯，我为你写了一个为Twitter做的事情。

1129
00:45:54,152 --> 00:45:55,718
它有一些叫做tweet的东西。

1130
00:45:55,786 --> 00:45:57,620
它也有一个叫做请求的东西

1131
00:45:57,689 --> 00:45:59,655
你做一个Twitter的请求。

1132
00:45:59,723 --> 00:46:02,925
好的，所以事情就在这里。

1133
00:46:02,994 --> 00:46:06,195
现在，框架如何工作？

1134
00:46:06,264 --> 00:46:08,731
当它们没有内置时，如何使用它们

1135
00:46:08,799 --> 00:46:10,265
系统像苹果？

1136
00:46:10,334 --> 00:46:14,903
答案是，你需要建立一个更高层次的结构

1137
00:46:14,972 --> 00:46:18,006
为Xcode工作与调用工作区。

1138
00:46:18,075 --> 00:46:21,343
所以我实际上会关闭这个项目。

1139
00:46:21,412 --> 00:46:22,745
我正在关闭这个项目。

1140
00:46:22,814 --> 00:46:25,648
我要去Xcode，我要创建一个新的东西，

1141
00:46:25,717 --> 00:46:28,184
你以前从未见过的，称为工作区。

1142
00:46:29,253 --> 00:46:30,485
现在当我创建这个工作区时，

1143
00:46:30,554 --> 00:46:31,620
它想知道在哪里放。

1144
00:46:31,688 --> 00:46:32,722
在这里小心，看，

1145
00:46:32,790 --> 00:46:34,957
它试图把它放在我的Smashtag项目中，

1146
00:46:35,026 --> 00:46:36,325
我不想这样做。

1147
00:46:36,394 --> 00:46:39,995
我想把它放在我的开发者级别的顶部，

1148
00:46:40,064 --> 00:46:41,630
我把所有的项目都放在同一个地方，好的，

1149
00:46:41,699 --> 00:46:43,565
所以真的要小心点。

1150
00:46:43,634 --> 00:46:46,502
所以我会叫这个L9，这是演讲9，所以

1151
00:46:46,571 --> 00:46:47,703
我们称之为L9。

1152
00:46:47,772 --> 00:46:50,006
我点击保存，这创建了这个工作区。

1153
00:46:50,074 --> 00:46:52,341
但是在导航仪中注意到，没有什么。

1154
00:46:53,610 --> 00:46:55,177
那么我们放在工作区呢？

1155
00:46:55,246 --> 00:46:57,980
那么我们在工作空间中放置的是其他项目。

1156
00:46:58,048 --> 00:47:00,649
而这个工作区将会收集所有这些

1157
00:47:00,718 --> 00:47:02,651
项目，因为他们一起去。

1158
00:47:02,719 --> 00:47:05,821
显然，我提供的这个Twitter框架

1159
00:47:05,890 --> 00:47:08,291
在这里你和Smashtag一起去，

1160
00:47:08,359 --> 00:47:11,694
这是我们迄今为止一直在努力的事情。

1161
00:47:11,762 --> 00:47:14,830
现在你拖下来的是.xcodeproj，

1162
00:47:14,899 --> 00:47:18,334
因为这是你想投入的项目本身

1163
00:47:18,402 --> 00:47:19,535
这个工作区。

1164
00:47:19,603 --> 00:47:21,670
所以你只需拖动这两个，所以

1165
00:47:21,739 --> 00:47:23,639
我也要打开这个。

1166
00:47:23,708 --> 00:47:26,609
这是Twitter的Xcode项目。

1167
00:47:26,678 --> 00:47:29,378
拖入，现在小心不要放在里面，

1168
00:47:29,447 --> 00:47:32,481
看看如何把它放在Smashtag里面？

1169
00:47:32,550 --> 00:47:35,217
把它放在外面，让他们是兄弟姐妹。

1170
00:47:35,285 --> 00:47:38,454
现在我有这个工作区有两个

1171
00:47:38,523 --> 00:47:43,359
在它的项目，你甚至去这里隐藏别人。

1172
00:47:43,427 --> 00:47:46,028
如果我们看着Smashtag一个，喔，看起来很熟悉。

1173
00:47:46,097 --> 00:47:48,997
这是我们正在开发的代码，对吧？

1174
00:47:49,066 --> 00:47:50,599
如果我们看Twitter的话，

1175
00:47:50,668 --> 00:47:52,134
这是我提供的代码。

1176
00:47:52,203 --> 00:47:53,702
现在，这里有什么？

1177
00:47:53,771 --> 00:47:56,005
这是tweet是这个结构和

1178
00:47:56,074 --> 00:47:58,874
所有的东西，你会期望在一个推文。

1179
00:47:58,943 --> 00:48:01,210
推文的文本，创建它的用户，

1180
00:48:01,279 --> 00:48:03,279
这是另一回事，用户在这里，

1181
00:48:03,347 --> 00:48:06,082
并且用户具有正在标记的屏幕名称，

1182
00:48:06,150 --> 00:48:09,318
实际名称，用户的唯一标识符。

1183
00:48:09,387 --> 00:48:12,888
回到tweet，它也有一个唯一的标识符。

1184
00:48:12,956 --> 00:48:15,858
它也有东西嵌入在tweet像

1185
00:48:15,927 --> 00:48:16,858
其他主题标签和

1186
00:48:16,927 --> 00:48:19,294
推特内引用的其他用户。

1187
00:48:19,363 --> 00:48:21,163
甚至媒体，你知道很多次

1188
00:48:21,231 --> 00:48:23,899
tweet与他们也有一个图像。

1189
00:48:23,967 --> 00:48:26,301
另一件事在这个Twitter中是重要的

1190
00:48:26,370 --> 00:48:28,637
我给你的框架是这个类Request，

1191
00:48:28,706 --> 00:48:30,305
Twitter请求在这里。

1192
00:48:30,374 --> 00:48:34,510
这个Request类是你用来提出请求的东西

1193
00:48:34,579 --> 00:48:35,544
为Twitter。

1194
00:48:35,612 --> 00:48:39,248
现在，您不需要查看任何实现

1195
00:48:39,316 --> 00:48:41,683
其中任何一个，其实你可以去

1196
00:48:41,752 --> 00:48:44,119
做助理编辑。

1197
00:48:44,188 --> 00:48:46,989
如果你做这样的助理编辑，

1198
00:48:47,058 --> 00:48:50,426
你实际上会在这里看到它的公共API。

1199
00:48:50,494 --> 00:48:53,229
看到所有公众，公众，公众，

1200
00:48:53,297 --> 00:48:57,433
上市;现在我们以前没有看过这个public关键字，

1201
00:48:57,502 --> 00:49:00,435
我们所看到的只有私人或私人。

1202
00:49:00,504 --> 00:49:02,771
那么这个公共事物是什么意思呢？

1203
00:49:02,840 --> 00:49:06,608
看，我把这些东西放在这里。

1204
00:49:06,677 --> 00:49:10,078
公众意味着不仅不是私人的，而且

1205
00:49:10,147 --> 00:49:12,781
即使这个框架被使用，你也可以看到它

1206
00:49:12,850 --> 00:49:14,583
一些其他项目。

1207
00:49:14,651 --> 00:49:18,754
所以公众意味着这个框架之外的公众，对，

1208
00:49:18,823 --> 00:49:19,421
有道理吧？

1209
00:49:19,490 --> 00:49:21,656
所以在UIKit中有很多东西都标记为public。

1210
00:49:21,725 --> 00:49:23,659
所有你可以使用的东西都必须被标记为公共的

1211
00:49:23,727 --> 00:49:25,460
它与您的应用程序在不同的框架中。

1212
00:49:25,529 --> 00:49:30,098
在某种意义上，您的应用程式是一种框架，所以

1213
00:49:30,167 --> 00:49:30,666
这是公开的。

1214
00:49:30,735 --> 00:49:32,501
然后，也注意到更远，

1215
00:49:32,569 --> 00:49:35,070
这些方法被标记为内部;这意味着我可以

1216
00:49:35,139 --> 00:49:38,641
只能在我的框架中使用它们，所以我不能调用任何

1217
00:49:38,709 --> 00:49:41,643
这些方法来自Smashtag，它们是内部的。

1218
00:49:41,712 --> 00:49:44,412
实际上，您还没有看到这个关键字

1219
00:49:44,481 --> 00:49:47,449
它是您创建的所有方法的默认值

1220
00:49:47,517 --> 00:49:51,152
你没有标记为private或fileprivate是内部的。

1221
00:49:51,221 --> 00:49:52,221
这是默认的，所以

1222
00:49:52,290 --> 00:49:55,858
你还没有把内容放在那里，好的。

1223
00:49:55,926 --> 00:49:56,859
所以，我们来看一下公共API。

1224
00:49:56,927 --> 00:49:58,994
我们甚至不注意这个

1225
00:49:59,063 --> 00:50:00,429
看看公共API。

1226
00:50:00,498 --> 00:50:03,398
这个公开的API请求，

1227
00:50:03,467 --> 00:50:05,200
我们只会用三件事情。

1228
00:50:05,269 --> 00:50:07,736
一个是这个方便的初始化器

1229
00:50:07,804 --> 00:50:10,205
在那里你只是给它一些东西来搜索和

1230
00:50:10,274 --> 00:50:12,174
你想要多少结果

1231
00:50:12,243 --> 00:50:15,010
然后这个方法fetchTweets你在哪里

1232
00:50:15,079 --> 00:50:18,314
给它这个关闭它会调用完成后。

1233
00:50:18,382 --> 00:50:20,416
它将要离开，并在另一个线程上做

1234
00:50:20,485 --> 00:50:22,251
当它完成它会调用。

1235
00:50:22,319 --> 00:50:24,653
这将有一个数组的tweet它发现

1236
00:50:24,722 --> 00:50:27,389
匹配您的搜索。

1237
00:50:27,458 --> 00:50:28,724
我们要使用的是这一个，在这里，更新的，如果

1238
00:50:28,725 --> 00:50:29,991
然后最后，

1239
00:50:30,061 --> 00:50:32,161
你问这个请求，给我一个较新的请求。

1240
00:50:32,230 --> 00:50:35,197
它会提供您可以使用更新的请求

1241
00:50:35,266 --> 00:50:35,731
推文

1242
00:50:35,799 --> 00:50:37,065
已经推特的推文

1243
00:50:37,134 --> 00:50:38,967
你以前的一个。

1244
00:50:39,036 --> 00:50:39,968
所以，这就是我们在这里使用的。

1245
00:50:40,037 --> 00:50:42,905
我们不会真的使用任何其他的API

1246
00:50:42,973 --> 00:50:43,939
在这个请求中。

1247
00:50:44,008 --> 00:50:46,708
在你的家庭作业中，你必须在这里知道这个API

1248
00:50:46,777 --> 00:50:48,777
Tweet因为你必须能够获得文本和

1249
00:50:48,846 --> 00:50:52,047
用户信息也是MediaItems所以

1250
00:50:52,116 --> 00:50:57,285
你可以获得那里的图像的URL等。

1251
00:50:57,354 --> 00:50:59,521
但是你不必看私人执行

1252
00:50:59,590 --> 00:51:01,924
这个框架，所以不要浪费你的时间在那里。

1253
00:51:01,992 --> 00:51:04,026
只要看公开的东西，

1254
00:51:04,095 --> 00:51:07,462
没有很多东西标记为公共 - 这是唯一的

1255
00:51:07,531 --> 00:51:09,698
你要找的东西

1256
00:51:09,767 --> 00:51:12,334
现在我如何使用这个框架，

1257
00:51:12,402 --> 00:51:14,970
这个Twitter框架在Smashtag？

1258
00:51:15,039 --> 00:51:16,472
那你必须做一个步骤。

1259
00:51:16,540 --> 00:51:18,807
你不能把它们放在同一个工作区中

1260
00:51:18,876 --> 00:51:20,075
开始工作。

1261
00:51:20,144 --> 00:51:24,245
那么两步，一个是我需要说的是进口Twitter。

1262
00:51:24,314 --> 00:51:26,748
就像我说的import UIKit一样，如果我想使用这个Twitter

1263
00:51:26,817 --> 00:51:29,118
框架在这里我不得不说进口Twitter。

1264
00:51:29,186 --> 00:51:31,620
这将导致这个推文开始

1265
00:51:31,689 --> 00:51:34,323
被认为是一种类型，因为它会看到这个

1266
00:51:34,392 --> 00:51:36,292
tweet类型就在这里。

1267
00:51:36,360 --> 00:51:40,062
但另一件重要的事情，别忘了，

1268
00:51:40,131 --> 00:51:44,500
你需要告诉Xcode，当你建立Smashtag

1269
00:51:44,569 --> 00:51:47,269
应用程式包含Twitter。

1270
00:51:47,337 --> 00:51:50,806
而你这样做是通过Smashtag项目，好的，

1271
00:51:50,874 --> 00:51:51,640
项目设置。

1272
00:51:51,709 --> 00:51:53,175
并一路走到底部，它说

1273
00:51:53,244 --> 00:51:54,776
嵌入式二进制文件

1274
00:51:54,845 --> 00:51:58,980
只是拿起你的Twitter框架的产品。

1275
00:51:59,049 --> 00:52:00,549
你看到产品在哪里？

1276
00:52:00,618 --> 00:52:04,653
只要拿起来把它拖到这里，那说，

1277
00:52:04,722 --> 00:52:08,891
请将Twitter框架放入我的Smashtag，

1278
00:52:08,960 --> 00:52:10,058
因为我的Smashtag使用它。

1279
00:52:10,127 --> 00:52:12,694
如果你不这样做，那么它们都会编译，但是

1280
00:52:12,763 --> 00:52:15,130
那么当Smashtag运行时，Twitter将不会在那里

1281
00:52:15,198 --> 00:52:15,965
所以它会失败。

1282
00:52:18,569 --> 00:52:20,068
现在，我会让你做这一步，作为一部分

1283
00:52:20,137 --> 00:52:20,969
你的家庭作业。

1284
00:52:21,038 --> 00:52:23,638
我会发布这个代码为Smashtag，但是

1285
00:52:23,707 --> 00:52:26,208
我不会发布工作区，所以

1286
00:52:26,277 --> 00:52:29,945
你必须自己构建工作区。

1287
00:52:30,014 --> 00:52:30,913
好吧，让我们继续吧。

1288
00:52:30,982 --> 00:52:32,981
现在我们有了这个tweets这个数组，

1289
00:52:33,050 --> 00:52:35,283
我们要怎么处理这个数组的tweets？

1290
00:52:35,352 --> 00:52:40,555
我们开始为我们的搜索文本进行抓取。

1291
00:52:40,624 --> 00:52:41,790
所以我们得到我们的搜索文本，

1292
00:52:41,858 --> 00:52:44,092
我们想去拿那些那些东西。

1293
00:52:44,161 --> 00:52:45,995
这就是我们应该在搜索推文中做的事情。

1294
00:52:47,064 --> 00:52:48,096
让我们再来一个功能，

1295
00:52:48,165 --> 00:52:50,065
另一个小私人功能。

1296
00:52:50,133 --> 00:52:52,801
我会叫它twitterRequest，

1297
00:52:52,870 --> 00:52:56,104
这将会返回Twitter.Request。

1298
00:52:56,173 --> 00:52:57,973
但是，这是另一回事。

1299
00:52:58,041 --> 00:53:00,809
这可以叫做tweet，因为我正在导入这个Twitter

1300
00:53:00,878 --> 00:53:03,678
框架，没有其他类叫tweet，所以

1301
00:53:03,747 --> 00:53:04,780
我只需要叫它tweet。

1302
00:53:04,849 --> 00:53:07,983
其全名其实是Twitter.Tweet。

1303
00:53:08,052 --> 00:53:11,720
就像你知道的，UITableViewController，

1304
00:53:11,789 --> 00:53:15,490
它的全名是UIKit.UITableViewController。

1305
00:53:15,559 --> 00:53:16,892
使用Twitter.Tweet因为我认为在作业5，你

1306
00:53:16,893 --> 00:53:18,226
现在我要去了

1307
00:53:18,295 --> 00:53:21,530
可能最终想要拥有本地的tweet类。

1308
00:53:21,598 --> 00:53:23,164
所以我要用Twitter.Tweet和

1309
00:53:23,233 --> 00:53:26,034
Twitter.Request无处不在，但我不会有只要

1310
00:53:26,102 --> 00:53:28,670
我没有一个叫Tweet或者另一个请求的类。

1311
00:53:28,739 --> 00:53:31,840
但这是一个非常通用的名称请求，所以放

1312
00:53:31,909 --> 00:53:35,644
无论如何，前面的Twitter点可能是一个好主意。

1313
00:53:36,781 --> 00:53:37,713
好的

1314
00:53:37,781 --> 00:53:40,282
这里的Twitter.Request函数只是要返回

1315
00:53:40,351 --> 00:53:44,386
与该搜索文本匹配的Twitter请求。

1316
00:53:44,455 --> 00:53:45,420
那真的很简单，

1317
00:53:45,489 --> 00:53:48,556
我只是说，如果我可以让查询

1318
00:53:48,625 --> 00:53:51,393
搜索项等于搜索文本。

1319
00:53:51,461 --> 00:53:55,030
我想确保该查询不为空。

1320
00:53:55,098 --> 00:53:58,800
所以我不想搜索空或空字符串。

1321
00:53:58,869 --> 00:54:01,503
所以我只是在这里保持这一点。

1322
00:54:01,572 --> 00:54:04,305
否则我只是要使用Twitter请求

1323
00:54:04,374 --> 00:54:07,042
那个方便的初始化程序我告诉过你叫做Search。

1324
00:54:08,245 --> 00:54:11,046
而我只是要通过这个查询，

1325
00:54:11,115 --> 00:54:12,781
好吧让我们得到100个。

1326
00:54:12,850 --> 00:54:15,351
好的，所以我们要一起抓住100个tweets。

1327
00:54:17,021 --> 00:54:20,188
如果不是这样，如果搜索字词为零或

1328
00:54:20,257 --> 00:54:23,391
它是空的，那么我将从此返回零。

1329
00:54:23,460 --> 00:54:25,628
所以让我们这样做，你知道，是可选的。

1330
00:54:27,164 --> 00:54:28,563
好的，大家明白这个功能是什么？

1331
00:54:28,632 --> 00:54:31,800
它只是一个Twitter的请求，将搜索

1332
00:54:31,869 --> 00:54:35,036
我们的searchText，就是这样做。

1333
00:54:35,105 --> 00:54:36,538
所以现在在这里在searchForTweets，

1334
00:54:36,606 --> 00:54:41,343
我可以说如果我可以让请求等于twitterRequest，

1335
00:54:41,412 --> 00:54:43,111
希望它可以做到。

1336
00:54:43,180 --> 00:54:46,047
好的，现在我有一个请求

1337
00:54:46,116 --> 00:54:50,819
现在我只是要求这个要求发生。

1338
00:54:50,888 --> 00:54:58,727
所以我只会说这个Twitter request.fetchTweets。

1339
00:54:58,796 --> 00:55:02,364
所以这个fetchTweets功能就在那里，你看到了吗？

1340
00:55:02,433 --> 00:55:03,765
最好的一个，好的，

1341
00:55:03,834 --> 00:55:07,603
这个封闭在这里就是一个争论。

1342
00:55:07,671 --> 00:55:11,172
我会双击它，以显示它在这里做什么。

1343
00:55:11,241 --> 00:55:14,309
我将使用尾随闭包语法来摆脱

1344
00:55:14,377 --> 00:55:16,345
那里的括号。

1345
00:55:16,413 --> 00:55:17,179
现在这是什么

1346
00:55:17,248 --> 00:55:19,648
这是我闭包的唯一参数。

1347
00:55:19,717 --> 00:55:21,783
那些是它提取的推文。

1348
00:55:21,852 --> 00:55:23,351
看到它是一系列的推文。

1349
00:55:23,420 --> 00:55:24,286
我会称这个newTweets。

1350
00:55:24,355 --> 00:55:26,522
好的，所以这将是一系列的推文，

1351
00:55:26,590 --> 00:55:29,490
我甚至不需要这里的括号。

1352
00:55:29,559 --> 00:55:30,192
所以我有newTweets。

1353
00:55:30,260 --> 00:55:32,394
所以newTweets将是一个Tweet的数组

1354
00:55:32,463 --> 00:55:33,695
进账;现在，当然，

1355
00:55:33,764 --> 00:55:35,763
它正在做这个主要队列，对吧？

1356
00:55:35,832 --> 00:55:38,066
这是Twitter的请求，

1357
00:55:38,135 --> 00:55:40,168
如果这是一个非常慢的网络呢？

1358
00:55:40,237 --> 00:55:43,572
或者Twitter的时间真的很慢或者什么。

1359
00:55:43,640 --> 00:55:45,106
我终于得到了这些新的推文，我想做什么？

1360
00:55:45,107 --> 00:55:46,573
所以在这里，

1361
00:55:46,643 --> 00:55:50,913
那我只想把它们添加到我的模型的末尾，

1362
00:55:50,981 --> 00:55:52,748
这是我的模型，它是一系列的tweets。

1363
00:55:52,749 --> 00:55:54,516
对？

1364
00:55:54,584 --> 00:55:58,853
这是一个数组，所以我只是要拿我的模型，和

1365
00:55:58,922 --> 00:56:02,257
附加到这个tweets这个数组。

1366
00:56:02,325 --> 00:56:05,727
实际上，我不会在最后添加它，因为

1367
00:56:05,796 --> 00:56:08,830
我想让我所有的新推文在一开始就出现，

1368
00:56:08,899 --> 00:56:11,200
所以在零开始的时候，所以

1369
00:56:11,268 --> 00:56:14,369
我将把这些新的推文插入到我的阵列中。

1370
00:56:14,438 --> 00:56:15,570
就这样在顶部。

1371
00:56:15,639 --> 00:56:17,573
所以我的新推文将在顶部进来。

1372
00:56:18,809 --> 00:56:19,374
合理？

1373
00:56:19,443 --> 00:56:21,109
现在我们在那里有一个错误。

1374
00:56:21,178 --> 00:56:24,112
任何人都猜测为什么这个错误在我之前

1375
00:56:24,181 --> 00:56:24,746
打开它？

1376
00:56:24,815 --> 00:56:25,447
>>突变

1377
00:56:25,516 --> 00:56:27,249
>>什么？是的，变异。

1378
00:56:27,318 --> 00:56:27,949
>>突变

1379
00:56:28,018 --> 00:56:29,484
这是一个很好的猜测，但不是。

1380
00:56:29,553 --> 00:56:34,489
这是因为自我，这是旧的闭包循环引用问题，

1381
00:56:34,558 --> 00:56:35,490
对？

1382
00:56:35,559 --> 00:56:37,392
由于我们在这里访问自己，

1383
00:56:37,460 --> 00:56:39,228
这些推文是我们自己的一部分。

1384
00:56:39,296 --> 00:56:41,630
我们需要明确地说这样

1385
00:56:41,698 --> 00:56:44,433
我们可以注意到，我们可能会有一个内存周期。

1386
00:56:44,501 --> 00:56:46,668
我们有内存周期吗？

1387
00:56:46,737 --> 00:56:48,536
其实我们这样做。

1388
00:56:48,605 --> 00:56:51,106
因为如果这个视图控制器关闭

1389
00:56:51,175 --> 00:56:53,374
获取一些tweets，它需要永远。

1390
00:56:53,443 --> 00:56:57,078
所以这个人说，我会搜索别的东西。

1391
00:56:57,147 --> 00:56:59,014
现在他们说搜索文本是在其他和

1392
00:56:59,083 --> 00:57:00,482
另一个提取消失。

1393
00:57:00,551 --> 00:57:03,652
现在这里是第一次获取，现在是无关紧要的

1394
00:57:03,720 --> 00:57:05,453
因为我已经找了别的东西

1395
00:57:05,522 --> 00:57:08,823
所以我们在这里做，想要小心忽略

1396
00:57:08,892 --> 00:57:12,460
这回来了，我们也是，如果有人搜索和

1397
00:57:12,529 --> 00:57:15,130
它是永远的，他们回来了，我们想要我们的视图

1398
00:57:15,199 --> 00:57:17,833
控制器也能够留下记忆。

1399
00:57:17,902 --> 00:57:19,701
所以我们不想闭包，这里的循环，

1400
00:57:19,770 --> 00:57:21,936
我们不希望这个闭包让我们记忆犹新。

1401
00:57:22,005 --> 00:57:24,639
所以我们不希望这是一个很强的指针

1402
00:57:24,708 --> 00:57:27,709
我们需要检查以确保当我们回来时，

1403
00:57:27,778 --> 00:57:29,877
它仍然是我们感兴趣的。

1404
00:57:29,946 --> 00:57:31,880
那么我们怎么能打破这个周期呢？

1405
00:57:31,949 --> 00:57:33,915
我们要使用我们的朋友weak self好吗？

1406
00:57:33,916 --> 00:57:35,882
这很容易。

1407
00:57:35,952 --> 00:57:37,552
这样就可以将它变成一个可选的。

1408
00:57:37,621 --> 00:57:39,253
所以我们添加了一个问号。

1409
00:57:39,322 --> 00:57:40,422
我们打破了这个循环。

1410
00:57:40,491 --> 00:57:42,457
所以即使这个提取是坐在那里拿走，

1411
00:57:42,525 --> 00:57:44,325
它不会保持我们的视图控制器在内存中。

1412
00:57:44,394 --> 00:57:46,060
我们的观点控制可以留下内存，

1413
00:57:46,129 --> 00:57:46,795
如果它回来了

1414
00:57:46,864 --> 00:57:49,897
没有了，那么这行代码将不会执行。

1415
00:57:49,966 --> 00:57:52,267
如何处理我们的请求可能的事实

1416
00:57:52,336 --> 00:57:53,635
已改变？

1417
00:57:53,704 --> 00:57:54,969
那么这样做，

1418
00:57:55,038 --> 00:57:59,073
我要跟踪我们的lastTwitterRequest，

1419
00:57:59,142 --> 00:58:02,211
其实我们必须把它放在这里。

1420
00:58:04,181 --> 00:58:08,349
好吧，我会跟踪它，和

1421
00:58:08,418 --> 00:58:13,388
那么在这里我不会这样做，除非我们

1422
00:58:13,457 --> 00:58:18,060
请求等于lastTwitterRequest。

1423
00:58:18,128 --> 00:58:21,029
所以如果这个回来的请求不是我们最后一个

1424
00:58:21,098 --> 00:58:22,797
发了，那我不会这样做的。

1425
00:58:22,866 --> 00:58:24,866
所以让我上来这里

1426
00:58:24,935 --> 00:58:28,169
说私人var lastTwitterRequest和

1427
00:58:28,238 --> 00:58:32,907
那当然会是Twitter.Request。

1428
00:58:32,976 --> 00:58:38,079
请求，可选，并不总是设置。

1429
00:58:38,148 --> 00:58:39,914
每个人都看到我在做什么

1430
00:58:39,983 --> 00:58:42,583
当然这也是自言自语，所以我们会自我介绍

1431
00:58:42,652 --> 00:58:44,920
在那里，当然，self是weak的，所以我们会这样做。

1432
00:58:46,056 --> 00:58:46,988
所以这一切都很好。

1433
00:58:47,057 --> 00:58:48,957
任何其他问题，你可以看到与此？

1434
00:58:49,026 --> 00:58:51,493
到目前为止我看不到什么

1435
00:58:52,529 --> 00:58:53,428
所以这一切都很好。所以，

1436
00:58:53,497 --> 00:58:55,363
在我们挂钩我们的表视图之前，

1437
00:58:55,432 --> 00:58:59,167
让我们确保我们的Twitter抓取工作正常工作。

1438
00:58:59,236 --> 00:59:02,137
我会通过放置一个doSet来做这个

1439
00:59:02,206 --> 00:59:06,007
在我的模型上，每当我的模型发生变化，

1440
00:59:06,076 --> 00:59:08,310
我要打印推文。

1441
00:59:08,379 --> 00:59:09,778
幸运的是，我已经这样做了

1442
00:59:09,847 --> 00:59:11,979
该推文是CustomStringConvertible，

1443
00:59:12,048 --> 00:59:13,615
它实现描述。

1444
00:59:13,683 --> 00:59:15,383
它可以打印自己作为一个字符串所以

1445
00:59:15,452 --> 00:59:16,885
这是一系列的。

1446
00:59:16,953 --> 00:59:19,521
所以这将打印出一个数组，实际上是一个数组

1447
00:59:19,589 --> 00:59:22,224
的一个这个tweet的数组作为字符串打印出来。

1448
00:59:22,293 --> 00:59:26,294
所以我们要打印出来。

1449
00:59:26,363 --> 00:59:27,695
似乎应该工作吗？

1450
00:59:27,764 --> 00:59:30,865
我们来试一试，找出来。

1451
00:59:30,934 --> 00:59:33,068
我们将在iPhone 7上做到这一点。

1452
00:59:37,107 --> 00:59:38,706
现在要注意，因为这个

1453
00:59:38,775 --> 00:59:40,742
实际上并不上班。

1454
00:59:40,810 --> 00:59:43,177
这也不适合你，而且你也需要

1455
00:59:43,246 --> 00:59:45,581
做一些事情做一个Twitter抓取工作。

1456
00:59:46,917 --> 00:59:49,951
顺便说一句，你看到我们有这些原型单元格

1457
00:59:50,020 --> 00:59:53,055
必须具有重用标识符;不得不记得

1458
00:59:53,123 --> 00:59:55,356
稍后解决

1459
00:59:55,425 --> 01:00:00,762
好的，所以我们跑，看这个东西放在这里，

1460
01:00:00,831 --> 01:00:02,964
Smashtag想访问Twitter帐户。

1461
01:00:03,033 --> 01:00:05,166
所以你不能写一个刚开始的应用程序

1462
01:00:05,235 --> 01:00:07,935
在Twitter后面为Twitter发布的内容。

1463
01:00:08,004 --> 01:00:11,806
好的，当你写一个应用程序，它总是要问，

1464
01:00:11,875 --> 01:00:14,709
第一次尝试使用Twitter，无论是否允许。

1465
01:00:14,777 --> 01:00:18,513
所以我点击好吧，我们来看看我们的控制台

1466
01:00:18,582 --> 01:00:19,214
看看它是否打印。

1467
01:00:21,384 --> 01:00:24,218
没有，所有这一切印在这里是无法发现的

1468
01:00:24,287 --> 01:00:27,689
Twitter账号类型，嗯，为什么会这样说？

1469
01:00:27,757 --> 01:00:31,026
那么这是因为你的模拟器，它只是一个设备，

1470
01:00:31,094 --> 01:00:34,229
它需要有Twitter，一个Twitter帐户，基本上，

1471
01:00:34,298 --> 01:00:35,463
您的设备需要一个Twitter帐户，所以

1472
01:00:35,531 --> 01:00:36,331
我们在哪里设定？

1473
01:00:36,399 --> 01:00:38,299
所以让我们回到我们的模拟器，

1474
01:00:38,368 --> 01:00:42,737
在这里，我要去硬件，主页按钮，好吧，

1475
01:00:42,805 --> 01:00:44,405
你也可以做命令，转移。

1476
01:00:44,474 --> 01:00:45,306
是硬件主页按钮。

1477
01:00:45,375 --> 01:00:49,477
我将在我的模拟器上转到“设置”应用。

1478
01:00:49,546 --> 01:00:51,512
但是您也可以在设备上执行此操作。

1479
01:00:51,581 --> 01:00:54,082
如果你在设置中进行下载，那么这里是Twitter。

1480
01:00:54,151 --> 01:00:54,916
看那个。

1481
01:00:54,985 --> 01:00:55,550
Twitter在那里

1482
01:00:55,619 --> 01:00:57,218
这里是你输入的地方

1483
01:00:57,287 --> 01:00:58,386
Twitter用户名和密码。

1484
01:00:58,455 --> 01:00:59,854
如果你不输入这个，

1485
01:00:59,923 --> 01:01:03,391
那么系统上的任何应用都不能访问Twitter。

1486
01:01:03,460 --> 01:01:06,094
他们怎么会 - 他们必须知道你是谁。

1487
01:01:06,163 --> 01:01:08,730
所以我要在这里打字，我要做屏幕cuz

1488
01:01:08,799 --> 01:01:11,466
我不希望你看到我的密码。

1489
01:01:11,535 --> 01:01:14,269
所以现在我已经在Twitter上登录了。

1490
01:01:15,539 --> 01:01:17,139
所以现在如果我回去开始我的应用程序

1491
01:01:18,875 --> 01:01:21,876
它将被允许，因为我点击确定。

1492
01:01:21,945 --> 01:01:23,878
我会登录

1493
01:01:23,947 --> 01:01:25,980
它会有一个真正的Twitter用户可以做到这一点。

1494
01:01:26,049 --> 01:01:27,782
当然，请看下面这个底部。

1495
01:01:27,850 --> 01:01:31,186
我们正在打印出各种各样的推文。

1496
01:01:31,255 --> 01:01:32,387
所以这是一个推文。

1497
01:01:32,455 --> 01:01:34,756
这是其唯一的ID。

1498
01:01:34,824 --> 01:01:36,691
这是推特的人。

1499
01:01:36,760 --> 01:01:38,559
这是什么时候被推特。

1500
01:01:38,628 --> 01:01:41,729
这是推文的文字。

1501
01:01:41,798 --> 01:01:44,432
这个人有一个嵌入的网址等

1502
01:01:44,501 --> 01:01:45,700
所以我们做得很好

1503
01:01:45,769 --> 01:01:47,702
我们的推文进来了

1504
01:01:47,771 --> 01:01:50,638
所以现在我们需要做的就是把它们加载进我们的

1505
01:01:50,707 --> 01:01:51,506
表视图。

1506
01:01:51,575 --> 01:01:53,608
那么我们需要做什么来加载这个东西

1507
01:01:53,676 --> 01:01:54,409
表视图？

1508
01:01:54,478 --> 01:01:57,879
现在，我们真的很奇怪，我们两个

1509
01:01:57,948 --> 01:02:01,249
必须做，一个是我们改变我们的模型

1510
01:02:01,317 --> 01:02:04,519
告诉表格，它改变了，然后我们有

1511
01:02:04,587 --> 01:02:07,989
实现这些表视图数据源方法。

1512
01:02:08,057 --> 01:02:09,323
所以让我们从第一个开始吧。

1513
01:02:09,392 --> 01:02:12,760
其实我们已经改变了我们的模型一次

1514
01:02:12,829 --> 01:02:14,962
在这里，我们改变了我们的模式

1515
01:02:15,031 --> 01:02:17,965
我们告诉了表视图，所以这很好。

1516
01:02:18,034 --> 01:02:20,001
这里我们正在改变我们的模型。

1517
01:02:20,070 --> 01:02:23,137
所以我们需要告诉表视图。

1518
01:02:23,206 --> 01:02:26,207
那么self?.tableView

1519
01:02:26,276 --> 01:02:27,909
我在这里做了什么样的模型？

1520
01:02:27,977 --> 01:02:30,611
我刚开始插入一个部分。

1521
01:02:30,680 --> 01:02:34,882
所以碰巧是一个名为tableView的方法

1522
01:02:34,951 --> 01:02:36,484
insertSection。

1523
01:02:36,553 --> 01:02:38,419
它只是说，你插入了一些部分。

1524
01:02:38,488 --> 01:02:39,720
哪个？

1525
01:02:39,789 --> 01:02:41,289
问你那些，把你的行放在那里。

1526
01:02:41,290 --> 01:02:42,790
我会去和

1527
01:02:42,859 --> 01:02:44,792
而这一节是一个索引集，

1528
01:02:44,861 --> 01:02:47,428
你可以给它一个数组字面值。

1529
01:02:47,497 --> 01:02:49,697
所以我刚插入零件。

1530
01:02:49,766 --> 01:02:52,066
所以我只是放一个数组，只有零。

1531
01:02:52,135 --> 01:02:54,702
我会使用褪色动画

1532
01:02:54,771 --> 01:02:56,138
显示褪色。

1533
01:02:58,208 --> 01:02:59,507
所以，insertSections。

1534
01:02:59,575 --> 01:03:02,777
所以，这是我告诉tableView，我改变了我的模型，

1535
01:03:02,845 --> 01:03:04,379
所以再问一次

1536
01:03:04,447 --> 01:03:05,780
问我那些tableView数据源。

1537
01:03:05,849 --> 01:03:08,483
现在，由于我刚才告诉我，我做了什么，只会问

1538
01:03:08,551 --> 01:03:11,252
我关于那一节，这是很好的，更高的表现。

1539
01:03:11,321 --> 01:03:13,488
然后reloadData，锤子reloadData，

1540
01:03:13,557 --> 01:03:16,124
在这种情况下，它会要求我所有部分的所有行

1541
01:03:16,193 --> 01:03:20,361
再次;所以在这里我确切地知道我做了什么

1542
01:03:20,430 --> 01:03:24,365
这其实是危险的代码。

1543
01:03:24,434 --> 01:03:26,334
这真的很容易添加这一行代码

1544
01:03:26,403 --> 01:03:28,102
现在你的应用程序只是行为奇怪。

1545
01:03:28,171 --> 01:03:30,204
它一直都很奇怪。

1546
01:03:30,273 --> 01:03:33,240
任何人都可以，想，为什么会这样

1547
01:03:33,309 --> 01:03:36,144
添加这行代码会使我的应用程序变得奇怪么？

1548
01:03:37,647 --> 01:03:42,149
这是因为这是一个UI调用。

1549
01:03:42,218 --> 01:03:46,153
我们在这里排队？

1550
01:03:46,222 --> 01:03:47,622
一些队列，不是主队列。

1551
01:03:47,691 --> 01:03:50,725
无论什么队列我们拿到这些推文，好吗？

1552
01:03:50,794 --> 01:03:52,159
所以我们不在主队列。

1553
01:03:52,228 --> 01:03:54,862
所以我们不能在这里打个UI。

1554
01:03:54,931 --> 01:04:00,035
对，所以我们必须把它重新发送到主队列。

1555
01:04:01,971 --> 01:04:03,138
所以这是一件事，

1556
01:04:03,207 --> 01:04:04,839
只会采取一些习惯

1557
01:04:04,907 --> 01:04:06,474
你们这些多线程，

1558
01:04:06,543 --> 01:04:08,910
你会在另一个队列中做这些事情，

1559
01:04:08,978 --> 01:04:11,479
你会更新你的表视图，然后

1560
01:04:11,548 --> 01:04:14,215
这就像我的应用程序发生了什么，只是表现得很奇怪。

1561
01:04:14,283 --> 01:04:15,817
这就是为什么 - 因为你可以做

1562
01:04:15,886 --> 01:04:17,151
主界面上的UI填充。

1563
01:04:17,220 --> 01:04:19,387
它不会警告你或必然崩溃，

1564
01:04:19,455 --> 01:04:22,023
它可能最终会崩溃，它只会采取一切都很奇怪。

1565
01:04:22,091 --> 01:04:27,161
所以，固定了

1566
01:04:27,230 --> 01:04:28,096
这很好

1567
01:04:28,165 --> 01:04:30,064
我们已经有了更新我们的模型的表视图

1568
01:04:30,133 --> 01:04:32,333
得到表视图，了解更改模型。

1569
01:04:32,402 --> 01:04:35,236
所以现在我们需要做的就是实现这一点

1570
01:04:35,305 --> 01:04:38,707
UITableViewDataSource协议所以

1571
01:04:38,775 --> 01:04:42,077
它可以从我们那里获取数据。

1572
01:04:42,145 --> 01:04:43,044
所以我们来做

1573
01:04:43,113 --> 01:04:47,849
部分数量，表中有多少部分？

1574
01:04:47,918 --> 01:04:49,784
有人知道吗

1575
01:04:51,488 --> 01:04:54,488
是吗？

1576
01:04:54,557 --> 01:04:57,992
确切地说，糖果扔在你这是完全正确的。

1577
01:04:58,061 --> 01:04:59,426
tweets.count。

1578
01:04:59,495 --> 01:05:03,464
这里只是我们的模型中的数组数

1579
01:05:03,533 --> 01:05:07,602
因为这里的每个阵列都是一个部分，所以

1580
01:05:07,671 --> 01:05:08,502
完美。

1581
01:05:08,571 --> 01:05:11,106
那么这个呢呢

1582
01:05:11,174 --> 01:05:15,443
在这里，我们被问到tweet中有多少行

1583
01:05:15,512 --> 01:05:17,044
subsection？

1584
01:05:17,113 --> 01:05:20,215
这也算了。

1585
01:05:21,752 --> 01:05:23,484
所以我们设计了我们的数据结构

1586
01:05:23,553 --> 01:05:25,152
这些超级容易实现，

1587
01:05:25,221 --> 01:05:26,888
我强烈推荐，如果你能做到这一点。

1588
01:05:26,957 --> 01:05:27,788
你不能总是这样做。

1589
01:05:27,857 --> 01:05:29,758
但如果你可以很好

1590
01:05:29,826 --> 01:05:32,527
所以现在有点困难，只有一点点

1591
01:05:32,596 --> 01:05:35,596
但是，在这里是cellForRowAt索引路径。

1592
01:05:35,665 --> 01:05:38,666
所以这里我们必须返回UITableViewCell

1593
01:05:38,735 --> 01:05:40,435
我们要用来绘制。

1594
01:05:40,504 --> 01:05:44,238
现在，我们再回到我们的故事板

1595
01:05:44,307 --> 01:05:48,242
让我们开始简单一些。

1596
01:05:48,311 --> 01:05:51,579
我们来尝试使用这个副标题单元格。

1597
01:05:51,648 --> 01:05:53,048
所以我要点击这个单元格。

1598
01:05:53,116 --> 01:05:55,616
并会改变自己的风格

1599
01:05:55,685 --> 01:05:56,784
成为副标题

1600
01:05:56,853 --> 01:05:57,718
所以有标题和副标题。

1601
01:05:57,787 --> 01:06:00,655
而且我将把这个标题设置为带有推文的文字。

1602
01:06:00,724 --> 01:06:02,089
我会设置副标题

1603
01:06:02,158 --> 01:06:03,525
成为推特的人。

1604
01:06:05,528 --> 01:06:07,895
所以我们来试试看看这个样子。

1605
01:06:07,964 --> 01:06:09,597
那我该怎么办呢？

1606
01:06:09,666 --> 01:06:11,266
在这里我需要做的两件事

1607
01:06:11,334 --> 01:06:14,001
一个是我需要出现一个可重复使用的单元格

1608
01:06:14,070 --> 01:06:19,407
我告诉iOS使用哪个原型，

1609
01:06:19,475 --> 01:06:20,742
故事板中的哪个原型。

1610
01:06:20,810 --> 01:06:23,377
所以让我们回到我们的故事板。

1611
01:06:23,446 --> 01:06:24,879
而我只有一个原型。

1612
01:06:24,948 --> 01:06:25,613
就是这个。

1613
01:06:25,682 --> 01:06:27,048
这是我想要使用的那个。

1614
01:06:27,117 --> 01:06:28,549
所以我需要给它一个标识符。

1615
01:06:28,618 --> 01:06:29,884
我会叫它Tweet，

1616
01:06:29,953 --> 01:06:32,386
因为这是这个单元格显示的。

1617
01:06:32,455 --> 01:06:33,287
它显示一个鸣叫。

1618
01:06:33,356 --> 01:06:35,490
注意，导致我的警告消失。

1619
01:06:35,558 --> 01:06:36,957
因为所有这些圆形单元格

1620
01:06:37,026 --> 01:06:38,760
总是需要一个标识符。

1621
01:06:38,829 --> 01:06:40,127
现在我回到这里，

1622
01:06:40,196 --> 01:06:43,631
我可以将它从reuseIdentifier更改为Tweet。

1623
01:06:43,700 --> 01:06:47,468
好的，所以现在我能够出现RequeableCell

1624
01:06:47,536 --> 01:06:50,071
这将是副标题的原型副本。

1625
01:06:50,140 --> 01:06:52,741
所以我所有的行都将是副标题行。

1626
01:06:53,710 --> 01:06:55,076
所以现在我有这个单元格，

1627
01:06:55,145 --> 01:06:57,512
它是类型UITableViewCell的方式，

1628
01:06:57,581 --> 01:06:59,781
因为它是一种不是自定义类型的标准类型。

1629
01:06:59,849 --> 01:07:00,748
如何配置？

1630
01:07:00,817 --> 01:07:03,785
那么，对于我配置单元格，设置标题和

1631
01:07:03,853 --> 01:07:05,787
我需要知道哪个Tweet要求我在这里。

1632
01:07:05,788 --> 01:07:07,722
副标题，

1633
01:07:07,791 --> 01:07:09,657
而且我知道这是哪个Tweet

1634
01:07:09,726 --> 01:07:11,859
说cellForRowAt。

1635
01:07:11,928 --> 01:07:15,897
这是要求的推文

1636
01:07:15,966 --> 01:07:20,101
我给它一个UITableViewCell为。

1637
01:07:20,170 --> 01:07:25,306
所以我会让tweet等于

1638
01:07:25,374 --> 01:07:32,046
我的模型subindex index.section和

1639
01:07:32,115 --> 01:07:35,550
indexPath.row。

1640
01:07:35,618 --> 01:07:38,352
所以我只是在这一节中得到这一行，

1641
01:07:38,421 --> 01:07:41,322
这得到第一个数组，该部分，

1642
01:07:41,390 --> 01:07:42,790
我只是把它排出来了。

1643
01:07:42,858 --> 01:07:46,427
所以现在我得到了推文，所以现在我可以更新单元格

1644
01:07:46,496 --> 01:07:51,598
真的很容易，cell.textLabel。

1645
01:07:51,667 --> 01:07:53,801
它可能是一个可选的？

1646
01:07:53,870 --> 01:07:56,638
让我们把它作为推文的文字。

1647
01:07:56,706 --> 01:08:00,174
这是你会在这里看到的，我们去

1648
01:08:00,243 --> 01:08:03,711
Twitter，并在Tweet上寻找Twitter框架，

1649
01:08:03,779 --> 01:08:07,014
你会看到第一个是文本。

1650
01:08:07,083 --> 01:08:11,018
然后我们将使这个单元格detailTextLabel，

1651
01:08:11,087 --> 01:08:15,589
它的文本将是tweet的用户名，假设。

1652
01:08:15,658 --> 01:08:20,261
再次，Tweet，用户，用户名。

1653
01:08:20,329 --> 01:08:24,265
所以，这就是为什么我得到的信息。

1654
01:08:24,334 --> 01:08:25,366
你明白吗

1655
01:08:25,435 --> 01:08:26,934
一部分，好吗？

1656
01:08:27,003 --> 01:08:28,736
所以，我会从这个Tweet中出来。

1657
01:08:28,804 --> 01:08:31,272
这是Tweet的类型。

1658
01:08:34,944 --> 01:08:35,442
大家都明白了吗?

1659
01:08:35,511 --> 01:08:40,014
好的，那是吗？

1660
01:08:40,082 --> 01:08:43,684
我们还需要做任何事情来勾引这件事情

1661
01:08:43,753 --> 01:08:44,552
使它工作？

1662
01:08:44,621 --> 01:08:46,921
结果不行

1663
01:08:46,990 --> 01:08:47,956
所以我们来运行吧

1664
01:08:51,561 --> 01:08:53,094
好的，那就是

1665
01:08:53,163 --> 01:08:55,362
世界上最伟大的Twitter客户端。

1666
01:08:55,431 --> 01:08:55,963
看那个。

1667
01:08:56,032 --> 01:08:56,965
它看起来很漂亮。

1668
01:08:58,201 --> 01:08:58,832
不，当然，事实上，

1669
01:08:58,901 --> 01:09:01,469
这是世界上最糟糕的Twitter客户。

1670
01:09:01,538 --> 01:09:02,470
但它正在工作。

1671
01:09:02,539 --> 01:09:03,704
这些都是推文。

1672
01:09:03,773 --> 01:09:06,073
但无论如何，你可以看到这里的推文和

1673
01:09:06,142 --> 01:09:09,110
这是推特的人。

1674
01:09:10,446 --> 01:09:13,414
显然，这是很糟糕的UI。

1675
01:09:13,483 --> 01:09:14,648
只是绝对可怕的UI。

1676
01:09:14,717 --> 01:09:16,918
你永远不会有这样的Twitter客户端。

1677
01:09:16,986 --> 01:09:19,954
我们希望我们的UI在这些单元格看起来更好，

1678
01:09:20,023 --> 01:09:22,190
更多的定制为一个tweet。

1679
01:09:22,259 --> 01:09:24,759
所以我们将在这里回到我们的故事板。

1680
01:09:24,828 --> 01:09:28,963
而不是使用这个可怕的副标题风格单元格，

1681
01:09:29,032 --> 01:09:30,631
我们要建立一个自定义单元格。

1682
01:09:30,699 --> 01:09:35,236
而这个定制单元格会更好看

1683
01:09:35,305 --> 01:09:38,672
更多的Twitter附带的数据。

1684
01:09:38,741 --> 01:09:39,840
所以我们来建立它。

1685
01:09:39,909 --> 01:09:43,611
让我们来这里做一点更大，做一些空间。

1686
01:09:43,679 --> 01:09:45,312
好吧，我会在这里抓一些标签。

1687
01:09:45,381 --> 01:09:47,982
有一个标签，这可能是，

1688
01:09:48,051 --> 01:09:49,584
让我们说这是Tweeter。

1689
01:09:49,653 --> 01:09:51,753
这是做Tweet的人。

1690
01:09:51,821 --> 01:09:55,089
顺便说一句，这是我们展示用户的一个例子

1691
01:09:55,157 --> 01:09:56,190
内容真的

1692
01:09:56,259 --> 01:09:57,625
这些推文是内容。

1693
01:09:57,694 --> 01:09:59,793
他们不像一个按钮的标题，

1694
01:09:59,862 --> 01:10:03,030
它实际上是用户请求查看的内容。

1695
01:10:03,099 --> 01:10:04,598
所以我会在这里使用一种字体。

1696
01:10:04,667 --> 01:10:05,400
你看到这个字体？

1697
01:10:05,468 --> 01:10:06,867
我不会使用系统字体。

1698
01:10:06,936 --> 01:10:10,137
我要下去开始使用这种文本样式。

1699
01:10:10,206 --> 01:10:12,940
所以高音将在顶端。

1700
01:10:13,009 --> 01:10:15,509
我将会成为一个标题字体。

1701
01:10:15,578 --> 01:10:17,378
所以这将成为标题字体

1702
01:10:17,447 --> 01:10:20,415
这可能会随着时间的推移而改变，好的，无论系统如何

1703
01:10:20,483 --> 01:10:23,050
认为标题字体是，并且在每个应用程序都是如此。

1704
01:10:23,118 --> 01:10:26,087
标题将永远在每个应用程序中使用这种字体

1705
01:10:26,156 --> 01:10:28,389
用户甚至可以进入设置

1706
01:10:28,458 --> 01:10:30,124
改变它们的字体大小。

1707
01:10:30,192 --> 01:10:31,225
如果他们像我一样

1708
01:10:31,294 --> 01:10:33,995
他们是愿景，他们可以让他们更大。

1709
01:10:34,064 --> 01:10:37,332
而且字体会自动变大

1710
01:10:37,400 --> 01:10:41,101
这是使用这些字体样式的最大优势。

1711
01:10:41,170 --> 01:10:42,703
那就是那个。

1712
01:10:42,772 --> 01:10:45,138
所以tweet本身就是文本

1713
01:10:45,207 --> 01:10:47,675
我们只需要调用该文本。

1714
01:10:47,744 --> 01:10:49,310
也许一个很好的字体是身体的字体，因为这是真的，这个

1715
01:10:49,311 --> 01:10:50,877
对于这一个，

1716
01:10:50,947 --> 01:10:53,281
是我们在这里做的，这个身体的东西的心脏。

1717
01:10:53,349 --> 01:10:56,217
有一件事，UILabel的文字很酷

1718
01:10:56,286 --> 01:10:58,252
在推文中可能会是多行，而且

1719
01:10:58,320 --> 01:10:59,387
它会包装。

1720
01:10:59,455 --> 01:11:01,389
当你有这样的UI标签时，

1721
01:11:01,457 --> 01:11:05,760
你想把这个属性行设为零。

1722
01:11:05,828 --> 01:11:09,230
如果您有零预定义的行，那么UILabel

1723
01:11:09,298 --> 01:11:12,199
然而，它需要适合的许多行

1724
01:11:12,268 --> 01:11:15,136
信息与包装。

1725
01:11:15,205 --> 01:11:18,473
而这一条是一条线一条线。

1726
01:11:18,541 --> 01:11:22,443
如果它太长，最后只得到点点，

1727
01:11:22,511 --> 01:11:23,310
好吧？

1728
01:11:23,379 --> 01:11:24,311
我还想在这里做什么？

1729
01:11:24,380 --> 01:11:26,547
我们在这里做另一个标签

1730
01:11:26,616 --> 01:11:30,251
当tweet被推送出来，当它被创建。

1731
01:11:30,319 --> 01:11:34,321
那可能是一个标题，我们会说。

1732
01:11:34,390 --> 01:11:36,624
底部有小小的文字。

1733
01:11:36,693 --> 01:11:40,094
我们会继续前进，而不是在那里。

1734
01:11:40,163 --> 01:11:41,895
我们还会得到一个图像。

1735
01:11:41,964 --> 01:11:44,131
我们下来，在这里找到图像视图。

1736
01:11:44,200 --> 01:11:44,832
我们的图像视图在哪里？

1737
01:11:44,901 --> 01:11:45,666
这里是。

1738
01:11:45,735 --> 01:11:48,202
把它拖出这里。这将是个人资料

1739
01:11:48,270 --> 01:11:49,970
Tweeter的图像。

1740
01:11:50,039 --> 01:11:52,607
所以tweeted 有小的图像在这里

1741
01:11:53,676 --> 01:11:54,575
顺便说一句，

1742
01:11:54,643 --> 01:11:57,879
我不知道Twitter上有多大的个人资料图片。

1743
01:11:57,947 --> 01:12:00,447
我不在乎，因为我会做这件事

1744
01:12:00,516 --> 01:12:02,216
总是一个固定的大小。

1745
01:12:02,285 --> 01:12:05,419
那么我们如何使这样的图像是一个固定的大小

1746
01:12:05,488 --> 01:12:06,153
使用自动布局？

1747
01:12:06,221 --> 01:12:09,924
而事实证明，你所做的是你Ctrl +拖动到自己。

1748
01:12:09,992 --> 01:12:11,058
当你做的时候，

1749
01:12:11,127 --> 01:12:14,662
你会看到你可以选择修改它的宽度。

1750
01:12:14,731 --> 01:12:17,130
并且您可以Ctrl +拖动并修复其高度。

1751
01:12:17,199 --> 01:12:18,899
你也可以同时两个同时。

1752
01:12:18,968 --> 01:12:21,402
那么它的宽度和高度有多大呢？

1753
01:12:21,470 --> 01:12:23,871
那么我们可以在这里查看大小检查器，

1754
01:12:23,940 --> 01:12:25,873
看到它已经修复到71乘67。

1755
01:12:25,941 --> 01:12:30,878
这听起来不是计算机科学，

1756
01:12:30,947 --> 01:12:34,315
我会把它修复到64乘64。

1757
01:12:34,384 --> 01:12:35,416
所以我已经这样做了

1758
01:12:35,484 --> 01:12:38,352
这个图像视图总是要64 64。

1759
01:12:38,421 --> 01:12:41,455
我不在乎这个人的实际档案图像有多大

1760
01:12:41,524 --> 01:12:42,690
是，我一直想要这样。

1761
01:12:42,759 --> 01:12:44,592
好的，所以还有一点小自动布局

1762
01:12:44,660 --> 01:12:45,426
tidbit为你

1763
01:12:47,129 --> 01:12:48,512
说到自动布局，我需要把这个东西放在一起。

1764
01:12:48,513 --> 01:12:49,896
好的，所以

1765
01:12:49,966 --> 01:12:52,700
我有点想要看，呃，这样的事情。

1766
01:12:52,768 --> 01:12:53,801
明白我的意思吗？

1767
01:12:53,870 --> 01:12:56,370
大概，所以我只是要使用堆栈视图。

1768
01:12:56,439 --> 01:13:01,475
所以我们把这两件事叠在一起，就这样。

1769
01:13:01,544 --> 01:13:02,877
看看我们这里的东西，填写并填写。

1770
01:13:02,945 --> 01:13:04,845
没关系

1771
01:13:04,914 --> 01:13:06,580
我们来过这里

1772
01:13:06,649 --> 01:13:07,615
我们把它们叠在一起

1773
01:13:07,683 --> 01:13:09,783
这是填写和填写。

1774
01:13:09,852 --> 01:13:12,353
关于这两个，有一件事，顺便说一下，他们会是

1775
01:13:12,421 --> 01:13:16,556
在这个堆栈视图中共享空间。

1776
01:13:16,625 --> 01:13:19,494
但我不希望他们平等分享。

1777
01:13:19,562 --> 01:13:24,065
我实际上希望文本获得更多的空间。

1778
01:13:24,133 --> 01:13:26,967
所以我要点击Tweeter。

1779
01:13:27,036 --> 01:13:29,069
我会去看这个大小的检查员。

1780
01:13:29,138 --> 01:13:30,404
我会做一些很酷的事情，

1781
01:13:30,473 --> 01:13:32,573
这是设置其拥有优先级的内容。

1782
01:13:32,641 --> 01:13:35,209
我会设置其垂直内容

1783
01:13:35,278 --> 01:13:37,911
拥抱优先级高于另一个。

1784
01:13:37,980 --> 01:13:38,612
所以他们都是251。

1785
01:13:38,681 --> 01:13:41,282
你看，那是251，那是251。

1786
01:13:41,351 --> 01:13:43,083
所以我要把这个设置为300，

1787
01:13:43,152 --> 01:13:44,451
只要高于251。

1788
01:13:44,520 --> 01:13:47,454
这意味着当空间被分配时

1789
01:13:47,523 --> 01:13:48,389
在这个高音扬声器之间

1790
01:13:48,458 --> 01:13:52,360
文本，它会拥抱高音的内容。

1791
01:13:52,429 --> 01:13:55,229
文字将会得到所有的休息。

1792
01:13:55,298 --> 01:13:56,330
所以这是一种你可以这样的方式，

1793
01:13:56,399 --> 01:13:59,834
当你在两件事情之间分享空间时。

1794
01:13:59,902 --> 01:14:03,370
好的，现在让我们把这两个放在一起。

1795
01:14:03,439 --> 01:14:08,142
也许我们会在这里放一些间距。

1796
01:14:08,210 --> 01:14:10,911
在这里对齐，顶部是好的，我希望他们都在顶部。

1797
01:14:10,980 --> 01:14:14,148
我觉得很好，排在最上。

1798
01:14:14,217 --> 01:14:17,451
如果我喜欢这样，填补是好的，我有这个。

1799
01:14:17,520 --> 01:14:19,119
现在我要做同样的事情，我们以前做过，

1800
01:14:19,188 --> 01:14:21,355
我要把它放在角落里。

1801
01:14:21,423 --> 01:14:24,425
我会把Ctrl拖到顶部。

1802
01:14:24,494 --> 01:14:28,028
我要把Ctrl拖到前沿。

1803
01:14:28,097 --> 01:14:31,098
我会把Ctrl拖到后端。

1804
01:14:31,166 --> 01:14:34,000
我会把Ctrl拖到底边。

1805
01:14:34,069 --> 01:14:35,035
所以我想要那里。

1806
01:14:35,104 --> 01:14:36,136
再一次，同样的事情。

1807
01:14:36,205 --> 01:14:39,640
我会把它改成标准，如果可以的话。

1808
01:14:39,709 --> 01:14:40,907
我不能，所以我们去0。

1809
01:14:40,976 --> 01:14:42,443
同样的事情在这里。

1810
01:14:43,546 --> 01:14:47,915
标准如果可以，不能，我们会做0。

1811
01:14:47,984 --> 01:14:50,551
所以我做了这个堆栈视图包含所有

1812
01:14:50,620 --> 01:14:51,819
东西适合那里。

1813
01:14:51,888 --> 01:14:56,123
所以我基本上做了这样的自动布局

1814
01:14:56,192 --> 01:14:58,759
事情正确地使用空间。

1815
01:14:58,828 --> 01:15:01,662
我还可以改变单元格的大小，好吗？

1816
01:15:01,730 --> 01:15:04,998
我可以点击它，我可以使它更小一些

1817
01:15:05,067 --> 01:15:06,634
所有的东西都会去，你知道，

1818
01:15:06,703 --> 01:15:08,435
坚持到边缘，这样就可以了。

1819
01:15:08,504 --> 01:15:09,836
现在，这是伟大的，

1820
01:15:09,905 --> 01:15:13,240
其实如果我们回到我们的表视图控制器和

1821
01:15:13,308 --> 01:15:17,110
如果我注释掉这个单元格配置，因为我们没有

1822
01:15:17,179 --> 01:15:20,848
有一个字幕，所以这些没有任何意义。

1823
01:15:20,917 --> 01:15:24,084
我们跑步，那么我们会希望看到我们的UI，

1824
01:15:24,153 --> 01:15:26,220
如果我们没有忘记任何东西

1825
01:15:27,790 --> 01:15:30,791
它会在某些方面看起来好一点。

1826
01:15:30,860 --> 01:15:32,226
是的，所以看起来好点了

1827
01:15:32,294 --> 01:15:35,496
现在，唯一不是更好的是我们丢失了我们的数据

1828
01:15:35,565 --> 01:15:38,899
因为我在这里注释了数据加载。

1829
01:15:38,968 --> 01:15:41,902
所以这就是我们希望UI看起来像基本一样

1830
01:15:41,971 --> 01:15:43,403
这里的图像和那里。

1831
01:15:43,472 --> 01:15:45,472
但是我们需要设置所有这些数据。

1832
01:15:45,541 --> 01:15:46,406
那我们怎么办呢？

1833
01:15:46,475 --> 01:15:49,109
因为这是这里的一个定制单元格。

1834
01:15:49,178 --> 01:15:51,845
我们需要一个自定义的子类

1835
01:15:51,914 --> 01:15:54,215
的这个UI表视图单元格。

1836
01:15:54,283 --> 01:15:55,983
所以，我将要创建一个新文件。

1837
01:15:56,052 --> 01:16:01,255
我们来这里和新文件。

1838
01:16:01,323 --> 01:16:03,691
再次，Cocoa Touch Class;这一次，

1839
01:16:03,760 --> 01:16:07,127
它不是一个TableViewController它是一个TableViewCell。

1840
01:16:07,196 --> 01:16:09,029
我会叫它TweetTableViewCell cuz

1841
01:16:09,098 --> 01:16:10,998
它显示了推文，

1842
01:16:11,066 --> 01:16:15,002
放在与我所有其余的东西在同一个地方。

1843
01:16:15,070 --> 01:16:17,772
这是我的表格视图单元格，它给我awakeFromNib

1844
01:16:17,840 --> 01:16:20,340
这是一个很好的，但我不需要它并设置选择

1845
01:16:20,409 --> 01:16:22,843
当我的表视图单元格时，我什么都不做

1846
01:16:22,911 --> 01:16:25,413
选择但我可以，我可以画一个蓝色的背景或

1847
01:16:25,481 --> 01:16:28,549
像我想要的东西，但我不是。

1848
01:16:28,618 --> 01:16:30,750
所以，我有这个TableViewCell子类。

1849
01:16:30,819 --> 01:16:32,586
我会回到我的故事板和

1850
01:16:32,654 --> 01:16:35,322
确保我设定身份，

1851
01:16:35,391 --> 01:16:37,124
别忘了这一步。

1852
01:16:37,192 --> 01:16:40,294
将身份设置为TweetTableViewCell。

1853
01:16:40,363 --> 01:16:41,361
如果你忘记了这一步，

1854
01:16:41,430 --> 01:16:43,464
你将无法做任何网点或类似的事情。

1855
01:16:45,201 --> 01:16:48,269
现在，我想连线到这个新班我

1856
01:16:48,337 --> 01:16:50,471
刚刚创建，所以我需要把它们都放在屏幕上，

1857
01:16:50,539 --> 01:16:52,373
我会告诉你一个很酷的方法来做到这一点。

1858
01:16:52,442 --> 01:16:54,408
让我们在这里找助理编辑，

1859
01:16:54,477 --> 01:16:56,377
记得我可以做手册，blah，blah，blah，

1860
01:16:56,445 --> 01:16:59,680
但另一种方式是按住选项键，和

1861
01:16:59,748 --> 01:17:02,249
只要点击你想要在右边的东西，

1862
01:17:02,318 --> 01:17:04,852
我想我以前展示过，但是选择

1863
01:17:04,921 --> 01:17:08,956
在导航仪中点击会将该东西放在右边。

1864
01:17:09,024 --> 01:17:13,093
好吧，让我们把它移到更多的地方。

1865
01:17:13,162 --> 01:17:15,196
好吧，所以我需要连线到这四个

1866
01:17:15,264 --> 01:17:17,164
事物，权利，推文或文字或图像。

1867
01:17:17,232 --> 01:17:18,465
所以我们来做这个。

1868
01:17:18,534 --> 01:17:19,800
我们会去这里，Ctrl +拖动，

1869
01:17:19,869 --> 01:17:24,437
屏幕出来，我会把这个叫做tweet，我叫什么

1870
01:17:24,506 --> 01:17:30,177
我的tweetProfileImageView。

1871
01:17:30,246 --> 01:17:32,279
Cuz将会是一个显示的UIImageView

1872
01:17:32,347 --> 01:17:34,915
Tweeter的资料。

1873
01:17:34,984 --> 01:17:38,419
让我们在这里做点小事，

1874
01:17:38,487 --> 01:17:41,021
Ctrl +拖动。

1875
01:17:41,089 --> 01:17:43,924
我们称这个tweetCreatedLabel。

1876
01:17:43,993 --> 01:17:46,693
标记它。

1877
01:17:46,762 --> 01:17:50,497
显示何时被创建;让我们做点小高音

1878
01:17:50,566 --> 01:17:55,269
在这里，我们称之为tweetUserLabel，

1879
01:17:55,338 --> 01:17:57,871
这将显示推文的标签

1880
01:17:57,940 --> 01:18:00,540
用户，然后我们将在这里显示文本

1881
01:18:00,609 --> 01:18:02,943
实际tweetText，tweetTextLabel。

1882
01:18:06,649 --> 01:18:09,950
所以我在这里有这些漂亮的小卖点。

1883
01:18:10,018 --> 01:18:12,620
现在我需要能够设置这些outlet

1884
01:18:12,688 --> 01:18:16,323
我在这里需要公开API

1885
01:18:16,392 --> 01:18:19,994
表格视图单元格，这给了我需要这样做的数据。

1886
01:18:20,062 --> 01:18:23,898
而我只是要让我的公共API是tweet，

1887
01:18:23,966 --> 01:18:27,400
给我Twitter.Tweet你想要和

1888
01:18:27,469 --> 01:18:29,170
我会加载这些婴儿。

1889
01:18:30,139 --> 01:18:30,971
这就是这里所说的。

1890
01:18:31,040 --> 01:18:33,541
当然，我们需要导入Twitter。

1891
01:18:34,676 --> 01:18:37,144
Cuz我们在这个课上使用它。

1892
01:18:37,212 --> 01:18:40,781
当你设置这个Tweet时，我只是去doSet。

1893
01:18:40,849 --> 01:18:43,150
更新我的UI就像我是一个控制器，但是

1894
01:18:43,218 --> 01:18:46,120
我不是，我不是控制者，我实际上是一个视图。

1895
01:18:46,188 --> 01:18:49,723
这是唯一一个视图可以有这些outlet。

1896
01:18:49,792 --> 01:18:54,095
所以我需要一些私有的func来做这个updateUI。

1897
01:18:56,565 --> 01:19:00,000
现在，时间在这里运行了一点点，所以

1898
01:19:00,069 --> 01:19:02,569
我只是快速输入这个

1899
01:19:02,638 --> 01:19:04,571
我相信我有tweet电池。

1900
01:19:04,640 --> 01:19:05,506
有没有，好吗？

1901
01:19:06,976 --> 01:19:07,875
但你可以稍后再看一下。

1902
01:19:07,944 --> 01:19:10,343
但我只是在这里设置所有的outlet。

1903
01:19:10,412 --> 01:19:13,013
看看我如何设置这些outlet，如设置tweet

1904
01:19:13,082 --> 01:19:15,282
标签，文字是Twitter的文字，

1905
01:19:15,350 --> 01:19:18,252
将用户标签设置为用户描述。

1906
01:19:18,321 --> 01:19:20,521
注意我在这里阻止主线程的方式。

1907
01:19:22,558 --> 01:19:25,458
如果这是我的家庭作业，那么我刚刚得到了笨蛋。

1908
01:19:25,527 --> 01:19:27,361
所以确保你解决这个，好吗？

1909
01:19:27,429 --> 01:19:30,497
如果你以任何方式在你的家庭作业中使用我的代码，

1910
01:19:30,566 --> 01:19:31,865
你可能想要的，

1911
01:19:31,933 --> 01:19:34,434
那么你会想要解决这个问题。

1912
01:19:34,503 --> 01:19:35,669
不要在主线程上这样做。

1913
01:19:35,738 --> 01:19:36,904
不要阻塞主线程。

1914
01:19:36,972 --> 01:19:39,173
但是，有没有人明白updateUI在这里做什么？

1915
01:19:39,242 --> 01:19:41,041
只是把这个Tweet给我，

1916
01:19:41,110 --> 01:19:42,742
并加载它。

1917
01:19:42,811 --> 01:19:44,544
这一直在发生

1918
01:19:44,613 --> 01:19:47,681
表中的每一行显示。

1919
01:19:47,750 --> 01:19:50,550
这是发生了，这个类的副本已经被做了

1920
01:19:50,619 --> 01:19:51,852
这是发生。

1921
01:19:51,921 --> 01:19:53,720
现在，我们如何设定？

1922
01:19:53,789 --> 01:19:58,692
我们将此设置回到这里和我们的TweetTableViewController。

1923
01:19:58,761 --> 01:20:02,429
在我们在这里配置单元格的同一个地方

1924
01:20:02,498 --> 01:20:04,197
副标题一。

1925
01:20:04,266 --> 01:20:07,000
事实上，我仍然需要推文，但我不需要。

1926
01:20:07,069 --> 01:20:08,368
我会离开那里，所以

1927
01:20:08,437 --> 01:20:10,804
当你稍后再看时，你可以记住这段代码。

1928
01:20:10,873 --> 01:20:13,807
但是，我只是想要，而不是设定这些东西

1929
01:20:13,875 --> 01:20:17,277
要设置这个鸣叫，我想在这里设置这个var。

1930
01:20:17,346 --> 01:20:19,046
但是对我而言，

1931
01:20:19,115 --> 01:20:21,281
我需要让我的表视图成为其中之一。

1932
01:20:21,350 --> 01:20:22,349
所以，我需要使用一个。

1933
01:20:22,418 --> 01:20:24,484
所以，我要说，

1934
01:20:24,553 --> 01:20:28,655
如果我可以让tweetCell等于单元格，

1935
01:20:28,724 --> 01:20:34,494
这个可重用的单元格，作为一个TweetTableViewCell，

1936
01:20:34,563 --> 01:20:39,600
那么，我可以说，细胞设置你的推文是我的推文。

1937
01:20:39,669 --> 01:20:44,605
这在这行，段和行中。

1938
01:20:44,674 --> 01:20:51,578
现在，我们设置，什么，对不起，tweetCell.tweet。

1939
01:20:51,646 --> 01:20:55,215
我们在这里设定了这个原型的类，

1940
01:20:55,284 --> 01:20:57,484
这个单元格的原型。

1941
01:20:57,553 --> 01:20:59,018
我们用身份来设定它

1942
01:20:59,087 --> 01:21:01,722
检查员成为TweetTableViewCell。

1943
01:21:01,790 --> 01:21:03,790
所以，当我们来这里的时候，事实上，

1944
01:21:03,859 --> 01:21:05,425
这将工作。

1945
01:21:05,494 --> 01:21:08,161
好吧，这将是一个TweetTableViewCell cuz我们说

1946
01:21:08,230 --> 01:21:11,532
在故事板中，所以，它创造了那种事情，

1947
01:21:11,600 --> 01:21:12,198
好吧？

1948
01:21:12,267 --> 01:21:13,634
所以，看看这是否有效。

1949
01:21:18,474 --> 01:21:19,806
好的，它正在工作。

1950
01:21:19,875 --> 01:21:22,743
看，我们有这个人推特的时候，

1951
01:21:22,812 --> 01:21:24,711
有人推送它，

1952
01:21:24,780 --> 01:21:28,682
它得到了tweeting的文本，但我们没有形象。

1953
01:21:28,751 --> 01:21:32,152
为什么我们没有在这里得到人的图像？

1954
01:21:32,221 --> 01:21:33,520
好的，为什么你觉得我们没有得到这些，

1955
01:21:33,589 --> 01:21:35,222
这些图像？

1956
01:21:35,291 --> 01:21:37,657
那我们来看看我们的控制台。

1957
01:21:37,726 --> 01:21:39,058
它说什么？

1958
01:21:39,127 --> 01:21:39,626
没有！

1959
01:21:39,695 --> 01:21:41,428
应用传输安全。

1960
01:21:41,496 --> 01:21:43,597
你认识到从上次？

1961
01:21:43,665 --> 01:21:47,601
这是因为这些配置文件不是http的

1962
01:21:47,669 --> 01:21:49,102
https的东西。

1963
01:21:49,171 --> 01:21:50,371
所以，我们知道如何解决这个问题。

1964
01:21:50,439 --> 01:21:53,240
我们将在这里回到Info.plist。

1965
01:21:53,309 --> 01:21:56,877
并为App Transport Security添加一行。

1966
01:21:56,946 --> 01:22:01,348
我们会打开这个，我们在这里添加任意负载，

1967
01:22:01,416 --> 01:22:05,619
我们会这样做，是的，我们允许任意加载。

1968
01:22:05,688 --> 01:22:07,086
这里还有另一个问题。

1969
01:22:07,155 --> 01:22:08,422
看看所有这些推文。

1970
01:22:08,490 --> 01:22:11,157
看看他们怎么被切断了，你看到了？

1971
01:22:11,226 --> 01:22:14,928
每排都是相同的大小，它不够大

1972
01:22:14,997 --> 01:22:15,729
大部分的推文。

1973
01:22:15,798 --> 01:22:17,831
它只是点，点，点，点，点，点。

1974
01:22:17,900 --> 01:22:20,801
如果这些行可以是不同的大小，那不会很酷

1975
01:22:20,869 --> 01:22:22,969
取决于推特的大小？

1976
01:22:23,038 --> 01:22:24,604
那么当然我们可以这么做

1977
01:22:24,673 --> 01:22:25,672
咱们开始吧！

1978
01:22:25,740 --> 01:22:28,508
我们现在来看看这个大小是如何说的。

1979
01:22:28,577 --> 01:22:31,411
现在呢，就是说，如果我们去

1980
01:22:31,480 --> 01:22:34,782
检查这个细胞在其尺寸检查员，看，

1981
01:22:34,850 --> 01:22:38,552
行高是96，所以每一行都是96。

1982
01:22:38,620 --> 01:22:43,156
我们想要做的是在我们的视野中，在这里，

1983
01:22:43,225 --> 01:22:47,827
我们想说我们的tableView的行高不是

1984
01:22:47,896 --> 01:22:52,432
96，它是UITableViewAutomaticDimension。

1985
01:22:52,501 --> 01:22:55,869
但正如我之前所说，我们也想给它一点帮助

1986
01:22:55,938 --> 01:22:59,439
通过将其估计行高度设置为某个值。

1987
01:22:59,508 --> 01:23:00,073
那么我想说

1988
01:23:00,142 --> 01:23:01,841
让我们将它设置为故事板中的内容。

1989
01:23:01,910 --> 01:23:04,811
tableView.rowHeight，好吗？

1990
01:23:04,880 --> 01:23:06,879
所以，我把lineHeight从故事板中取出来，

1991
01:23:06,948 --> 01:23:08,114
用它作为估计。

1992
01:23:08,183 --> 01:23:09,049
然后，我正在重置

1993
01:23:09,117 --> 01:23:10,918
rowHeight将成为AutomaticDimension。

1994
01:23:17,727 --> 01:23:19,059
当然，看，看，

1995
01:23:19,128 --> 01:23:20,928
这个高大的推文正在获得额外的空间

1996
01:23:20,996 --> 01:23:23,530
一些较小的推文，我不知道我们有没有，

1997
01:23:23,599 --> 01:23:25,766
如果我们这样走，你可能会看到它。

1998
01:23:25,835 --> 01:23:30,370
较小的推文获得的空间较小，好吗？

1999
01:23:30,438 --> 01:23:31,838
所以，那很好

2000
01:23:31,907 --> 01:23:35,275
我们已经不在时间了，所以，如果你必须去，感到自由。

2001
01:23:35,344 --> 01:23:38,077
最后一件事我会在这里做一点点时间

2002
01:23:38,146 --> 01:23:40,580
在顶部添加一个文本字段，让我们输入什么

2003
01:23:40,649 --> 01:23:43,750
我们想搜索，而不是一直在寻找斯坦福。

2004
01:23:43,819 --> 01:23:46,420
所以，我们要让斯坦福从那里出来，好吗？

2005
01:23:46,488 --> 01:23:47,387
那么我们怎么做呢？

2006
01:23:47,455 --> 01:23:48,254
真的很容易

2007
01:23:48,323 --> 01:23:49,656
我们有，如果你记得，

2008
01:23:49,725 --> 01:23:52,225
在桌面视图中，顶部有这个小标题视图。

2009
01:23:52,294 --> 01:23:54,527
所以，我要拿一个UITextField。

2010
01:23:54,596 --> 01:23:56,396
记住我们学习的可编辑文本字段

2011
01:23:56,465 --> 01:23:57,130
最后的讲座？

2012
01:23:57,199 --> 01:23:58,665
我会把它放在顶部。

2013
01:23:58,734 --> 01:24:01,601
有时候，看看发生的地方有点困难，

2014
01:24:01,670 --> 01:24:04,237
但是当它看起来像这样，表的宽度，那么，

2015
01:24:04,306 --> 01:24:06,139
你有它，它放在那里。

2016
01:24:06,208 --> 01:24:08,742
它也有点难以选择和点击。

2017
01:24:08,811 --> 01:24:11,444
所以，你将要使用Ctrl + Shift +单击。

2018
01:24:11,513 --> 01:24:13,713
这样，您可以选择控制器，或

2019
01:24:13,782 --> 01:24:16,449
表视图，或在这种情况下，文本字段。

2020
01:24:16,518 --> 01:24:18,318
我要检查一下，然后改一下。

2021
01:24:18,387 --> 01:24:21,221
我要使字体更大一些，

2022
01:24:21,290 --> 01:24:22,255
我们会说22。

2023
01:24:22,324 --> 01:24:24,991
现在，注意我也可以设置所有这些文本字段的东西

2024
01:24:25,060 --> 01:24:25,792
谈论

2025
01:24:25,861 --> 01:24:27,694
喜欢，我不想要自动纠正。

2026
01:24:27,763 --> 01:24:30,931
我不想说，搜索主题标签SuperBowl和

2027
01:24:31,000 --> 01:24:33,734
改变它的标签SuperSpaceBowl，好吗？

2028
01:24:33,803 --> 01:24:35,435
所以，我不希望有任何改正。

2029
01:24:35,504 --> 01:24:36,803
键盘类型，哦，看，

2030
01:24:36,872 --> 01:24:38,405
有一个Twitter键盘类型。

2031
01:24:38,473 --> 01:24:41,275
这可能是＃和@ sign，这样的事情。

2032
01:24:41,343 --> 01:24:42,175
返回键，

2033
01:24:42,244 --> 01:24:44,978
这只是关键的事情说回报。

2034
01:24:45,047 --> 01:24:47,213
我在这里搜索，所以我想说搜索。

2035
01:24:47,282 --> 01:24:50,517
所以，这意味着返回键会说，我会搜索。

2036
01:24:50,586 --> 01:24:52,753
另外，一点点清晰的按钮会很酷，

2037
01:24:52,821 --> 01:24:55,455
按钮可以清除出现的情况。

2038
01:24:55,524 --> 01:24:58,524
所以，你可以以任何你想要的方式配置它

2039
01:24:58,593 --> 01:24:59,859
使其在那里工作。

2040
01:24:59,928 --> 01:25:03,163
现在，通常我会运行它，告诉你它在那里，

2041
01:25:03,231 --> 01:25:04,598
我们先把它连线起来，所以实际上做了一些事情。

2042
01:25:04,599 --> 01:25:05,966
但是当然，

2043
01:25:06,034 --> 01:25:08,068
如果你只是连接一个文本字段是很容易的

2044
01:25:08,136 --> 01:25:11,070
想把它挂到一个出口，并设置其代表，和

2045
01:25:11,139 --> 01:25:13,440
那么你可以找出按下返回键的时间。

2046
01:25:13,509 --> 01:25:14,808
所以，我们这样做。

2047
01:25:14,876 --> 01:25:17,677
我们会去这里，让我们的TweetTableViewController

2048
01:25:17,746 --> 01:25:18,846
同时屏幕。

2049
01:25:18,914 --> 01:25:21,081
我们只想创造一个出路。

2050
01:25:21,150 --> 01:25:23,182
我会把它放在这里。

2051
01:25:23,251 --> 01:25:24,384
所以，我只是，

2052
01:25:24,452 --> 01:25:28,588
再次，我可能想要Shift +点击选择它。

2053
01:25:28,657 --> 01:25:30,190
我，哎哟，挑错了。

2054
01:25:31,960 --> 01:25:34,828
所以，让我们Shift +点击，点击这里，选择这个，

2055
01:25:34,896 --> 01:25:39,433
和Ctrl +拖动它，并看到它是一个UITextField，和

2056
01:25:39,502 --> 01:25:41,969
我会把它称为我的searchTextField。

2057
01:25:43,138 --> 01:25:43,904
就那么简单。

2058
01:25:43,972 --> 01:25:49,742
当我设定好时，我将自己作为代理。

2059
01:25:49,811 --> 01:25:53,814
searchTextField.delegate = self。

2060
01:25:53,882 --> 01:25:58,051
当然，对于我来说，我不得不去

2061
01:25:58,120 --> 01:26:02,422
在这里，说是的，我是一个UITextFieldDelegate。

2062
01:26:02,490 --> 01:26:05,225
好的，他们所有的方法都是可选的，所以，

2063
01:26:05,293 --> 01:26:08,294
我现在已经成功地实施了该协议。

2064
01:26:08,363 --> 01:26:11,298
哦，这里发生了什么？

2065
01:26:11,367 --> 01:26:14,434
是的，好的，所以我设置了委托。

2066
01:26:14,503 --> 01:26:16,870
现在，我要实现我想要的委托方法，

2067
01:26:16,939 --> 01:26:18,204
这是应该回来的。

2068
01:26:18,273 --> 01:26:20,440
当发送返回按钮时，它会发送给我。

2069
01:26:20,508 --> 01:26:21,708
那就是textField，

2070
01:26:21,777 --> 01:26:24,244
注意当我键入textField它显示给我所有，

2071
01:26:24,313 --> 01:26:27,381
这是正确的在这里textFieldShouldReturn。

2072
01:26:27,449 --> 01:26:30,617
让我变得更大，更大一点

2073
01:26:30,685 --> 01:26:32,719
你可以看得更好

2074
01:26:32,788 --> 01:26:34,254
好的，所以这里应该回来

2075
01:26:34,323 --> 01:26:36,756
如果我得到回报，我实际上会检查一下

2076
01:26:36,825 --> 01:26:39,259
确定我从我的searchTextField得到这个，

2077
01:26:39,328 --> 01:26:42,128
因为有一天我可能会有其他文字字段，我想

2078
01:26:42,197 --> 01:26:45,265
确保我得到了，我知道我在说什么。

2079
01:26:45,333 --> 01:26:47,066
所以textField在这里就是这个参数

2080
01:26:47,135 --> 01:26:48,969
我只是检查，以确保它是我。

2081
01:26:49,038 --> 01:26:53,173
如果这是真的，那么我将会设定我的

2082
01:26:53,242 --> 01:26:58,678
searchText = searchTextFields.text，好吗？

2083
01:26:58,747 --> 01:27:00,480
有意义，当我设置我的searchText时，

2084
01:27:00,549 --> 01:27:03,683
马上就要开始了。

2085
01:27:03,752 --> 01:27:05,919
请注意，ShouldReturn也会返回一个Bool

2086
01:27:05,988 --> 01:27:08,988
是否按通常按返回按钮进行操作。

2087
01:27:09,057 --> 01:27:10,189
在这种情况下什么都没有，

2088
01:27:10,258 --> 01:27:11,691
我们没有任何目标行动

2089
01:27:11,760 --> 01:27:13,326
别的什么，但我们会返回true。

2090
01:27:13,395 --> 01:27:15,996
当然可以做你通常做的，现在唯一的其他事情

2091
01:27:16,064 --> 01:27:18,331
现在我们有searchTextField，

2092
01:27:18,400 --> 01:27:20,433
当我们设置我们的searchText在这里。

2093
01:27:20,502 --> 01:27:23,003
我们想更新我们的searchTextField。

2094
01:27:25,374 --> 01:27:28,541
我会小心这里，以防我在做准备。

2095
01:27:28,610 --> 01:27:31,711
我们将它设置为我们设置它的searchText。

2096
01:27:31,780 --> 01:27:33,913
我也要我的searchTextField

2097
01:27:33,982 --> 01:27:37,049
在这里resignFirstResponder。

2098
01:27:37,118 --> 01:27:40,453
那就是有人打字，点击去搜索，

2099
01:27:40,522 --> 01:27:42,488
我们搜索一些东西，把它放在那里。

2100
01:27:42,557 --> 01:27:43,923
我要把键盘拿走。

2101
01:27:43,992 --> 01:27:45,658
Cuz我只是不想让键盘阻塞

2102
01:27:45,727 --> 01:27:47,427
他们刚刚要求的结果。

2103
01:27:47,496 --> 01:27:48,761
还有人将其设置为代码。

2104
01:27:48,830 --> 01:27:50,397
我会摆脱键盘。

2105
01:27:50,465 --> 01:27:51,798
有人可能正在打字，但是

2106
01:27:51,867 --> 01:27:53,400
如果有人设置代码而不是打字。

2107
01:27:53,468 --> 01:27:56,769
让我们把键盘拿出来，好吗？

2108
01:27:56,838 --> 01:27:57,537
所以我们去做吧

2109
01:27:59,274 --> 01:28:01,642
将此代码留在屏幕上，以便您可以看到它。

2110
01:28:07,616 --> 01:28:11,451
好的，所以这里是我们的文本字段，这很难

2111
01:28:11,520 --> 01:28:14,888
看看这个运营商，我们会在一秒钟内解决这个问题。

2112
01:28:14,957 --> 01:28:17,224
我们再去寻找#stanford。

2113
01:28:17,293 --> 01:28:19,526
哎呀，我不会这样做，看这个。

2114
01:28:19,595 --> 01:28:21,194
好的，看起来很容易打字，不是吗？

2115
01:28:21,262 --> 01:28:22,729
好吧，我们去这里

2116
01:28:22,797 --> 01:28:28,301
说键盘，关掉硬体键盘。

2117
01:28:28,370 --> 01:28:29,635
现在当我们点击这里时，

2118
01:28:29,704 --> 01:28:31,037
哦，这很难打字。

2119
01:28:31,106 --> 01:28:35,242
#stanford，好吧，现在你进入了什么

2120
01:28:35,310 --> 01:28:39,846
我在说，学会像你的用户一样类型。

2121
01:28:39,915 --> 01:28:42,582
所以在这里我要搜索，在斯坦福德和

2122
01:28:42,651 --> 01:28:43,450
搜索它。

2123
01:28:43,518 --> 01:28:46,619
我们去寻找其他的东西。

2124
01:28:46,688 --> 01:28:48,688
也许我们会搜索，

2125
01:28:48,756 --> 01:28:53,159
这是一种危险的，因为人们可能会说，但是

2126
01:28:53,228 --> 01:28:59,198
特朗普>>好的，

2127
01:28:59,267 --> 01:29:01,468
有一些特朗普的。

2128
01:29:03,104 --> 01:29:04,303
现在我们已经做到了这一切。

2129
01:29:04,372 --> 01:29:05,672
我想修复这个东西，

2130
01:29:05,740 --> 01:29:08,207
在这里看起来真的很糟糕。

2131
01:29:08,276 --> 01:29:09,910
这真的很容易解决。

2132
01:29:09,978 --> 01:29:11,845
我正在去哪里，这是修复。

2133
01:29:11,913 --> 01:29:14,013
这个修复是你所学到的UI中的一切。

2134
01:29:14,082 --> 01:29:17,917
我要把它嵌入导航控制器。

2135
01:29:17,986 --> 01:29:22,055
好的，当你将它嵌入导航控制器并运行时，

2136
01:29:22,123 --> 01:29:25,124
你可以看到它在顶部是一个很好的标题，

2137
01:29:25,193 --> 01:29:27,059
它将文本字段向下移动，

2138
01:29:27,128 --> 01:29:29,429
它只是更好的周围。

2139
01:29:29,498 --> 01:29:32,164
好的，看看它在这里做了什么。

2140
01:29:32,233 --> 01:29:34,867
我要做的另一件事就是把占位符文本放进去

2141
01:29:34,936 --> 01:29:36,502
在那里，我打算告诉你。

2142
01:29:36,571 --> 01:29:40,940
对不起，让我们这样做，如果我回到这里点击这个。

2143
01:29:41,009 --> 01:29:44,110
那个东西在这里，滑动这个指南。

2144
01:29:44,179 --> 01:29:48,648
你可以把这样的占位符文本，Twitter Search和

2145
01:29:48,717 --> 01:29:50,984
看到它显示在那里，有点像灰色。

2146
01:29:51,053 --> 01:29:54,421
所以当你运行的时候，用户更为明显，

2147
01:29:54,490 --> 01:29:57,624
那个大的白色空间是什么，好吗？

2148
01:29:57,692 --> 01:30:00,093
向他们清楚，这是一个Twitter搜索。

2149
01:30:01,729 --> 01:30:03,796
你知道所有你需要知道做功课。

2150
01:30:03,865 --> 01:30:04,464
祝你好运。

2151
01:30:06,101 --> 01:30:16,709
>>欲了解更多信息，请访问Stanford.edu。

