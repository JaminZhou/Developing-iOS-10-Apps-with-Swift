1
00:00:00,668 --> 00:00:07,105
>>斯坦福大学

2
00:00:07,174 --> 00:00:13,044
>>欢迎来到斯坦福CS193，2017年冬季。

3
00:00:13,113 --> 00:00:17,782
今天我要继续我们最后开始的演示

4
00:00:17,851 --> 00:00:19,434
我真的只是要加强它是多个MVC

5
00:00:19,435 --> 00:00:21,018
时间。

6
00:00:21,087 --> 00:00:24,422
再次，它让你有机会看到这一切再次发生。

7
00:00:24,491 --> 00:00:26,224
我会很快去

8
00:00:26,293 --> 00:00:28,893
这样做是因为我们已经在最后一个演示中做到了

9
00:00:28,962 --> 00:00:30,328
你做了这个功课，

10
00:00:30,397 --> 00:00:32,697
所以希望真的很舒服。

11
00:00:32,766 --> 00:00:35,633
现在我们要潜入幻灯片了

12
00:00:35,702 --> 00:00:38,937
解决我们应用程序会遇到的问题，

13
00:00:39,006 --> 00:00:41,373
这是真的很慢。

14
00:00:41,442 --> 00:00:44,309
并不仅仅是很慢，而且阻止了我们的用户界面

15
00:00:44,378 --> 00:00:47,712
以便用户认为应用可能已经死了

16
00:00:47,781 --> 00:00:49,514
需要被杀掉或某事。

17
00:00:49,583 --> 00:00:52,317
我们将用多线程来解决这个问题

18
00:00:52,385 --> 00:00:55,286
我将会谈一下我们如何做多线程。

19
00:00:55,355 --> 00:00:56,255
我会回到演示，

20
00:00:56,323 --> 00:00:58,123
我们将用多线程解决它。

21
00:00:58,192 --> 00:01:00,925
我会告诉你一些其他很酷的事情要做。

22
00:01:00,994 --> 00:01:03,528
然后我们会回到幻灯片

23
00:01:03,597 --> 00:01:06,164
我会谈论输入框(text field)，这是一点点

24
00:01:06,233 --> 00:01:09,667
一个随机的主题，但我必须适应它在某个地方。

25
00:01:09,736 --> 00:01:12,437
如果我有一点时间到底，我怀疑我会的，

26
00:01:12,506 --> 00:01:15,173
但如果我有时间在最后，我实际上会开始

27
00:01:15,242 --> 00:01:18,009
表视图(table view)，这将是我们周三的主题。

28
00:01:18,078 --> 00:01:19,178
一个非常重要的话题，和

29
00:01:19,246 --> 00:01:21,280
这是你下一个任务将要做的。

30
00:01:21,348 --> 00:01:24,082
对不起，你的下一个作业也有多线程，

31
00:01:24,151 --> 00:01:26,852
当然，但它主要是一个表视图分配，所以

32
00:01:26,920 --> 00:01:28,519
这就是我们今天要做的事情。

33
00:01:28,588 --> 00:01:33,358
所以让我们从上次跳到我们的演示中。

34
00:01:33,427 --> 00:01:35,960
你记得那样看起来像这样

35
00:01:36,029 --> 00:01:37,028
这里正在运行。

36
00:01:37,097 --> 00:01:42,167
这是一个很好的小图像查看应用程序

37
00:01:42,236 --> 00:01:46,338
远，我们可以放大和缩小，平移和

38
00:01:46,406 --> 00:01:47,138
所有这一切。

39
00:01:47,207 --> 00:01:50,308
而事实上，在构建这个应用程序时，

40
00:01:50,377 --> 00:01:54,746
我已经构建了这个很好的通用ImageViewController。

41
00:01:54,814 --> 00:01:58,049
这是一个可重用的MVC，就像在你的任务，

42
00:01:58,118 --> 00:02:01,486
你建立了一个可重用的图形视图控制器，

43
00:02:01,555 --> 00:02:04,622
我已经构建了一个通用的MVC，它将显示一个图像

44
00:02:04,691 --> 00:02:08,460
让你放大并平移，所以，这很酷。

45
00:02:08,528 --> 00:02:14,499
希望你对此感到欣慰

46
00:02:14,568 --> 00:02:17,569
良好的API设计，以及API设计的重要性

47
00:02:17,637 --> 00:02:20,839
可重复使用的组件是建立良好的架构

48
00:02:20,908 --> 00:02:24,208
一般，希望你看到了。

49
00:02:24,277 --> 00:02:26,477
我的意思是，这些是我们非常简单的应用程序

50
00:02:26,546 --> 00:02:27,779
写，所以很难看。

51
00:02:27,848 --> 00:02:30,315
但是当你开始构建一个巨大的应用程序并拥有这些应用

52
00:02:30,384 --> 00:02:33,151
可重复使用的组件和真正强大的公共API

53
00:02:33,220 --> 00:02:36,388
你愿意支持，等等，那么你会的

54
00:02:36,456 --> 00:02:38,990
发现你的应用程序会有更少的错误，

55
00:02:39,059 --> 00:02:41,092
随着时间的推移，它将能够成长。

56
00:02:41,161 --> 00:02:43,628
而且你可以更好地工作，所以

57
00:02:43,697 --> 00:02:45,130
这一切都很好。

58
00:02:46,734 --> 00:02:50,736
在我的viewDidLoad中，我把这个小的imageURL等于

59
00:02:50,804 --> 00:02:53,905
DemoURL.stanford只是为了测试。

60
00:02:53,974 --> 00:02:55,540
现在我们知道它有效，

61
00:02:55,609 --> 00:02:57,409
我会删除那么

62
00:02:57,477 --> 00:03:00,812
我的ImageViewController再次可以重复使用。

63
00:03:00,881 --> 00:03:03,882
这是它的公共API，恰好是它的模型。

64
00:03:03,950 --> 00:03:04,750
这不是那么不寻常，

65
00:03:04,818 --> 00:03:08,553
顺便说一句，对于视图控制器的公共API

66
00:03:08,622 --> 00:03:12,090
要设置模型，这实际上很常见。

67
00:03:12,159 --> 00:03:13,758
这就是我们的模型，它的URL是

68
00:03:13,827 --> 00:03:15,727
你想要显示的图像，它是公开的。

69
00:03:15,796 --> 00:03:19,331
所以当我们建立其余的时候，我们将会使用它

70
00:03:19,400 --> 00:03:20,899
所以我们的故事板到目前为止只有这一个图像视图

71
00:03:20,900 --> 00:03:22,399
我们的应用

72
00:03:22,469 --> 00:03:26,170
控制器在这里，我会快速通过

73
00:03:26,239 --> 00:03:27,972
并构建多个MVC应用程序。

74
00:03:28,041 --> 00:03:31,643
我们要做的只是使用我们的通用图像

75
00:03:31,711 --> 00:03:35,046
控制器MVC这里来查看相关的图像

76
00:03:35,115 --> 00:03:36,748
卡西尼项目，

77
00:03:36,817 --> 00:03:41,219
这是一个发送到土星的空间探测器。

78
00:03:41,287 --> 00:03:45,723
要做到这一点，它将成为你所了解的一切。

79
00:03:45,792 --> 00:03:48,192
我要让它建立另一个MVC，所以

80
00:03:48,261 --> 00:03:51,062
这里让我们拖出另一个MVC。

81
00:03:51,131 --> 00:03:53,031
让我们为它创建一个类。

82
00:03:53,100 --> 00:03:55,300
这是Cocoa Touch Class，当然，

83
00:03:55,369 --> 00:04:00,038
我会把它称为Cassini，我的CassiniViewController。

84
00:04:00,107 --> 00:04:02,540
我会把它放在我把所有其他的地方放在同一个地方

85
00:04:02,609 --> 00:04:05,910
这里的文件，这里是我的CassiniViewController。

86
00:04:05,979 --> 00:04:08,880
我将删除我的ViewController生命周期，但是

87
00:04:08,949 --> 00:04:12,951
我要离开我的准备，没有评论，

88
00:04:13,019 --> 00:04:16,220
因为我将要脱离这个

89
00:04:16,289 --> 00:04:21,193
CassiniViewController到我的ImageViewController。

90
00:04:21,261 --> 00:04:23,895
所以这个UI将要工作的方式是我会拥有的

91
00:04:23,964 --> 00:04:25,563
卡西尼的三个按钮，

92
00:04:25,632 --> 00:04:28,700
类似于我们如何与情绪应用程序。

93
00:04:28,769 --> 00:04:33,271
这三个按钮将会选择这三个URL

94
00:04:33,340 --> 00:04:37,642
在这里，来自NASA这里，jpl.nasa.gov。

95
00:04:37,711 --> 00:04:40,612
卡西尼本身就是人类的地球之一

96
00:04:40,680 --> 00:04:44,015
一个是土星，所以我们只要有三个按钮

97
00:04:44,084 --> 00:04:46,418
让你选择这三个图像。

98
00:04:47,487 --> 00:04:48,420
所以让我们来构建这个UI。

99
00:04:50,156 --> 00:04:52,490
首先，让我们确定我们的身份。

100
00:04:52,559 --> 00:04:55,093
我们只是拖出一个通用的ViewController，

101
00:04:55,161 --> 00:04:58,296
我们显然希望其身份是一个特定的子类，

102
00:04:58,365 --> 00:05:00,765
在这种情况下，CassiniViewController，

103
00:05:00,834 --> 00:05:04,068
就像这样一个ImageViewController。

104
00:05:04,137 --> 00:05:07,405
所以让我们把它拖出来使按钮更大一些，

105
00:05:07,473 --> 00:05:08,640
获得更大的字体。

106
00:05:08,709 --> 00:05:15,113
尝试可能40点，这样的东西。

107
00:05:15,182 --> 00:05:18,816
我有三个按钮，一个是地球，我会做的

108
00:05:18,885 --> 00:05:22,754
复制粘贴，再加一个按钮，另一个

109
00:05:22,822 --> 00:05:25,757
是卡西尼本身，另一个是土星。

110
00:05:25,826 --> 00:05:29,828
我们只是选择这些，我们将它们放在堆栈中

111
00:05:29,896 --> 00:05:33,264
视图，我们将放置一些间距

112
00:05:33,333 --> 00:05:35,667
我们将填写并平均填写。

113
00:05:35,736 --> 00:05:38,336
我们把它拖到中间。

114
00:05:38,405 --> 00:05:40,738
所以我们用蓝线把它放在中间

115
00:05:40,807 --> 00:05:42,073
我们可以在这里下去

116
00:05:42,141 --> 00:05:43,875
说重新建立约束。

117
00:05:43,944 --> 00:05:47,078
我们可以在这里查看我们的尺寸检查员来验证

118
00:05:47,147 --> 00:05:50,815
它添加的约束似乎像我们想要的那样，

119
00:05:50,884 --> 00:05:53,384
这确实是这样的。

120
00:05:53,453 --> 00:05:54,486
我们继续吧，

121
00:05:54,554 --> 00:05:57,022
有一件事我想告诉你一点点不同

122
00:05:57,090 --> 00:05:59,957
时间是在我们开始使用SplitViewController和之前

123
00:06:00,026 --> 00:06:02,226
然后我添加了导航控制器。

124
00:06:02,295 --> 00:06:04,895
换句话说，我从iPad UI开始，

125
00:06:04,964 --> 00:06:08,633
构建iPad UI，然后我也在iPhone上工作。

126
00:06:08,702 --> 00:06:10,635
我们也可以做相反的做法。

127
00:06:10,703 --> 00:06:14,405
所以我们可以把这个视图控制器，这是一个，

128
00:06:14,474 --> 00:06:16,841
我们要显示的基础，和

129
00:06:16,910 --> 00:06:20,512
我们可以说将其嵌入到导航控制器中。

130
00:06:20,581 --> 00:06:22,213
那么很明显，我们想这样做

131
00:06:22,282 --> 00:06:24,382
导航控制器是我们应用程序的入口点。

132
00:06:24,450 --> 00:06:27,084
我不想忘记，所以我只是要扔了

133
00:06:27,153 --> 00:06:28,886
这边的小箭头在左边。

134
00:06:28,955 --> 00:06:31,689
那么当我们在这里做这些事情时，

135
00:06:31,758 --> 00:06:35,493
喜欢从地球到这里，从卡西尼。

136
00:06:35,562 --> 00:06:38,396
我要去显示细节，因为我最终知道了

137
00:06:38,465 --> 00:06:40,799
还要支持iPad，而不是显示，

138
00:06:40,867 --> 00:06:43,335
这只会真正支持iPhone。

139
00:06:43,403 --> 00:06:45,603
因为显示，记住，如果你做一个Show和

140
00:06:45,672 --> 00:06:48,239
你是iPad的主人(master)，实际上，

141
00:06:48,308 --> 00:06:50,875
如果你在导航控制器的主人(master)

142
00:06:50,944 --> 00:06:53,845
iPad和你做显示，它将取代麦克风，

143
00:06:53,914 --> 00:06:56,181
而显示详细信息替代了细节(detail)。

144
00:06:57,450 --> 00:06:59,050
所以这里有这三个段落。

145
00:06:59,119 --> 00:07:01,419
我会有点欺骗一点点

146
00:07:01,488 --> 00:07:06,324
我的segue标识符只是这些的名称

147
00:07:06,393 --> 00:07:09,060
卡西尼，地球和土星，

148
00:07:09,129 --> 00:07:11,829
这将是我的segue标识符。

149
00:07:11,898 --> 00:07:14,799
我说这是欺骗，因为通常你的标识符会

150
00:07:14,868 --> 00:07:16,268
只是识别出来，和

151
00:07:16,336 --> 00:07:18,803
那么你会得到其他地方的信息，

152
00:07:18,872 --> 00:07:21,272
但只是为了使我们的代码真的很简单。

153
00:07:21,341 --> 00:07:23,474
糟糕，这不是地球，那是土星。

154
00:07:23,543 --> 00:07:27,579
然后让我们去看一下，等等，我们的地球在哪里？

155
00:07:27,647 --> 00:07:31,750
我们去这个，哎呀，这个，

156
00:07:31,818 --> 00:07:33,384
那就是卡西尼。

157
00:07:33,453 --> 00:07:37,555
好的，所以我们在这里建立了UI。

158
00:07:37,623 --> 00:07:42,627
现在，这只是一个iPhone适合的UI。

159
00:07:42,696 --> 00:07:46,030
如果我们在iPhone上运行，实际上会看起来很好，

160
00:07:46,099 --> 00:07:47,032
你会看到的。

161
00:07:48,101 --> 00:07:50,035
现在为什么这不工作呢？

162
00:07:50,103 --> 00:07:53,204
你看到我有这个在这里，我得到这模型的视图，

163
00:07:53,273 --> 00:07:54,205
有点想了

164
00:07:54,274 --> 00:07:56,207
显然，我们还没有选择图像，

165
00:07:56,276 --> 00:07:58,342
我们还没有写任何准备代码。

166
00:07:58,411 --> 00:07:59,344
但这里没有回来。

167
00:07:59,412 --> 00:08:00,545
为什么没有背？

168
00:08:00,614 --> 00:08:03,615
这是因为这个事情正在展现细节。

169
00:08:03,683 --> 00:08:06,384
因为显示详细信息仅适用于iPad配置。

170
00:08:06,453 --> 00:08:09,287
所以喜欢，如果我把它改成为一个show。

171
00:08:09,356 --> 00:08:13,491
嗯，其实我不知道有人是谁

172
00:08:13,559 --> 00:08:17,428
说我们必须重塑那个作为一个show。

173
00:08:17,497 --> 00:08:20,632
让我们看看是否有效。

174
00:08:20,700 --> 00:08:24,836
这就是土星的地方。

175
00:08:25,872 --> 00:08:26,871
我们没有准备好

176
00:08:26,939 --> 00:08:31,342
好吧，看看

177
00:08:31,410 --> 00:08:34,279
所以现在它推动，我们在导航控制器内。

178
00:08:34,347 --> 00:08:35,747
我们可以回去

179
00:08:35,815 --> 00:08:39,617
但这只是一个iPhone，我们不希望这样。

180
00:08:39,685 --> 00:08:41,419
我们希望在这两个平台上工作。

181
00:08:41,487 --> 00:08:42,820
所以我要再拿出来，

182
00:08:42,889 --> 00:08:44,889
并把这个回来显示细节。

183
00:08:44,958 --> 00:08:47,826
无论如何，所以我有这个好的iPhone API或UI。

184
00:08:47,895 --> 00:08:49,494
如果这样，我想变成分割视图

185
00:08:49,562 --> 00:08:51,696
我正在做另一种方式和准备的条件。

186
00:08:51,765 --> 00:08:54,198
所以让我们在这里下来抓住一个分裂的视图。

187
00:08:54,267 --> 00:08:55,166
我把它拖出来，

188
00:08:55,235 --> 00:08:57,568
记住它带来所有这些其他的垃圾。

189
00:08:57,637 --> 00:08:59,337
我们关闭我们的文件大纲，

190
00:08:59,406 --> 00:09:02,007
你可以删除这些东西。

191
00:09:04,478 --> 00:09:08,813
现在我们在这里分享我们的Split View Controller

192
00:09:08,882 --> 00:09:13,218
我们可以使用Ctrl + Drag使其成为我们的主人。

193
00:09:13,287 --> 00:09:15,787
我们可以把它放在这里，让我们说，

194
00:09:15,855 --> 00:09:18,356
在控制拖动，使这是我们的细节。

195
00:09:18,424 --> 00:09:23,227
我们让我们的入口点显示视图和

196
00:09:23,296 --> 00:09:24,863
就像现在这样，

197
00:09:24,931 --> 00:09:28,900
我们把它变成可以在iPad上工作的东西。

198
00:09:28,969 --> 00:09:32,136
但是我们展示的这些细节与展示的细节是一样的

199
00:09:32,205 --> 00:09:35,440
两者之间有点不一样的差别

200
00:09:35,508 --> 00:09:36,274
平台。

201
00:09:36,342 --> 00:09:38,576
所以你有必要知道你会不会放

202
00:09:38,645 --> 00:09:40,478
它分裂视图或不幸的是，

203
00:09:40,547 --> 00:09:41,646
当你建立你的应用程序

204
00:09:41,715 --> 00:09:48,986
现在，这仍然可以在iPhone上工作。

205
00:09:49,055 --> 00:09:51,589
开始细节开始

206
00:09:51,658 --> 00:09:54,725
我们可以在这里进入这些不同的事情。

207
00:09:54,794 --> 00:09:58,562
它也可以在iPad上工作，

208
00:09:58,631 --> 00:10:07,271
让我们看看iPad。

209
00:10:07,340 --> 00:10:09,641
这是我们可以滑出我们的主人，

210
00:10:09,709 --> 00:10:12,243
我点击这些东西，或者我们可以去横屏。

211
00:10:12,311 --> 00:10:16,147
而且还没有显示任何我还没有的东西。

212
00:10:16,216 --> 00:10:17,215
在iPad上，也许我们想把它放在导航中

213
00:10:17,216 --> 00:10:18,215
现在，再一次，

214
00:10:18,284 --> 00:10:20,785
控制器在这里，所以我们在这里得到一个很好的标题。

215
00:10:20,854 --> 00:10:23,555
所以我也可以做到这一点，只是下来这里

216
00:10:23,624 --> 00:10:26,090
在这里选择这个新的控制器

217
00:10:26,159 --> 00:10:28,192
做嵌入导航控制。

218
00:10:28,261 --> 00:10:29,160
现在如果我们这样做，

219
00:10:29,228 --> 00:10:31,830
我们要在我们的准备中要小心。

220
00:10:31,898 --> 00:10:34,499
当我们准备这个段落时，我们解释了

221
00:10:34,568 --> 00:10:37,201
这个导航控制器可能在那里。

222
00:10:37,270 --> 00:10:38,670
我也会告诉你如何做到这一点。

223
00:10:39,839 --> 00:10:41,806
我们做我们的准备

224
00:10:41,875 --> 00:10:42,673
我们有了UI，

225
00:10:42,742 --> 00:10:45,576
同样的UI，就像我们在情绪中所做的一样，完全一样。

226
00:10:45,645 --> 00:10:49,814
但是，除非我们明白，这些段落中显然没有作用

227
00:10:49,883 --> 00:10:51,466
所以，我们来到这里准备，然后输入。

228
00:10:51,467 --> 00:10:53,050
准备。

229
00:10:53,119 --> 00:10:55,853
这将是一个非常简单的准备segue，

230
00:10:55,922 --> 00:10:58,523
我做了segue标识符是我的事情

231
00:10:58,592 --> 00:11:00,091
要去看table。

232
00:11:00,159 --> 00:11:03,728
所以我只是说如果我可以让URL，

233
00:11:03,797 --> 00:11:08,600
我想要NASA的URL，等于DemoURL.NASA。

234
00:11:08,668 --> 00:11:12,770
我会去查找它，通过采取segue标识符，

235
00:11:12,839 --> 00:11:16,841
但是如果这个段落被确定为零，这将不起作用。

236
00:11:16,909 --> 00:11:17,742
换一种说法，

237
00:11:17,811 --> 00:11:20,545
你不能查找一些可选的东西，

238
00:11:20,614 --> 00:11:22,914
像标识符一样，在字典中。

239
00:11:22,982 --> 00:11:24,783
这个字典在这里寻找一个字符串。

240
00:11:24,851 --> 00:11:29,487
所以，我只是说默认没有。

241
00:11:29,555 --> 00:11:32,090
当然，在这个字典中，

242
00:11:32,158 --> 00:11:33,324
它会返回nil。

243
00:11:33,393 --> 00:11:36,427
但是，如果我们在这里行事，那就没事了。

244
00:11:36,495 --> 00:11:40,031
现在我可以得到URL，所以segue，

245
00:11:40,100 --> 00:11:42,600
如果可以得到该URL

246
00:11:42,669 --> 00:11:45,537
NASA字典，那么我会这样做。

247
00:11:45,605 --> 00:11:46,270
现在，当然，

248
00:11:46,339 --> 00:11:48,372
我需要我正在考虑的视图控制器。

249
00:11:48,441 --> 00:11:50,508
所以我要说，

250
00:11:50,576 --> 00:11:56,146
如果我可以让imageVC = (segue.destination as?

251
00:11:56,215 --> 00:11:58,382
ImageViewController。

252
00:11:58,451 --> 00:12:02,854
那就是我们正在考虑的视图控制器。

253
00:12:05,158 --> 00:12:07,925
如果我能做到这一点，那我可以做好准备。

254
00:12:07,994 --> 00:12:10,661
当然，这里我们有问题

255
00:12:10,730 --> 00:12:12,697
iPad上的目的地可能是什么？

256
00:12:12,766 --> 00:12:14,665
导航控制器。

257
00:12:14,734 --> 00:12:17,502
所以通常我们会在这里放一点，

258
00:12:17,571 --> 00:12:20,404
我们说如果事情是导航控​​制器，

259
00:12:20,473 --> 00:12:23,341
那么我们将得到可见的视图控制器。

260
00:12:23,410 --> 00:12:24,809
记住我们放在那里的代码？

261
00:12:24,878 --> 00:12:26,944
你可能把它放在你的家庭作业中，

262
00:12:27,013 --> 00:12:30,014
如果您使用导航控件为您的详细信息。

263
00:12:30,082 --> 00:12:32,283
相反，我会把它放在一个扩展中，

264
00:12:32,352 --> 00:12:34,652
记得我们上次了解扩展吗？

265
00:12:34,721 --> 00:12:38,322
所以我要扩展UI视图控制器，和

266
00:12:38,391 --> 00:12:41,159
只需添加一个var到UIViewController。

267
00:12:41,227 --> 00:12:45,196
现在这个var我要补充，我会把它称为内容，

268
00:12:45,265 --> 00:12:48,733
它将是UIViewController的类型。

269
00:12:49,702 --> 00:12:51,102
而且由于它在扩展，

270
00:12:51,171 --> 00:12:53,171
它不能是有任何存储的var。

271
00:12:53,240 --> 00:12:55,106
扩展没有存储空间。

272
00:12:55,174 --> 00:12:58,976
所以它只能是一个计算的var，所以我要计算它。

273
00:12:59,045 --> 00:13:01,712
什么是内容，这是什么var？

274
00:13:01,781 --> 00:13:04,748
那我定义内容是这个的内容

275
00:13:04,817 --> 00:13:07,918
视图控制器，这个视图控件拥有什么？

276
00:13:07,987 --> 00:13:10,688
那么，如果这个视图控制器是导航控制器，

277
00:13:10,757 --> 00:13:12,690
那么这是可视的视图控制器。

278
00:13:12,758 --> 00:13:15,293
如果不是，那就只是自己，

279
00:13:15,362 --> 00:13:18,329
视图控制器的内容本身。

280
00:13:18,398 --> 00:13:20,164
除非它恰好是一个导航控制器

281
00:13:20,233 --> 00:13:21,765
然后它返回到可见视图控制器。

282
00:13:21,834 --> 00:13:24,802
我也可以

283
00:13:24,871 --> 00:13:27,071
如果我是，也显示可见标签。

284
00:13:27,140 --> 00:13:28,973
但为了时间的兴趣，我不会这样做，

285
00:13:29,042 --> 00:13:31,308
你可以这样做，如果你想要的。

286
00:13:31,377 --> 00:13:36,747
我会在这里说，如果我能让navcon = self as？

287
00:13:36,816 --> 00:13:39,416
一个UINavigationController。

288
00:13:39,485 --> 00:13:42,019
换句话说，如果我是导航控制器，那我就是

289
00:13:42,088 --> 00:13:44,522
只是要返回navcon的可见。

290
00:13:44,591 --> 00:13:45,389
Navcon是我自己，

291
00:13:45,458 --> 00:13:48,025
它只是它是我自己作为一个导航控制器。

292
00:13:48,094 --> 00:13:52,029
所以我可以发送这个var，我可以从它得到这个var。

293
00:13:52,098 --> 00:13:54,966
当然，这个可视化视图控制器是可选的

294
00:13:55,035 --> 00:13:57,601
因为导航控制器可能没有任何

295
00:13:57,670 --> 00:13:59,437
此时查看控制器。

296
00:13:59,505 --> 00:14:02,440
所以，我最好有一个默认，我只是

297
00:14:02,509 --> 00:14:03,741
return self

298
00:14:03,809 --> 00:14:06,410
那么如果我不在导航控制器，

299
00:14:06,479 --> 00:14:11,215
那我就要返回自己。

300
00:14:11,283 --> 00:14:13,784
所以你看到内容，它显示了我们的内容

301
00:14:13,853 --> 00:14:16,487
导航文件夹，否则，它返回自己。

302
00:14:16,556 --> 00:14:18,656
对于这种情况，哪种很酷

303
00:14:18,724 --> 00:14:21,191
而且它允许我在这里上来，而不是说segue

304
00:14:21,260 --> 00:14:24,061
目的地，我可以说sequedestination.content。

305
00:14:24,130 --> 00:14:28,266
然后我不需要这么小，如果在那里。

306
00:14:29,836 --> 00:14:32,803
现在，这是扩展性吗？

307
00:14:32,872 --> 00:14:36,307
绝对是因为这个var已经完成了

308
00:14:36,375 --> 00:14:39,777
完全可以理解的语义，只需要做

309
00:14:39,846 --> 00:14:41,846
与UI视图控制器和

310
00:14:41,915 --> 00:14:45,916
与Casini视图控制器或其他任何事情无关。

311
00:14:45,985 --> 00:14:47,585
因为当你做一个扩展，

312
00:14:47,654 --> 00:14:49,353
你想要的是这样的。

313
00:14:49,422 --> 00:14:51,889
你不想把扩展放在其他类上

314
00:14:51,958 --> 00:14:53,958
一般与其他课程有关。

315
00:14:54,027 --> 00:14:56,827
除非它们类似于标准类型，或者

316
00:14:56,896 --> 00:14:58,395
这样的东西

317
00:14:58,464 --> 00:15:00,130
也许从字符串转换为日期，

318
00:15:00,199 --> 00:15:01,165
或类似的东西。

319
00:15:01,234 --> 00:15:03,601
在某种程度上可能会有一些意义，但是

320
00:15:03,670 --> 00:15:06,670
你不想把扩展放在其他类上

321
00:15:06,739 --> 00:15:09,707
这是特定于其他类需要的东西。

322
00:15:09,775 --> 00:15:13,211
在这种情况下，只需将一个函数放在你自己的类中

323
00:15:13,279 --> 00:15:15,312
这样做。

324
00:15:15,381 --> 00:15:18,181
大家看到我在说什么呢

325
00:15:18,250 --> 00:15:19,617
这是完美的意义，

326
00:15:19,686 --> 00:15:21,785
这可以在任何环境中使用，

327
00:15:21,854 --> 00:15:24,555
在视图控制器上有一个明智的变化。

328
00:15:27,327 --> 00:15:29,360
现在我有我的图像视图控制器，

329
00:15:29,429 --> 00:15:30,361
或者通过获得它或

330
00:15:30,430 --> 00:15:33,064
通过导航控制器，我可以做好准备。

331
00:15:33,132 --> 00:15:35,232
所以准备它真的很容易，

332
00:15:35,301 --> 00:15:38,235
我只想设置URL等于该URL，好的，

333
00:15:38,304 --> 00:15:40,504
我从演示URL中获取的URL。

334
00:15:40,573 --> 00:15:44,341
这只是公共API，好的，这恰好是它的模型，

335
00:15:44,410 --> 00:15:46,043
我们还设置其标题。

336
00:15:46,112 --> 00:15:47,411
我们可以将标题设置为等于，

337
00:15:47,480 --> 00:15:49,313
我们可以做同样的事情，我们以前做过。

338
00:15:49,382 --> 00:15:52,216
将发件人解释为UIButton(按钮)

339
00:15:52,285 --> 00:15:56,187
如果我们能够做到这一点，我们将获得当前的标题。

340
00:15:57,624 --> 00:15:58,990
可能是nil，但是

341
00:15:59,058 --> 00:16:01,292
没关系，因为这也是可选的。

342
00:16:01,361 --> 00:16:04,828
这是可选的，所以即使没有，也可以采取nil。

343
00:16:04,897 --> 00:16:07,498
当然这可能是nil，因为事实证明不是

344
00:16:07,567 --> 00:16:08,866
是true，也没事。

345
00:16:10,436 --> 00:16:13,571
看看这些可选项是如何发挥出来的，因为你有

346
00:16:13,640 --> 00:16:15,639
vars是可选的，事物是可选的？

347
00:16:15,708 --> 00:16:17,675
所以你可以让事物相互相等

348
00:16:17,743 --> 00:16:20,911
这种只有一切都在那里美丽地发挥。

349
00:16:20,980 --> 00:16:22,747
就这样，让我们​​运行在这里。

350
00:16:22,815 --> 00:16:26,951
让我们来看看

351
00:16:27,020 --> 00:16:32,389
我们得到了什么

352
00:16:32,458 --> 00:16:32,957
开始了。所以

353
00:16:33,025 --> 00:16:34,692
我们来看看卡西尼吧

354
00:16:34,761 --> 00:16:38,963
例如，看，它坏了。

355
00:16:39,031 --> 00:16:40,063
哇，发生了什么事？

356
00:16:40,132 --> 00:16:46,803
我点了那个卡西尼，看，卡西尼。

357
00:16:46,872 --> 00:16:50,307
我们来放大卡西尼。

358
00:16:50,376 --> 00:16:51,175
在那里

359
00:16:51,243 --> 00:16:55,946
所以这是土星这里的卡西尼太空探测器。

360
00:16:56,015 --> 00:16:58,749
但是当我点击它，似乎我的UI冻结了。

361
00:16:58,818 --> 00:17:00,117
如果我点击这些其他的，看看，

362
00:17:00,185 --> 00:17:02,353
我点击土星，土星，土星，没有发生任何事情。

363
00:17:02,421 --> 00:17:04,555
因为它，现在出现了。

364
00:17:05,692 --> 00:17:07,725
所以这个UI似乎坏了

365
00:17:07,794 --> 00:17:10,528
现在我们在这里是超快速网络。

366
00:17:10,597 --> 00:17:11,562
这是斯坦福大学的网络。

367
00:17:11,631 --> 00:17:14,232
我们有像千兆字节的连接到任何地方

368
00:17:14,300 --> 00:17:16,733
它仍然需要一段时间，这是一个非常大的文件。

369
00:17:16,802 --> 00:17:19,504
想象一下，我在细胞上。

370
00:17:20,706 --> 00:17:24,375
该图片可能需要一分钟才能下载。

371
00:17:24,444 --> 00:17:26,310
同时我的应用程序完全卡住了，

372
00:17:26,378 --> 00:17:28,112
我不能点击任何其他按钮。

373
00:17:28,181 --> 00:17:28,980
如果我在iPhone上，

374
00:17:29,048 --> 00:17:31,349
让我们看看他在iPhone上的样子，甚至更糟。

375
00:17:33,620 --> 00:17:35,419
如果我在iPhone上，我会点击。

376
00:17:35,488 --> 00:17:37,688
我会想，“我的应用程序坏了”。

377
00:17:37,756 --> 00:17:39,690
所以我在一个NavigationController，

378
00:17:39,759 --> 00:17:41,491
没问题，我刚刚回来了。

379
00:17:41,560 --> 00:17:46,697
但即使是后退按钮

380
00:17:46,766 --> 00:17:53,070
不会工作，你会看到。

381
00:17:53,139 --> 00:17:56,774
好的，所以我们在这里。

382
00:17:57,977 --> 00:17:58,943
有详细的视图那里。

383
00:17:59,012 --> 00:18:02,046
现在我要打地球了，它被卡住了。

384
00:18:02,115 --> 00:18:03,313
再次，我什么都不做。

385
00:18:03,382 --> 00:18:04,849
终于回来了

386
00:18:04,917 --> 00:18:08,953
所以这个UI是可怕的，因为尤其是

387
00:18:09,022 --> 00:18:11,055
细胞或者它真的很慢的东西，

388
00:18:11,124 --> 00:18:12,556
用户喜欢，这个程序坏了。

389
00:18:12,625 --> 00:18:15,892
他们真的要双击Home

390
00:18:15,961 --> 00:18:19,429
按钮并将您的应用程序关闭，以便在那里使用类比。

391
00:18:19,498 --> 00:18:21,965
他们会翻转你的应用程序，并杀死它，因为他们，

392
00:18:22,034 --> 00:18:23,500
他们认为这是坏的。

393
00:18:23,569 --> 00:18:25,936
所以我们要用多任务来解决这个问题。

394
00:18:26,004 --> 00:18:31,441
首先让我来看看

395
00:18:31,510 --> 00:18:36,647
你怎么工作

396
00:18:36,716 --> 00:18:40,517
好的，所以，多线程。

397
00:18:40,586 --> 00:18:43,154
一般有两个原因，

398
00:18:43,222 --> 00:18:45,556
你想做多线程。

399
00:18:45,624 --> 00:18:48,759
一个原因是你有一个数学问题，或者

400
00:18:48,827 --> 00:18:52,863
一些图像处理问题，这是最好的解决

401
00:18:52,932 --> 00:18:56,433
使用某种并行处理算法

402
00:18:56,502 --> 00:19:00,137
想要一下子做1000件事情或100件事情。

403
00:19:00,205 --> 00:19:02,639
然后，当他们一起完成的时候，你会去的

404
00:19:02,708 --> 00:19:04,908
结合结果，或类似的结果。

405
00:19:04,977 --> 00:19:08,579
所以这显然需要做多线程。

406
00:19:08,648 --> 00:19:10,281
这不是我将要的多线程

407
00:19:10,349 --> 00:19:11,482
跟你谈谈

408
00:19:11,551 --> 00:19:13,717
那就是多线程的完美有效的使用，

409
00:19:13,786 --> 00:19:15,719
iOS对这种设计有一些很好的API。

410
00:19:15,788 --> 00:19:18,456
但这不是我在说的。

411
00:19:18,524 --> 00:19:21,759
你可能想做多线程的第二个原因

412
00:19:21,828 --> 00:19:23,961
是因为你有一个线程。

413
00:19:24,030 --> 00:19:25,730
顺便问一下，大家知道一个线程是什么？

414
00:19:25,798 --> 00:19:28,665
如果你知道线程是什么，举起你的手。

415
00:19:28,734 --> 00:19:31,468
好的，我看到有人说，是的，提醒我。

416
00:19:31,537 --> 00:19:35,839
一个线程只是意味着，线程是执行线程的缩写。

417
00:19:35,908 --> 00:19:40,210
而且它只是一种，这个过程，

418
00:19:40,279 --> 00:19:43,414
代码正在执行。

419
00:19:43,482 --> 00:19:46,417
那可以想像你们有分离

420
00:19:46,486 --> 00:19:48,285
其中多数。

421
00:19:48,354 --> 00:19:50,170
在iOS中，你有一个非常重要的主线程

422
00:19:50,171 --> 00:19:51,987
例如，

423
00:19:52,057 --> 00:19:53,640
这是正在听手势的执行线程

424
00:19:53,641 --> 00:19:55,224
的执行。

425
00:19:55,294 --> 00:19:58,162
做绘画，这样的事情。

426
00:19:58,230 --> 00:20:00,230
那么你可以有其他执行线程

427
00:20:00,299 --> 00:20:02,733
可能会做背景，比如出去

428
00:20:02,802 --> 00:20:05,803
网络和获取数据，或类似的东西。

429
00:20:05,872 --> 00:20:09,373
我们的大多数设备本身并不是多处理器

430
00:20:09,442 --> 00:20:12,877
这些线程虽然有多个内核，

431
00:20:12,946 --> 00:20:15,412
他们实际上可以同时做两件事情。

432
00:20:15,481 --> 00:20:16,580
他们真的可以。

433
00:20:16,649 --> 00:20:18,783
但在这种情况下，我在谈论多线程

434
00:20:18,851 --> 00:20:23,287
为了解决保持UI响应的这个问题，

435
00:20:23,356 --> 00:20:24,888
我们甚至不在乎。

436
00:20:24,957 --> 00:20:28,659
所以这里是多线程和UI的东西。

437
00:20:28,727 --> 00:20:31,662
我们想要正在听的执行线程

438
00:20:31,731 --> 00:20:34,865
给用户做出超敏感，始终工作，

439
00:20:34,934 --> 00:20:36,299
从未封锁。

440
00:20:36,368 --> 00:20:39,703
而我们并不太在乎其他线程太多，

441
00:20:39,771 --> 00:20:43,407
但是我们真的希望能够随时解除这一个。

442
00:20:43,476 --> 00:20:46,510
所以如果我们要做任何阻止的事情，

443
00:20:46,578 --> 00:20:49,947
像任何一个块，因为它做了这么多的计算

444
00:20:50,015 --> 00:20:53,884
它不再回到代码的其余部分。

445
00:20:53,953 --> 00:20:56,620
或者在这种情况下，与我们的卡西尼，它会阻止

446
00:20:56,689 --> 00:20:59,456
因为它正在等待像网络这样的资源。

447
00:20:59,525 --> 00:21:02,893
好的，我要求一个URL。

448
00:21:02,962 --> 00:21:05,496
它没有立即响应，我不得不等待。

449
00:21:05,564 --> 00:21:08,198
任何时候我必须等待，我不能在中间等待

450
00:21:08,267 --> 00:21:10,734
那个UI cuz现在没有人可以做一个手势或者

451
00:21:10,803 --> 00:21:13,604
点击后退按钮或做任何其他事情。

452
00:21:13,673 --> 00:21:15,306
那就是我这种多线程

453
00:21:15,374 --> 00:21:16,874
在这里谈论我们会尝试和

454
00:21:16,942 --> 00:21:20,811
解决，是保持UI线程响应和活动

455
00:21:20,879 --> 00:21:24,314
通过推动可能缓慢或阻塞的一切，

456
00:21:24,383 --> 00:21:27,418
等待资源，关闭到一个不同的线程。

457
00:21:27,487 --> 00:21:29,019
现在在iOS中，

458
00:21:29,088 --> 00:21:31,755
我们实际上并没有甚么真正谈论线索。

459
00:21:31,823 --> 00:21:33,089
我一直在使用这个单词的线程，

460
00:21:33,158 --> 00:21:34,892
因为这是封面下面发生了什么。

461
00:21:34,961 --> 00:21:37,961
我们在说这里的执行线程。

462
00:21:38,030 --> 00:21:40,031
但是真的，我们所说的是排队。

463
00:21:41,734 --> 00:21:45,068
所以多线程实际上是关于队列。

464
00:21:45,137 --> 00:21:46,036
现在什么是队列？

465
00:21:46,105 --> 00:21:48,939
实际上队列是一个英文单词。

466
00:21:49,008 --> 00:21:50,941
我们不在美国使用它，但是

467
00:21:51,010 --> 00:21:53,276
队列只是一条线。

468
00:21:53,345 --> 00:21:55,979
就像你去看电影一样，你可能会说，我排队了

469
00:21:56,048 --> 00:21:57,881
看这部电影，特别是如果你在伦敦，

470
00:21:57,950 --> 00:22:00,318
你会说我们去排队看电影。

471
00:22:01,587 --> 00:22:04,288
所以这就是排队，这是一条线。

472
00:22:04,357 --> 00:22:05,756
我们将在这条线上做些什么？

473
00:22:05,825 --> 00:22:06,823
而不是等待人

474
00:22:06,892 --> 00:22:09,360
这部电影，我们要放一些代码块。

475
00:22:11,397 --> 00:22:13,830
我们知道一个伟大的方式来制作一个代码块

476
00:22:13,899 --> 00:22:15,766
可以放在一条封闭的线上。

477
00:22:15,835 --> 00:22:17,768
所以我们几乎总是这样做。

478
00:22:17,836 --> 00:22:20,538
所以把这些关闭，它可以是任何阻塞代码，

479
00:22:20,606 --> 00:22:22,740
但是我们基本上把这些关闭，

480
00:22:22,808 --> 00:22:25,275
通常进入队列。

481
00:22:25,344 --> 00:22:27,811
那么发生的是系统

482
00:22:27,880 --> 00:22:31,348
正在创建线程来抓取这些

483
00:22:31,417 --> 00:22:34,251
阻挡了队列，离线，谁是谁

484
00:22:34,320 --> 00:22:37,321
在队列前面执行一个线程。

485
00:22:38,524 --> 00:22:40,457
这就是多任务或

486
00:22:40,526 --> 00:22:42,926
多线程在iOS中真的有效。

487
00:22:42,995 --> 00:22:46,763
我们不太在乎系统如何分配线程

488
00:22:46,832 --> 00:22:48,565
这些线，这些队列。

489
00:22:48,634 --> 00:22:50,300
我们所关心的就是队列。

490
00:22:50,369 --> 00:22:53,304
当我们想要表达我们想要的系统时

491
00:22:53,372 --> 00:22:55,973
要运行的东西，你知道，UI在哪里运行

492
00:22:56,041 --> 00:22:58,175
在后台进程或任何，

493
00:22:58,243 --> 00:23:00,644
我们通过我们把代码放在什么队列上来指定它。

494
00:23:00,712 --> 00:23:03,047
那有意义吗？

495
00:23:04,717 --> 00:23:08,786
我们来谈谈我们可以拥有的队列。

496
00:23:08,854 --> 00:23:11,722
一个重要的队列当然是主队列。

497
00:23:11,791 --> 00:23:14,792
所以这就是所有UI的排队

498
00:23:14,860 --> 00:23:16,193
活动正在发生。

499
00:23:16,261 --> 00:23:19,530
它不仅是所有UI活动发生的队列

500
00:23:21,333 --> 00:23:22,967
但这是UI活动发生的唯一排队。

501
00:23:22,968 --> 00:23:24,602
一般来说。

502
00:23:25,938 --> 00:23:29,272
这是因为它是一个串行队列。

503
00:23:29,341 --> 00:23:31,842
串行队列是每个人的队列，

504
00:23:31,911 --> 00:23:33,844
代码中的块正在等待运行，

505
00:23:33,913 --> 00:23:37,447
并且只有一个线程来运行它们。

506
00:23:37,516 --> 00:23:41,618
所以当系统来抓住下一个人的时候，

507
00:23:41,687 --> 00:23:44,921
他跑他完成，然后回去

508
00:23:44,990 --> 00:23:46,123
下一个。

509
00:23:46,192 --> 00:23:47,858
所以你看看它们是如何连续的。

510
00:23:47,926 --> 00:23:48,759
他们按顺序发生。

511
00:23:48,828 --> 00:23:51,929
整条关闭等待运行，或代码

512
00:23:51,998 --> 00:23:56,300
等待运行，按顺序处理，一次一个。

513
00:23:56,369 --> 00:23:59,102
这是UI的真正好极了

514
00:23:59,171 --> 00:24:00,738
使它非常可预测。

515
00:24:00,806 --> 00:24:03,473
你真的不必进入很多心灵游戏

516
00:24:03,542 --> 00:24:06,977
多线程，在哪里，就是这个等待的东西

517
00:24:07,045 --> 00:24:10,047
这个，我必须锁定这个数据资源的bug吗？

518
00:24:10,115 --> 00:24:12,349
因为所有UI的东西都在发生

519
00:24:12,417 --> 00:24:13,250
主队列。

520
00:24:13,319 --> 00:24:14,951
这一切都是连续发生的，

521
00:24:15,020 --> 00:24:17,654
你不必担心访问两个UI的东西

522
00:24:17,723 --> 00:24:19,789
同一数据结构同时，

523
00:24:19,858 --> 00:24:23,293
他们都只是行进在这个主队列。

524
00:24:23,361 --> 00:24:27,831
所以，所有UI活动和只有UI活动，没有其他的东西，

525
00:24:27,900 --> 00:24:31,301
一般来说，在UI中运行主队列。

526
00:24:31,370 --> 00:24:33,704
而我们不希望其他东西在运行的原因

527
00:24:33,773 --> 00:24:36,573
主队列，我们​​从不想让主队列被阻止。

528
00:24:36,642 --> 00:24:39,743
我们从来不想让它做一些计算，

529
00:24:39,812 --> 00:24:41,144
当然，从来没有阻止等待

530
00:24:41,213 --> 00:24:43,046
网络或某事

531
00:24:43,115 --> 00:24:43,814
所以这是主要的队列，

532
00:24:43,883 --> 00:24:45,682
这是最重要的队列，然后，

533
00:24:45,751 --> 00:24:47,384
还有其他的队列。

534
00:24:47,452 --> 00:24:49,986
我先谈谈全局队列(global queues)。

535
00:24:50,055 --> 00:24:53,290
全局队列是不同类型的队列。

536
00:24:53,359 --> 00:24:57,061
这些全局排队队伍，人们排队等待，

537
00:24:57,129 --> 00:24:59,596
在系统的另一端，系统有多个

538
00:24:59,665 --> 00:25:01,198
线程准备好了

539
00:25:01,267 --> 00:25:04,067
它可以拉一个闭合线，给它一个线程，

540
00:25:04,136 --> 00:25:06,303
它开始运行，拉另一个关闭，

541
00:25:06,371 --> 00:25:09,072
它在第一个甚至完成之前开始运行。

542
00:25:09,141 --> 00:25:12,209
所以这些被称为并发队列。

543
00:25:12,278 --> 00:25:14,979
你们可以把人拉下线的队列

544
00:25:15,047 --> 00:25:18,415
你有多个线程分配给任务。

545
00:25:19,451 --> 00:25:21,218
所以，我们在UI之外做的事情，

546
00:25:21,287 --> 00:25:24,688
像网络的东西和东西，阻止，我们一般

547
00:25:24,756 --> 00:25:28,392
要在这些全局并发队列中执行这些操作。

548
00:25:28,461 --> 00:25:31,261
您也可以创建自己的串行队列和

549
00:25:31,330 --> 00:25:33,163
你自己的并发队列。

550
00:25:33,232 --> 00:25:34,665
我们会在几张幻灯片中谈论。

551
00:25:34,733 --> 00:25:36,633
你不需要在这个课上这样做。

552
00:25:36,702 --> 00:25:39,803
90％的时间你使用主队列，或者

553
00:25:39,872 --> 00:25:42,772
您正在使用这些全局并发队列之一。

554
00:25:42,841 --> 00:25:45,008
所以让我们来谈谈代码，你如何得到一个队列？

555
00:25:45,077 --> 00:25:47,844
我需要一个队列，因为我想在这个代码块

556
00:25:47,913 --> 00:25:50,614
排队，我想让它排队去跑。

557
00:25:50,682 --> 00:25:51,948
嗯，主队列(主线程)，

558
00:25:52,017 --> 00:25:54,851
你只要使用这个吧DispatchQueue.main。

559
00:25:54,920 --> 00:25:56,620
这是一个静态bar，一个类bar，

560
00:25:56,689 --> 00:25:59,089
在类调度队列上，就是这样，

561
00:25:59,158 --> 00:26:02,325
你有你的主队列，这不容易。

562
00:26:02,394 --> 00:26:05,162
现在，获得这些全局并发队列之一，

563
00:26:05,231 --> 00:26:06,863
多一点工作

564
00:26:06,932 --> 00:26:09,632
您将要使用DispatchQueue.global

565
00:26:09,701 --> 00:26:13,404
的DispatchQueue.main，它在这里有一个参数，QoS。

566
00:26:13,472 --> 00:26:18,275
QoS代表服务质量。

567
00:26:18,343 --> 00:26:21,044
所以这是在谈论如何，什么

568
00:26:21,113 --> 00:26:24,748
线路服务的质量。

569
00:26:24,817 --> 00:26:27,417
所以，高品质的服务意味着事情正在被剥夺

570
00:26:27,486 --> 00:26:30,253
线路真的很快，正在使用的线程

571
00:26:30,322 --> 00:26:33,924
执行它们是高优先级线程，可以运行很多。

572
00:26:33,993 --> 00:26:36,092
Cuz记得只有一个处理器，所以

573
00:26:36,161 --> 00:26:37,962
他们经常有点共享处理器。

574
00:26:38,030 --> 00:26:40,563
所以，高品质的服务意味着你得到很多。

575
00:26:40,632 --> 00:26:43,467
低质量的服务，好的，系统会拉你的

576
00:26:43,535 --> 00:26:46,403
当它感觉像它的东西，也许是手机，

577
00:26:46,471 --> 00:26:48,772
好的，因为其他原因被唤醒了，

578
00:26:48,840 --> 00:26:51,007
它不会唤醒你的手机做这个。

579
00:26:51,076 --> 00:26:54,544
这绝对不会阻碍任何高度重视

580
00:26:54,613 --> 00:26:56,479
事情，那种事情。

581
00:26:56,548 --> 00:27:00,149
所以，服务质量不如数字0，

582
00:27:00,218 --> 00:27:02,919
质量低，10，高品质，相反，

583
00:27:02,988 --> 00:27:05,322
这是一种使用的味道。

584
00:27:05,391 --> 00:27:07,257
这些都是这四项服务质素。

585
00:27:07,326 --> 00:27:11,761
所以用户互动是指用户与之交互的意思

586
00:27:11,830 --> 00:27:15,265
UI现在，通常用手势。

587
00:27:15,334 --> 00:27:18,435
他们正在淘汰，或挤压，你的解雇

588
00:27:18,503 --> 00:27:20,938
一些东西进入一个线程去做某事。

589
00:27:21,006 --> 00:27:24,074
现在，这通常不是你要做的事情

590
00:27:24,143 --> 00:27:26,576
正在做的是非常密集的，它会阻止主要

591
00:27:26,645 --> 00:27:29,613
线程，因为现在正在平移。

592
00:27:29,681 --> 00:27:32,783
但这可能是不能很好的跟上

593
00:27:32,851 --> 00:27:36,152
用手指，你要去处理，

594
00:27:36,221 --> 00:27:39,022
在这个其他线程中，尽量保持最佳的可以和

595
00:27:39,091 --> 00:27:41,357
只要尽可能快地更新主线程，

596
00:27:41,426 --> 00:27:43,660
这可能比手指慢一点点。

597
00:27:43,729 --> 00:27:45,262
所以，你知道，手指拖着，

598
00:27:45,331 --> 00:27:47,897
也许它跳了一点，因为它无法计算

599
00:27:47,966 --> 00:27:49,632
其新位置足够快。

600
00:27:49,701 --> 00:27:52,402
但关键是，这个队列真的需要运行，

601
00:27:52,471 --> 00:27:55,505
几乎一样糟糕，这几乎是主要的优先级

602
00:27:55,574 --> 00:27:58,575
因为你正在做一些互动的事情排队。

603
00:27:58,644 --> 00:28:00,844
好的，下一个是用户启动的。

604
00:28:00,912 --> 00:28:04,381
这是什么意思，用户目前做了什么

605
00:28:04,450 --> 00:28:07,184
启动此活动，可以在此完成

606
00:28:07,253 --> 00:28:09,953
这个队列，所以这是非常重要的。

607
00:28:10,022 --> 00:28:12,789
好的，用户做了一些事情，他们在等待

608
00:28:12,857 --> 00:28:14,090
大概是一个回应。

609
00:28:14,159 --> 00:28:18,562
所以这将是我们的卡西尼项目的类别。

610
00:28:18,630 --> 00:28:22,366
我们点击了地球或土星，我们现在想要这个形象，而且

611
00:28:22,434 --> 00:28:23,633
我们在等待

612
00:28:23,702 --> 00:28:26,336
所以我们要使用，用户启动。

613
00:28:26,405 --> 00:28:28,305
用户发起一个请求。

614
00:28:28,374 --> 00:28:29,206
但是要花点时间，

615
00:28:29,275 --> 00:28:31,808
而且用户没有互动，我们不是

616
00:28:31,876 --> 00:28:34,311
使它每次移动时都会做不同的事情。

617
00:28:34,379 --> 00:28:36,446
我们只是，但它是用户启动的，所以

618
00:28:36,515 --> 00:28:38,648
用户启动是相当高的优先级。

619
00:28:38,717 --> 00:28:40,650
然后有背景和实用程序。

620
00:28:40,719 --> 00:28:41,952
这些有些相似。

621
00:28:42,021 --> 00:28:46,056
实用程序是真正最深入的后台进程。

622
00:28:46,124 --> 00:28:48,625
这可能是您每周在您的应用程序中运行一次。

623
00:28:48,694 --> 00:28:51,194
也许它通过删除旧的来清理数据库

624
00:28:51,263 --> 00:28:52,061
crufty的东西，

625
00:28:52,130 --> 00:28:54,865
用户甚至不知道的事情正在发生。

626
00:28:54,933 --> 00:28:55,732
它的优先级很低，

627
00:28:55,801 --> 00:28:57,267
它只是在后台发生。

628
00:28:57,335 --> 00:28:59,670
背景可能是你，你，

629
00:28:59,738 --> 00:29:02,306
也许你正在想一点点关于

630
00:29:02,374 --> 00:29:04,507
用户可能想要使用您的应用程序的方式。

631
00:29:04,576 --> 00:29:06,509
所以你在后台叉掉一些东西

632
00:29:06,578 --> 00:29:07,744
取一些东西或什么。

633
00:29:07,812 --> 00:29:10,113
用户没有要求你这样做，但你有这样做。

634
00:29:10,181 --> 00:29:12,482
而且你想要它现在，但是

635
00:29:12,551 --> 00:29:15,318
没关系，需要一点时间。

636
00:29:15,387 --> 00:29:16,686
所以你看看那个是什么。

637
00:29:16,755 --> 00:29:18,989
那么这四项服务质素呢？

638
00:29:19,057 --> 00:29:21,658
你只需要选择你想要的服务质量

639
00:29:21,726 --> 00:29:22,893
为您的全球队列。

640
00:29:22,961 --> 00:29:25,362
然后记住你放在那里的东西

641
00:29:25,431 --> 00:29:27,263
将同时运行，所以

642
00:29:27,332 --> 00:29:29,599
他们真的可以依靠彼此。

643
00:29:29,668 --> 00:29:33,036
我会谈谈彼此之间的事情

644
00:29:33,105 --> 00:29:34,254
但是，你想要考虑你所做的事情

645
00:29:34,255 --> 00:29:35,404
一秒。

646
00:29:35,473 --> 00:29:36,974
这些全局队列就是这些

647
00:29:37,042 --> 00:29:39,475
独立小事，喜欢去抓取这个文件，

648
00:29:39,544 --> 00:29:42,179
这一切都是独立的，只是给我这个文件。

649
00:29:42,247 --> 00:29:44,915
不是块，将会是某种方式取决于

650
00:29:44,984 --> 00:29:47,283
对方的结果是因为这是全部并发的，

651
00:29:47,352 --> 00:29:48,852
这些东西可以在同一时间发生，所以

652
00:29:48,920 --> 00:29:51,688
他们不能真的，它不是像主队列一样连续。

653
00:29:53,125 --> 00:29:55,692
现在，就像我说的，你有这个队列，

654
00:29:55,761 --> 00:29:59,462
我们要做的就是把它放在它上面

655
00:29:59,531 --> 00:30:03,834
我们用这两个功能来做异步和同步。

656
00:30:05,270 --> 00:30:08,104
这两个函数有一个参数，这是一个闭包，

657
00:30:08,173 --> 00:30:11,941
一个函数，但通常它是一个闭包，关闭

658
00:30:12,010 --> 00:30:14,645
函数没有参数，并且不返回参数。

659
00:30:16,081 --> 00:30:17,848
你可以把任何你想要的关闭。

660
00:30:19,852 --> 00:30:22,719
所以，异步意味着把这个关闭放在队列上，

661
00:30:22,788 --> 00:30:26,189
把它放在行中执行，并立即返回。

662
00:30:26,258 --> 00:30:28,191
所以async什么也不做

663
00:30:28,260 --> 00:30:32,996
将该块放入队列，无论您发送到哪个队列。

664
00:30:33,065 --> 00:30:35,999
同步，同样的事情，把它放在队列和

665
00:30:36,068 --> 00:30:40,103
那么它说阻止这个线程，直到闭包完成

666
00:30:40,172 --> 00:30:43,373
执行它的任何队列。

667
00:30:43,442 --> 00:30:44,941
这可能是一个完全不同的队列。

668
00:30:45,010 --> 00:30:49,645
所以基本上，同步是阻止我，直到这个闭包

669
00:30:49,714 --> 00:30:53,950
完成无论你放在哪里执行。

670
00:30:54,019 --> 00:30:57,020
所以，你永远不会在主队列上同步，

671
00:30:57,089 --> 00:30:59,089
我们从来不想阻止主队列。

672
00:30:59,157 --> 00:31:02,592
所以，你永远不会说主要的queue.sync任何东西。

673
00:31:02,661 --> 00:31:05,795
但是你可能会有其他队列说，

674
00:31:05,864 --> 00:31:10,834
你知道，对不起，你会说主队列，你可以说main

675
00:31:10,903 --> 00:31:13,736
queue.sync，但你会在另一个线程上说。

676
00:31:13,805 --> 00:31:15,472
你点了一些线程，

677
00:31:15,541 --> 00:31:17,073
它在后台运行。

678
00:31:17,142 --> 00:31:20,110
它可以说mainqueue.sync，这个代码。

679
00:31:20,178 --> 00:31:22,178
现在该代码将被放在主队列中。

680
00:31:22,247 --> 00:31:23,746
有时候，我们不知道什么时候，

681
00:31:23,815 --> 00:31:24,981
它将在主队列上运行。

682
00:31:25,049 --> 00:31:28,352
一旦完成，那么你的线程，

683
00:31:28,420 --> 00:31:32,155
你发出这个的队列会继续下去。

684
00:31:34,993 --> 00:31:38,361
所以同步，我们只会从不在的代码执行同步

685
00:31:38,429 --> 00:31:40,397
主队列，我们​​从来不想阻挡主队列。

686
00:31:40,465 --> 00:31:41,665
问题。

687
00:31:41,733 --> 00:31:44,801
是的，所以问题是，当我说同步，我说，

688
00:31:44,869 --> 00:31:48,238
让这个块，这个闭包首先还是什么？

689
00:31:48,307 --> 00:31:50,540
不，好的，这与优先级无关。

690
00:31:50,609 --> 00:31:52,709
优先考虑的是服务质量。

691
00:31:52,778 --> 00:31:54,211
我只是说这个排队，

692
00:31:54,280 --> 00:31:56,813
这个闭包该队列的末尾。

693
00:31:58,183 --> 00:31:59,582
现在，无论是什么队列，

694
00:31:59,651 --> 00:32:01,151
我们会有一些服务质量

695
00:32:01,220 --> 00:32:03,020
它最终会得到这个东西。

696
00:32:03,088 --> 00:32:05,288
在此期间，虽然发生了一切，

697
00:32:05,356 --> 00:32:11,194
这个代码所在的这个队列正在等待，它被阻止。

698
00:32:11,263 --> 00:32:14,364
它刚刚被阻止，等待闭包完成。

699
00:32:14,432 --> 00:32:16,399
封闭完成完全取决于什么队列

700
00:32:16,468 --> 00:32:18,868
你把它放在了，还有其他的东西在那个队列中，

701
00:32:18,937 --> 00:32:21,905
以及是否并发队列，所有这些事情。

702
00:32:24,243 --> 00:32:27,010
但是这个同步只是阻止我，直到那个事情完成。

703
00:32:28,613 --> 00:32:29,613
问题

704
00:32:29,681 --> 00:32:32,115
所以问题是，运行多个线程，

705
00:32:32,184 --> 00:32:34,551
在多个线程中有多个事情，

706
00:32:34,620 --> 00:32:36,419
它是否减慢主队列线程，

707
00:32:36,488 --> 00:32:38,421
正在运行主队列的线程？

708
00:32:38,489 --> 00:32:40,756
答案是否定的。

709
00:32:40,825 --> 00:32:43,693
它通常不是因为主队列得到的

710
00:32:43,762 --> 00:32:45,428
很多高优先级。

711
00:32:45,497 --> 00:32:48,031
所以这几乎是打断任何东西

712
00:32:48,100 --> 00:32:50,834
其他人正在做什么，只要想运行，好吗？

713
00:32:50,902 --> 00:32:51,868
所以如果要运行，

714
00:32:51,936 --> 00:32:53,636
它几乎得到处理器。

715
00:32:53,705 --> 00:32:57,507
主队列是存在的最高优先级线程

716
00:32:57,576 --> 00:32:59,008
装置。

717
00:32:59,077 --> 00:33:02,079
所以很少会慢下来。

718
00:33:02,147 --> 00:33:05,048
现在，我不会谈论这个，但是，

719
00:33:05,116 --> 00:33:06,883
线程有开销。

720
00:33:06,952 --> 00:33:08,485
如果你创建了数千个线程，

721
00:33:08,553 --> 00:33:10,153
这将开始减慢你的电脑。

722
00:33:10,221 --> 00:33:12,455
但是再次，这就是为什么我们不是在谈论线程。

723
00:33:12,524 --> 00:33:13,456
我们谈论队列

724
00:33:13,525 --> 00:33:16,159
我们让iOS管理线程，它知道如何

725
00:33:16,228 --> 00:33:18,895
有效地管理线程池和类似的东西。

726
00:33:22,067 --> 00:33:25,801
您可以创建自己的队列使用

727
00:33:25,870 --> 00:33:27,804
DispatchQueue的正常初始化程序。

728
00:33:27,873 --> 00:33:29,673
而不是说DispatchQueue.main或

729
00:33:29,741 --> 00:33:32,642
DispatchQueue.global，你说DispatchQueue

730
00:33:32,710 --> 00:33:35,212
初始化程序需要一个标签

731
00:33:35,280 --> 00:33:36,813
串行队列

732
00:33:36,881 --> 00:33:39,950
那个标签就显示在调试器中。

733
00:33:40,018 --> 00:33:41,984
所以在调试器中，如果你暂停和

734
00:33:42,053 --> 00:33:43,887
该队列正在运行一个线程，

735
00:33:43,955 --> 00:33:46,122
你会在小的调试器窗口中看到那个线程

736
00:33:46,191 --> 00:33:48,825
导航仪中的左边用这个名字，这个标签，

737
00:33:48,893 --> 00:33:51,461
所以它只是纯粹在调试器中看到它。

738
00:33:51,530 --> 00:33:53,629
如果你想自己并发队列。

739
00:33:53,698 --> 00:33:56,233
具有多个可以正常工作的线程的队列

740
00:33:56,301 --> 00:33:57,066
在事情上

741
00:33:57,135 --> 00:34:00,936
那么同样的事情，除了你把attributes.concurrent，

742
00:34:01,005 --> 00:34:02,039
在那里的初始化器

743
00:34:03,875 --> 00:34:05,175
你不需要在这个类做到这一点

744
00:34:05,243 --> 00:34:05,875
我们很少这样做。

745
00:34:05,944 --> 00:34:08,411
它通常是主要的队列

746
00:34:08,479 --> 00:34:11,814
全球队列90％的时间。

747
00:34:11,883 --> 00:34:14,584
好的，我只是向你展示绝对的提示

748
00:34:14,652 --> 00:34:16,652
的多线程冰山。

749
00:34:16,721 --> 00:34:19,055
我向你展示了你需要的东西

750
00:34:19,124 --> 00:34:21,757
关闭主线程，但还有很多。

751
00:34:21,826 --> 00:34:24,760
你最后想要熟悉自己

752
00:34:24,829 --> 00:34:27,230
DispatchQueue和所有可以做的事情。

753
00:34:27,299 --> 00:34:29,198
这些东西都是基于一些东西

754
00:34:29,267 --> 00:34:31,134
叫Grand Central Dispatch(GCD)。

755
00:34:31,202 --> 00:34:34,370
因为当我们把一个闭包放在队列上时，

756
00:34:34,439 --> 00:34:38,175
我们称之为将该队列调度到该队列。

757
00:34:41,045 --> 00:34:43,579
对于那些知道多线程的人，

758
00:34:43,648 --> 00:34:45,648
你可以做所有你可以期待的事情，

759
00:34:45,717 --> 00:34:49,018
保护关键部分，readers和writers，你知道，

760
00:34:49,087 --> 00:34:50,820
单个写入多个读取。

761
00:34:50,889 --> 00:34:52,856
你可以做同步调度，可以做锁定，

762
00:34:52,925 --> 00:34:54,291
所有你需要做的事情你可以做。

763
00:34:54,359 --> 00:34:57,561
我不会谈论任何一个，但它都在那里。

764
00:35:01,266 --> 00:35:04,333
还有一个用于执行多线程的API，

765
00:35:04,402 --> 00:35:08,405
OperationQueue和Operation，这些都是类。

766
00:35:08,473 --> 00:35:10,373
类或结构，我猜他们是类。

767
00:35:10,441 --> 00:35:13,142
你会偶尔在iOS API中看到这些，

768
00:35:13,211 --> 00:35:15,011
有点旧的iOS API。

769
00:35:15,079 --> 00:35:17,047
但是，对于你将要做的程序，再次，

770
00:35:17,115 --> 00:35:19,615
除非你有这种多线程问题，哪个

771
00:35:19,684 --> 00:35:22,819
正在做一个并行处理的事情，而不是那种问题

772
00:35:22,887 --> 00:35:25,488
在那里你得到的东西离开主队列。

773
00:35:25,557 --> 00:35:28,758
操作和操作Queue很好，因为它很容易

774
00:35:28,826 --> 00:35:30,326
做依赖。

775
00:35:30,395 --> 00:35:31,661
你在说这个代码块

776
00:35:31,729 --> 00:35:33,696
取决于这一个先跑，

777
00:35:33,765 --> 00:35:36,632
在我可以做到这一点之前，我需要这个结果。

778
00:35:36,701 --> 00:35:38,434
所以你可以设置这些关系，

779
00:35:38,503 --> 00:35:40,703
那么你可以说，现在我刚刚开始运行它们。

780
00:35:40,772 --> 00:35:41,604
和系统

781
00:35:41,673 --> 00:35:44,474
将确保这一个在此之前运行，等等

782
00:35:44,543 --> 00:35:45,375
所有这些依赖。

783
00:35:45,444 --> 00:35:48,545
那就是Operation and OperationQueue。

784
00:35:54,085 --> 00:35:56,653
你会看到一些多线程的方法。

785
00:35:56,654 --> 00:35:59,222
在iOS中，

786
00:35:59,291 --> 00:36:00,856
你会看到在文档中，

787
00:36:00,925 --> 00:36:02,491
您将阅读文档。

788
00:36:02,560 --> 00:36:05,261
它的工作方式是你会看到一种方法

789
00:36:05,330 --> 00:36:08,164
一个关闭作为一个论据，它会在文档中说

790
00:36:08,232 --> 00:36:10,867
此关闭在主队列上的另一个线程上运行。

791
00:36:10,935 --> 00:36:12,168
当你看到，

792
00:36:12,237 --> 00:36:15,905
你必须去，呃哦，因为我把这个关闭的代码

793
00:36:15,974 --> 00:36:19,409
我传递给这个功能不能做任何事情

794
00:36:19,477 --> 00:36:22,678
UI的东西，因为只能发生在主队列。

795
00:36:22,747 --> 00:36:25,481
这发生了很多，我们有一个关闭

796
00:36:25,550 --> 00:36:27,750
我们正在放置一些后台队列，或者

797
00:36:27,819 --> 00:36:29,286
传递到一些iOS功能，

798
00:36:29,354 --> 00:36:32,188
说它不会把它放在主队列上。

799
00:36:32,257 --> 00:36:35,692
但是我们还是想做UI的东西，那我们该怎么做呢？

800
00:36:35,760 --> 00:36:38,761
我们只是把它发回主队列。

801
00:36:38,830 --> 00:36:41,564
这就是这样的。

802
00:36:41,633 --> 00:36:46,669
这是一个iOS API，它将一个闭包作为参数

803
00:36:46,738 --> 00:36:49,606
它运行在主队列的闭包。

804
00:36:49,675 --> 00:36:52,541
我被称为NSURLSession，我用于

805
00:36:52,610 --> 00:36:54,477
获取URL的内容

806
00:36:54,545 --> 00:36:58,547
现在，在我们的图像视图控制器演示中看到，到目前为止，

807
00:36:58,616 --> 00:37:01,017
我们已经知道如何获取URL的内容，

808
00:37:01,086 --> 00:37:03,486
我们只是使用数据内容。

809
00:37:03,555 --> 00:37:05,922
记住，我们说尝试数据内容。

810
00:37:05,990 --> 00:37:09,125
它阻止，阻止主队列，而它和

811
00:37:09,194 --> 00:37:10,126
得到那个URL。

812
00:37:10,195 --> 00:37:11,427
所以这是一个办法。

813
00:37:11,496 --> 00:37:14,631
但它是不可配置的。

814
00:37:14,699 --> 00:37:16,933
关于NSURLSession很酷，

815
00:37:17,001 --> 00:37:20,036
你看到那个参数有configuration.default？

816
00:37:20,105 --> 00:37:21,537
那么你可以改变这个配置。

817
00:37:21,606 --> 00:37:24,040
例如，你可以说，我要获取这个URL，

818
00:37:24,108 --> 00:37:26,876
但不要通过细胞获取。

819
00:37:26,945 --> 00:37:28,611
只有当我碰巧使用Wi-Fi时，才能获取它

820
00:37:28,679 --> 00:37:30,980
网络，例如。

821
00:37:31,049 --> 00:37:32,749
所以你可以配置你希望这个提取发生的方式。

822
00:37:32,818 --> 00:37:35,885
所以这是一种更强大的获取方式

823
00:37:35,954 --> 00:37:37,854
只是说数据内容。

824
00:37:37,923 --> 00:37:42,191
它的工作方式是创建一个NSURLSession，

825
00:37:42,260 --> 00:37:46,962
（这是一个旧的幻灯片，所以它只是被称为URLSession和URL

826
00:37:47,031 --> 00:37:51,768
不是NSURL），但是您可以使用某种配置创建它，

827
00:37:51,837 --> 00:37:55,471
那么你得到你想要的URL，然后你称之为

828
00:37:55,540 --> 00:37:59,042
方法dataTask(with: url)和闭包。

829
00:37:59,110 --> 00:38:03,512
这样做是创建一个dataTask对象。

830
00:38:03,581 --> 00:38:06,082
使用您想要获取的URL，以及何时和

831
00:38:06,151 --> 00:38:08,717
它取消它，或者会在一分钟内。

832
00:38:08,786 --> 00:38:10,386
当你发送它来取得它，

833
00:38:10,455 --> 00:38:13,055
当它回来时，它会称之为闭包

834
00:38:13,124 --> 00:38:14,590
这个闭包有三个参数。

835
00:38:14,659 --> 00:38:17,493
从URL获得的数据，NSURL或

836
00:38:17,562 --> 00:38:20,930
URL响应，然后一些错误，

837
00:38:20,999 --> 00:38:24,400
如果发生了一些错误，试图得到它。

838
00:38:24,469 --> 00:38:27,670
所以，那闭包，所以这个闭包是有趣的cuz它，

839
00:38:27,739 --> 00:38:29,339
文档会告诉你，

840
00:38:29,407 --> 00:38:32,275
此闭包不在主队列上运行。

841
00:38:32,344 --> 00:38:35,878
所以，这是一个问题，因为如果（顺便说一下，简历，

842
00:38:35,947 --> 00:38:37,513
任务在底部，

843
00:38:37,582 --> 00:38:40,516
这实际上是导致它去取得的），

844
00:38:40,585 --> 00:38:43,185
所以dataTask真的不做任何事情

845
00:38:43,254 --> 00:38:46,522
创建任务，然后当你说task.resume它去

846
00:38:46,591 --> 00:38:49,625
闭包在其他线程上获取它，不阻止。

847
00:38:49,694 --> 00:38:51,661
task.resume不会明显阻止。

848
00:38:52,597 --> 00:38:54,196
所以当闭包时，

849
00:38:54,265 --> 00:38:57,033
当数据被获取并且关闭被终止时被调用

850
00:38:57,101 --> 00:38:59,535
在主队列之外的其他队列上。

851
00:38:59,604 --> 00:39:02,338
你想在这里做一些UI，就像你想要显示图像一样

852
00:39:02,406 --> 00:39:04,173
你刚刚获取或什么。

853
00:39:04,242 --> 00:39:06,943
你不能做，因为你不在主队列。

854
00:39:07,912 --> 00:39:09,245
那么，你如何解决呢？

855
00:39:09,314 --> 00:39:13,082
你只是放在这里

856
00:39:13,150 --> 00:39:16,186
关闭，你放在这里，另一个派遣。

857
00:39:17,188 --> 00:39:18,788
回到主队列。

858
00:39:20,158 --> 00:39:24,827
DispatchQueue.main.async与一个闭包。

859
00:39:24,895 --> 00:39:26,295
你把你的UI东西放在那里，

860
00:39:26,364 --> 00:39:29,399
现在它将会在另一方面发生，在主队列中。

861
00:39:31,202 --> 00:39:34,404
所以我们来看看，我想告诉你时机

862
00:39:34,473 --> 00:39:36,905
这个代码的每个步骤都在这里。

863
00:39:36,974 --> 00:39:40,009
所以你可以看看发生了什么事情。

864
00:39:40,078 --> 00:39:43,145
因为多线程是真的很多关于什么时候，和

865
00:39:43,214 --> 00:39:44,880
这是什么时候可以混淆人们的时间

866
00:39:44,949 --> 00:39:46,449
他们正在做多线程。

867
00:39:46,518 --> 00:39:49,852
显然，第一行代码就是让url，

868
00:39:49,921 --> 00:39:52,155
得到url，所以现在我有url。

869
00:39:52,224 --> 00:39:53,889
接下来，我们要创建这个dataTask。

870
00:39:53,958 --> 00:39:56,058
这行代码行B在那里立即返回。

871
00:39:56,127 --> 00:39:58,027
因为它所做的只是创建dataTask，

872
00:39:58,096 --> 00:39:59,595
它实际上没有做任何事情。

873
00:39:59,664 --> 00:40:02,632
你通过封锁，但它是一个非逃脱

874
00:40:02,701 --> 00:40:06,569
闭包，按住它，这个数据任务事情就可以了。

875
00:40:06,638 --> 00:40:10,306
然后你做任务简历，这也立即返回。

876
00:40:10,375 --> 00:40:12,809
但是在不同的队列中，它开始执行提取。

877
00:40:12,877 --> 00:40:16,012
它开始尝试获取该URL的内容。

878
00:40:16,081 --> 00:40:17,012
但是在其他一些队列中呢

879
00:40:17,081 --> 00:40:20,149
这就是为什么在这个队列上，这是主要的排队。

880
00:40:20,218 --> 00:40:21,450
它立即返回，

881
00:40:21,519 --> 00:40:23,085
task.resume立即返回。

882
00:40:23,154 --> 00:40:26,489
所以这意味着H线立即发生

883
00:40:26,558 --> 00:40:29,425
任务恢复后，繁荣打印，

884
00:40:29,494 --> 00:40:31,761
完成了关闭请求。

885
00:40:31,829 --> 00:40:32,895
但是，我们所做的一切都是被解雇的

886
00:40:32,964 --> 00:40:34,097
此时请求的请求。

887
00:40:36,167 --> 00:40:38,901
下一行代码将在此之后发生

888
00:40:38,970 --> 00:40:40,436
是这个。

889
00:40:40,505 --> 00:40:43,072
所以URL内容回来后，

890
00:40:43,140 --> 00:40:45,275
现在这个闭包将要执行。

891
00:40:45,343 --> 00:40:48,177
所以我们要执行行c。

892
00:40:48,245 --> 00:40:51,781
所以a，b，g，和h，他们执行繁荣，繁荣，繁荣，

893
00:40:51,849 --> 00:40:54,550
繁荣，相互依恋，没有延迟。

894
00:40:54,619 --> 00:40:57,419
然后我们走了，有一个延迟

895
00:40:57,488 --> 00:40:59,055
获取URL内容。

896
00:40:59,124 --> 00:41:00,923
这可能是一个很长的延误。

897
00:41:00,992 --> 00:41:03,859
如果它是一个大文件，那可能是一分钟或更多

898
00:41:03,928 --> 00:41:05,227
细胞或类似的东西。

899
00:41:05,296 --> 00:41:08,331
所以这行代码，c，你要小心点。

900
00:41:08,399 --> 00:41:11,300
它可能会发生得很晚，到时候发生，

901
00:41:11,369 --> 00:41:13,469
你可能甚至不在乎了。

902
00:41:13,538 --> 00:41:15,638
如果你有一个非常慢的网络和一个大文件，

903
00:41:15,706 --> 00:41:18,341
在它回来的时候，用户，他们就像，

904
00:41:18,410 --> 00:41:20,476
我甚至不关心它。

905
00:41:20,545 --> 00:41:22,512
所以你，当你回到线c那边，

906
00:41:22,580 --> 00:41:25,014
你最好检查并确保你仍然关心。

907
00:41:27,252 --> 00:41:29,118
合理？

908
00:41:29,186 --> 00:41:31,754
好的，接下来的事情是我们想做一些UI

909
00:41:31,823 --> 00:41:34,356
填写我们收到的数据。

910
00:41:34,425 --> 00:41:35,524
但当然这样做，

911
00:41:35,593 --> 00:41:37,993
我们必须派遣到主队列。

912
00:41:38,062 --> 00:41:40,062
这行代码，行d，

913
00:41:40,131 --> 00:41:45,034
由于异步发送也会立即返回。

914
00:41:45,103 --> 00:41:48,804
它正在做的是将该关闭放在主队列上。

915
00:41:48,873 --> 00:41:51,073
所以这是执行的下一行代码。

916
00:41:51,142 --> 00:41:54,677
通知线e尚未执行。

917
00:41:54,746 --> 00:41:57,213
行f执行，它只是说我做了一些事情

918
00:41:57,282 --> 00:41:59,448
数据，但UI部分还没有发生。

919
00:41:59,517 --> 00:42:03,319
我把它放在队列上，但还没有执行

920
00:42:03,388 --> 00:42:04,854
由主队列。

921
00:42:06,124 --> 00:42:10,893
然后最终UI的东西被拉下来

922
00:42:10,962 --> 00:42:14,163
主队列执行。

923
00:42:14,232 --> 00:42:17,300
每个人都明白这个过程吗？

924
00:42:17,368 --> 00:42:20,903
所以总结一下，它的a，b，g，h，c，d，f，e。

925
00:42:20,972 --> 00:42:23,973
现在这件事呢，

926
00:42:24,041 --> 00:42:27,944
实际上并不一定是这样的。

927
00:42:28,012 --> 00:42:31,914
因为当你从主队列发送东西时

928
00:42:31,983 --> 00:42:35,651
主队列，他们可以马上运行。

929
00:42:35,720 --> 00:42:39,087
所以e可能发生在f之前。

930
00:42:39,156 --> 00:42:41,423
但是如果这是除了主队列之外的其他队列，

931
00:42:41,492 --> 00:42:43,659
在f之前e不太可能发生。

932
00:42:43,728 --> 00:42:45,762
但是甚至可能因为主队列是这样的

933
00:42:45,830 --> 00:42:48,363
当你发送一些东西的时候，

934
00:42:48,432 --> 00:42:51,534
系统可能马上去尝试并处理它。

935
00:42:51,603 --> 00:42:53,269
这是主要队列的高优先级。

936
00:42:53,338 --> 00:42:55,738
所以e可能在f之前发生。

937
00:42:55,807 --> 00:42:58,674
但是，我只是想让你在概念上思考，当你放

938
00:42:58,742 --> 00:43:01,911
队列中的某些东西，你把它放在队列上，

939
00:43:01,980 --> 00:43:03,163
在你之前的主要队列上可能还有其他的事情。

940
00:43:03,164 --> 00:43:04,347
可能会发生。

941
00:43:05,617 --> 00:43:07,650
那么绝对不会马上运行。

942
00:43:09,820 --> 00:43:11,087
那就是多线程的时机。

943
00:43:11,156 --> 00:43:14,623
所以让我们回到我们的Cassini代码，这样做

944
00:43:14,692 --> 00:43:18,761
它使用这些队列来阻止主线程的阻塞

945
00:43:18,829 --> 00:43:21,464
并停止被所有卡住了。

946
00:43:22,634 --> 00:43:27,303
这样做实际上非常简单。

947
00:43:27,372 --> 00:43:29,671
我们要回到我们的imageViewController，

948
00:43:29,740 --> 00:43:31,874
这是致命的代码行。

949
00:43:31,943 --> 00:43:33,042
我甚至发表了评论

950
00:43:33,111 --> 00:43:36,045
这行代码当我发布最后一次如此

951
00:43:36,114 --> 00:43:38,080
你知道这是一个可怕的代码行。

952
00:43:38,149 --> 00:43:40,349
这行代码，如果这样，从现在开始，

953
00:43:40,418 --> 00:43:42,918
如果你用这样的代码行家庭作业，

954
00:43:42,987 --> 00:43:44,520
你会得到主要的叮当声。

955
00:43:44,589 --> 00:43:47,656
因为现在的评估标准之一将不会

956
00:43:47,725 --> 00:43:49,558
更阻塞主队列。

957
00:43:49,627 --> 00:43:50,960
您不能阻止主队列。

958
00:43:51,028 --> 00:43:54,030
那就是所有作业的评估标准

959
00:43:54,099 --> 00:43:56,565
未来和您的最终项目。

960
00:43:56,634 --> 00:44:00,836
好的，所以我们有这个可怕的事情，我们不能

961
00:44:00,905 --> 00:44:03,272
做这样的代码行，这样cuz它阻止主队列，

962
00:44:03,341 --> 00:44:04,340
那我们要做什么呢？

963
00:44:04,409 --> 00:44:08,978
我们只是把这个调用放在另一个队列上。

964
00:44:09,047 --> 00:44:13,182
我会通过说DispatchQueue.global来做这个，

965
00:44:13,251 --> 00:44:14,750
我会得到一个全局的，

966
00:44:14,819 --> 00:44:17,853
这些全局并发队列之一。

967
00:44:17,922 --> 00:44:22,224
它要求我的服务质量。

968
00:44:22,293 --> 00:44:24,894
而用户发起了这个请求，但是

969
00:44:24,963 --> 00:44:28,731
它不是互动的，所以我会说userInitiated，

970
00:44:28,800 --> 00:44:30,499
那里的选择。

971
00:44:30,568 --> 00:44:34,236
现在我已经拥有了我想要的队列，而我也是这样

972
00:44:34,305 --> 00:44:37,807
异步地发布我想做的代码，

973
00:44:37,876 --> 00:44:41,444
这个代码阻塞到该全局队列上。

974
00:44:41,512 --> 00:44:44,447
而在某个时候，这个全局队列将会分配

975
00:44:44,515 --> 00:44:47,183
一个线程，并抓住这个闭包它开始运行。

976
00:44:48,653 --> 00:44:50,619
现在这样快了，但是

977
00:44:50,688 --> 00:44:51,988
不一定立即。

978
00:44:52,991 --> 00:44:54,289
所以现在我已经解决了这个问题，

979
00:44:54,358 --> 00:44:55,924
哎哟，这是主队列。

980
00:44:55,993 --> 00:44:57,560
不再阻塞主队列，因为这样，

981
00:44:57,629 --> 00:44:58,761
它在主队列上执行，

982
00:44:58,830 --> 00:45:00,263
因为所有这些代码都在主队列中。

983
00:45:00,331 --> 00:45:02,932
我们正在执行我们的所有代码

984
00:45:03,000 --> 00:45:07,202
主队列。

985
00:45:07,271 --> 00:45:09,438
这将立即返回。

986
00:45:09,506 --> 00:45:12,842
它是异步的，所以它立即返回，它只是这样

987
00:45:14,078 --> 00:45:16,178
关闭队列并立即返回。

988
00:45:16,247 --> 00:45:18,381
所以没有阻塞主队列，优秀。

989
00:45:18,449 --> 00:45:21,050
但是你注意到这里有一点错误。

990
00:45:21,119 --> 00:45:23,252
我们来看看吧，那是什么东西？

991
00:45:23,321 --> 00:45:27,223
是的，提到自己在一个闭包。

992
00:45:27,291 --> 00:45:29,258
你必须明确地把自己这样做

993
00:45:29,326 --> 00:45:31,627
你考虑内存周期。

994
00:45:32,930 --> 00:45:37,233
事实上，这里有一个糟糕的记忆周期。

995
00:45:37,301 --> 00:45:40,769
因为这个关闭，如果你记得，这是发生

996
00:45:40,838 --> 00:45:43,672
因为我点击了土星或卡西尼或地球。

997
00:45:43,741 --> 00:45:46,943
它已经关闭，为我创建了一个ImageViewController，

998
00:45:47,011 --> 00:45:50,045
并且ImageView控制器被放在屏幕上

999
00:45:50,114 --> 00:45:52,481
它是要去取得这个东西。

1000
00:45:52,550 --> 00:45:55,217
现在如果用户喜欢，我很累等待

1001
00:45:55,286 --> 00:45:59,122
地球图像，他们回击，然后点击土星。

1002
00:46:01,058 --> 00:46:01,990
当他们回来时，

1003
00:46:02,059 --> 00:46:05,161
该ImageViewController应该发生什么？

1004
00:46:07,798 --> 00:46:09,331
任何人？

1005
00:46:09,400 --> 00:46:11,634
>>应该离开堆，好的。

1006
00:46:11,703 --> 00:46:13,202
因为它是在导航控制器下

1007
00:46:13,271 --> 00:46:14,269
顶部，我回来了。

1008
00:46:14,338 --> 00:46:17,807
噢，把它折腾出来，可以离开吗？

1009
00:46:17,876 --> 00:46:20,809
不，因为这个闭包是保持它

1010
00:46:20,878 --> 00:46:24,847
堆即使我不想再这样了。

1011
00:46:24,915 --> 00:46:26,816
我回去了，因为我现在要去看看

1012
00:46:26,885 --> 00:46:27,950
土星，而不是地球，所以

1013
00:46:28,018 --> 00:46:30,118
我甚至不想要这个地球的东西了。

1014
00:46:30,187 --> 00:46:32,154
所以这是一种糟糕的内存循环

1015
00:46:32,222 --> 00:46:36,959
将ImageViewController保留在内存中，这样做不好。

1016
00:46:37,028 --> 00:46:38,394
所以这不想这样做，所以

1017
00:46:38,463 --> 00:46:41,297
我们会用weak self来解决这个问题。

1018
00:46:42,566 --> 00:46:44,967
顺便说一句，你知道，我表明你可以做，

1019
00:46:45,036 --> 00:46:46,768
weak self等于self。

1020
00:46:46,837 --> 00:46:49,472
但是当你使用weak时，我是个人的粉丝

1021
00:46:49,541 --> 00:46:50,806
self只是说weak self。

1022
00:46:50,875 --> 00:46:54,543
所有这一切都是在这个闭包的内部，它使

1023
00:46:54,612 --> 00:46:59,381
自己是自己的可选版本，现在它现在很weak。

1024
00:46:59,450 --> 00:47:02,518
所以这意味着我必须这样做，因为如果我终于做到了

1025
00:47:02,586 --> 00:47:05,921
从这个关闭回来，这个人已经回击了，

1026
00:47:05,989 --> 00:47:09,558
那么ImageViewController将会离开堆。

1027
00:47:09,627 --> 00:47:14,530
所以自我没有，完美，正是我想要的。

1028
00:47:14,599 --> 00:47:17,967
如果self是nil，我做这个可选的链接，

1029
00:47:18,035 --> 00:47:20,135
那么这整行代码不会发生，

1030
00:47:20,204 --> 00:47:21,704
正是我想要的

1031
00:47:21,772 --> 00:47:23,572
我不想创建一个图像

1032
00:47:23,641 --> 00:47:25,140
回来的信息。

1033
00:47:25,209 --> 00:47:26,908
因为ImageViewController有

1034
00:47:26,977 --> 00:47:28,643
离开堆

1035
00:47:28,712 --> 00:47:31,613
所以在这里我已经把这个内存周期好转了。

1036
00:47:31,682 --> 00:47:33,715
现在，这确实提出了这个问题，

1037
00:47:33,784 --> 00:47:36,319
惊讶没有人举手。

1038
00:47:37,321 --> 00:47:38,988
如何中断这个闭包？

1039
00:47:39,056 --> 00:47:42,291
当我回击，ImageViewController消失了，

1040
00:47:42,360 --> 00:47:44,360
我不再对地球感兴趣了，

1041
00:47:44,429 --> 00:47:48,597
我还在完成地球的获取。

1042
00:47:48,666 --> 00:47:51,833
答案是，你不能停止闭包

1043
00:47:51,902 --> 00:47:54,703
这是放在队列上，你不能阻止它。

1044
00:47:54,772 --> 00:47:58,173
它可以停止的唯一方法是如果它退出自己。

1045
00:47:58,242 --> 00:48:00,843
所以它可能在看一些全局性的状态，看看是不是

1046
00:48:00,911 --> 00:48:01,977
还是相关的

1047
00:48:02,046 --> 00:48:03,879
如果看到，我不再相关了，

1048
00:48:03,947 --> 00:48:05,081
它可以返回。

1049
00:48:05,149 --> 00:48:07,215
所以如果这是做一些很长的事情。

1050
00:48:07,284 --> 00:48:08,417
可以这样做

1051
00:48:08,486 --> 00:48:11,220
或者你可以使用像NSUrlSession这样的东西

1052
00:48:11,289 --> 00:48:14,089
这对于获取URL真的很聪明。

1053
00:48:14,158 --> 00:48:16,691
它知道如何中断

1054
00:48:16,760 --> 00:48:17,593
所有这样的事情

1055
00:48:17,662 --> 00:48:20,062
所以你可以做一些比这更聪明的事情

1056
00:48:20,131 --> 00:48:21,096
一行代码。

1057
00:48:21,165 --> 00:48:24,300
但是一旦这样做排队，它就会运行。

1058
00:48:26,403 --> 00:48:30,039
所以决定不运行就可以了。

1059
00:48:31,141 --> 00:48:33,008
所以我们解决了这个问题，但是

1060
00:48:33,077 --> 00:48:34,677
这里还有更多的问题。

1061
00:48:38,449 --> 00:48:41,283
如果这需要一分钟会发生什么，

1062
00:48:41,352 --> 00:48:45,053
或十分钟因为网络速度慢。

1063
00:48:45,122 --> 00:48:47,823
我们回来了，在此期间，

1064
00:48:47,892 --> 00:48:51,527
有人在我的ImageViewController上调用了这个。

1065
00:48:51,595 --> 00:48:53,095
现在，我们的卡西尼不能这样做，但是

1066
00:48:53,164 --> 00:48:54,262
你可以想象一个应用程序

1067
00:48:54,331 --> 00:48:56,632
将在ImageViewController中显示某些内容。

1068
00:48:56,700 --> 00:48:58,433
然后你点击某些东西

1069
00:48:58,502 --> 00:49:02,004
ImageViewController本身并显示不同的URL。

1070
00:49:03,206 --> 00:49:04,607
所以有人叫这个。

1071
00:49:04,675 --> 00:49:07,810
如果我再说一遍，那就要下去了

1072
00:49:07,878 --> 00:49:11,380
fetchImage再次，这是在这里，它会dispatch

1073
00:49:11,448 --> 00:49:14,350
另一个闭包去得到新的图像。

1074
00:49:16,187 --> 00:49:18,754
所以现在有两个闭包在那里提取。

1075
00:49:18,823 --> 00:49:21,223
现在第一个回来会发生什么？

1076
00:49:21,291 --> 00:49:22,458
我想用这个形象做什么？

1077
00:49:23,961 --> 00:49:24,760
忽略它。

1078
00:49:24,828 --> 00:49:27,095
因为这个人说他们想要一个新的。

1079
00:49:27,164 --> 00:49:30,566
所以在这回来之后，我最好把东西放在这里

1080
00:49:30,635 --> 00:49:33,902
看看我是否还在乎，这很容易。

1081
00:49:33,971 --> 00:49:40,910
我可以说例如image == self？.imageURL。

1082
00:49:40,978 --> 00:49:45,080
所以我很抱歉url == self？.imageURL。

1083
00:49:45,148 --> 00:49:47,916
所以我只是看这个url，这是在这里，

1084
00:49:47,985 --> 00:49:49,819
被这个闭包所捕获。

1085
00:49:49,887 --> 00:49:52,454
这个闭包已经捕获了这个URL。

1086
00:49:52,523 --> 00:49:56,825
我只是要检查这个url是否等于什么

1087
00:49:56,894 --> 00:49:58,627
我们当前的网址是。

1088
00:49:58,696 --> 00:50:01,464
如果我不在那里，那就没事了。

1089
00:50:01,532 --> 00:50:03,399
这将是nil。所以如果我能等于nil，和

1090
00:50:03,468 --> 00:50:04,533
好了！

1091
00:50:04,601 --> 00:50:06,502
所以在这里我只是在那里做一点测试

1092
00:50:06,570 --> 00:50:08,771
确定我仍然对该网址感兴趣。

1093
00:50:10,041 --> 00:50:11,674
大家能明白这里发生了什么吗？

1094
00:50:11,742 --> 00:50:13,508
其中url = imageURL，

1095
00:50:13,577 --> 00:50:18,247
这是一个常数，在这里被捕获的常数。

1096
00:50:18,315 --> 00:50:21,383
所以我一直是我们去的URL

1097
00:50:21,452 --> 00:50:22,952
得到的内容。

1098
00:50:24,355 --> 00:50:28,124
Ther是另一个问题。

1099
00:50:28,192 --> 00:50:30,226
任何人都可以告诉我这个代码的另一个问题，

1100
00:50:30,294 --> 00:50:31,127
明显的问题？

1101
00:50:34,265 --> 00:50:35,164
我刚刚在幻灯片中给你看。

1102
00:50:35,232 --> 00:50:37,232
在这里，

1103
00:50:37,301 --> 00:50:43,139
self？.image会在这里调用这个代码。

1104
00:50:44,274 --> 00:50:46,175
那会做各种UI的东西。

1105
00:50:47,578 --> 00:50:49,344
它将设置scrollView的内容大小，

1106
00:50:49,413 --> 00:50:51,480
imageView的大小，imageView的图像的大小。

1107
00:50:51,548 --> 00:50:53,481
这是所有UI的东西。

1108
00:50:53,550 --> 00:50:55,317
这需要发生什么？

1109
00:50:55,386 --> 00:50:56,185
在主队列中

1110
00:50:57,922 --> 00:51:00,422
这是在这里的主要排队吗？

1111
00:51:00,490 --> 00:51:05,027
不，这是这个队列在这里，这个全局队列，

1112
00:51:05,096 --> 00:51:07,495
userInitiated全局队列。

1113
00:51:07,564 --> 00:51:10,031
那就是这一切都在发生，所以

1114
00:51:10,100 --> 00:51:12,000
这不是主要的队列。

1115
00:51:12,069 --> 00:51:13,302
所以这是非法的。

1116
00:51:13,371 --> 00:51:15,671
这将在您的应用程序中引起各种奇怪的行为

1117
00:51:15,739 --> 00:51:16,304
如果你这样做

1118
00:51:16,373 --> 00:51:19,275
但容易装配，固定，

1119
00:51:19,343 --> 00:51:24,479
我们只需要调用DispatchQueue.main.async和

1120
00:51:24,548 --> 00:51:27,850
把它放回主队列。

1121
00:51:30,555 --> 00:51:35,824
现在这个语法真的很酷，

1122
00:51:35,893 --> 00:51:40,896
我想你会说，做这些事情是

1123
00:51:40,965 --> 00:51:46,502
它在逻辑上看起来像正常代码。

1124
00:51:46,570 --> 00:51:49,705
对，这几乎就像是如果那样或者什么。

1125
00:51:49,774 --> 00:51:52,675
但是，你必须明白，当你这样做

1126
00:51:52,743 --> 00:51:55,577
像这样的调度，这将是异步发生的。

1127
00:51:55,646 --> 00:51:58,113
它会在不同的时间发生

1128
00:51:58,182 --> 00:52:00,482
比其余代码。

1129
00:52:00,551 --> 00:52:01,584
与此同样的事情

1130
00:52:01,652 --> 00:52:02,351
这会发生一点点不同的时间。

1131
00:52:02,419 --> 00:52:03,319
当然，事情

1132
00:52:03,387 --> 00:52:05,720
你放在主队列上往往跑得很快。

1133
00:52:05,789 --> 00:52:10,992
但是即使如此，你只需要认识到这一点

1134
00:52:11,061 --> 00:52:13,495
即使看起来这行代码将会发生，

1135
00:52:13,564 --> 00:52:15,497
那么这条线，那么这条线，那么这条线，

1136
00:52:15,566 --> 00:52:16,798
那么这条线，就不会发生。

1137
00:52:16,867 --> 00:52:18,400
它会像幻灯片一样发生，对，

1138
00:52:18,468 --> 00:52:21,270
那里的事情发生了一点点不顺利

1139
00:52:21,338 --> 00:52:23,205
因为事情是异步发生的。

1140
00:52:23,274 --> 00:52:25,474
异步意味着异步，超时，

1141
00:52:25,543 --> 00:52:30,078
正确，不同，不及时排队。

1142
00:52:30,147 --> 00:52:30,980
大家都明白了吗?

1143
00:52:32,917 --> 00:52:34,316
我们来看看这是否解决了我们所有的问题。

1144
00:52:38,688 --> 00:52:41,189
所以记住，这里我们没有形象。

1145
00:52:41,258 --> 00:52:43,692
顺便说一下，这是一个可怕的问题

1146
00:52:43,760 --> 00:52:45,394
出现空白

1147
00:52:45,462 --> 00:52:47,763
我上周实际上提到我会去的

1148
00:52:47,832 --> 00:52:49,765
让你额外的信用，找出如何不

1149
00:52:49,833 --> 00:52:51,666
让你的计算器空白，拥有它

1150
00:52:51,735 --> 00:52:54,069
拿出计算器，而不是空图。

1151
00:52:54,138 --> 00:52:56,004
但我决定，我会告诉你如何

1152
00:52:56,073 --> 00:52:56,838
今天做

1153
00:52:56,907 --> 00:52:57,772
这就是为什么我没有

1154
00:52:57,841 --> 00:52:59,574
在作业中增加额外的功劳。

1155
00:52:59,643 --> 00:53:01,576
但无论如何，所以这里的细节。

1156
00:53:01,645 --> 00:53:02,711
我们没有选择一个图像，所以它是空白的。

1157
00:53:02,779 --> 00:53:04,413
现在我要回去了

1158
00:53:04,481 --> 00:53:05,314
这是我们的Cassini viewController。

1159
00:53:05,382 --> 00:53:08,283
现在我要选择地球，它正在加载，但是

1160
00:53:08,352 --> 00:53:10,085
我改变主意了。

1161
00:53:10,154 --> 00:53:12,187
土星改变了主意。

1162
00:53:12,256 --> 00:53:14,823
因为我现在可以改变主意

1163
00:53:14,892 --> 00:53:16,892
那些东西在一些其他的线程中被抓取。

1164
00:53:16,961 --> 00:53:20,328
现在如果我等待足够长的时间，他们会得到它并返回。

1165
00:53:20,397 --> 00:53:21,062
所以一切就成了现在这样了。

1166
00:53:21,131 --> 00:53:25,300
我在这里有卡西尼

1167
00:53:25,369 --> 00:53:28,871
如果我再回到地球，我再次放弃。

1168
00:53:28,939 --> 00:53:34,476
土星，我会等等，我们会看看我们是否得到土星。

1169
00:53:34,545 --> 00:53:37,179
顺便说一句，土星，这是一个奇怪的，我不认为

1170
00:53:37,248 --> 00:53:39,914
卡西尼在这里拍了这张照片，这张照片的人。

1171
00:53:39,983 --> 00:53:43,986
但是等一下，看看，那里有土星。

1172
00:53:47,691 --> 00:53:50,225
关于这个应用程序的一件事情，那是坏事

1173
00:53:50,294 --> 00:53:53,429
我点击这个，我得到这个白色的屏幕。

1174
00:53:53,497 --> 00:53:55,998
特别是在这样一个大的形象，我们得到这个白色

1175
00:53:56,066 --> 00:53:57,866
屏幕，它是白色的屏幕，它是白色的屏幕。

1176
00:53:57,935 --> 00:53:59,334
这就像这个应用程序发生了什么？

1177
00:53:59,403 --> 00:54:00,970
我甚至不明白发生了什么。

1178
00:54:02,740 --> 00:54:04,606
这真的很酷，如果我可以给用户一些

1179
00:54:04,675 --> 00:54:07,942
关于发生什么的反馈。

1180
00:54:08,011 --> 00:54:11,479
现在这个反馈可能是加载的东西

1181
00:54:11,548 --> 00:54:13,248
点点点或点。

1182
00:54:13,316 --> 00:54:15,350
但是当你在等待时，真的很酷的反馈

1183
00:54:15,419 --> 00:54:17,185
有些是旋转，有点旋转。

1184
00:54:17,254 --> 00:54:19,054
你看过那些spinners吗？

1185
00:54:19,122 --> 00:54:21,289
有很多应用程序有这个有一点微调。

1186
00:54:21,358 --> 00:54:22,924
所以我们来添加一个spinner到我们的应用程序

1187
00:54:22,993 --> 00:54:26,361
当我们点击这里，这是一个小东西旋转

1188
00:54:26,430 --> 00:54:29,531
直到出现图像，然后它消失。

1189
00:54:29,600 --> 00:54:32,667
原来是难以置信的容易做，

1190
00:54:32,736 --> 00:54:35,470
因为这是一个常见的事情，想做的就是给予

1191
00:54:35,539 --> 00:54:36,304
用户反馈。

1192
00:54:36,373 --> 00:54:38,573
是的，我听到你，我正在努力，但是

1193
00:54:38,642 --> 00:54:39,475
我还没有

1194
00:54:40,611 --> 00:54:41,142
我们该怎么做？

1195
00:54:41,211 --> 00:54:43,845
我们回到我们的故事板。

1196
00:54:43,914 --> 00:54:46,881
这就是我们要做的事情

1197
00:54:46,950 --> 00:54:48,617
viewController就在这里。

1198
00:54:48,686 --> 00:54:51,619
这是我们的scrollView与我们的一点

1199
00:54:51,688 --> 00:54:53,021
imageView在那里。

1200
00:54:53,090 --> 00:54:55,457
我们可以做的只是在这里和

1201
00:54:55,526 --> 00:54:56,191
得到一个对象。

1202
00:54:56,260 --> 00:54:58,594
它被称为活动指示器视图。

1203
00:54:58,662 --> 00:55:01,797
这里就是这里，查看活动指标视图。

1204
00:55:01,866 --> 00:55:05,333
我只是把它拖入我的UI，

1205
00:55:05,402 --> 00:55:07,235
就在中间

1206
00:55:07,304 --> 00:55:10,305
现在我刚刚做的是一件非常糟糕的事情。

1207
00:55:10,373 --> 00:55:14,476
它看起来很好，但它是非常糟糕的。

1208
00:55:14,545 --> 00:55:16,745
对于为什么它是坏的，这有点微妙

1209
00:55:16,814 --> 00:55:19,447
让我们深入了解一下这个是坏的

1210
00:55:19,516 --> 00:55:20,682
我拖着那里。

1211
00:55:20,751 --> 00:55:23,519
我们会看到它的坏处是带来

1212
00:55:23,587 --> 00:55:27,121
第一次出现这个文件大纲。

1213
00:55:27,190 --> 00:55:29,725
我告诉你的左下角的这个小东西是我们的

1214
00:55:29,793 --> 00:55:32,227
要谈谈，在这里我们正在谈论它。

1215
00:55:32,296 --> 00:55:35,497
这是我们的故事板中的一切

1216
00:55:35,566 --> 00:55:39,567
轮廓形式，文字形式。

1217
00:55:39,636 --> 00:55:41,303
当我们这样做时，

1218
00:55:41,371 --> 00:55:44,172
我们在这个活动指标视图中看下来。

1219
00:55:44,241 --> 00:55:45,507
顺便说一句，如果你在这里选择一些东西，

1220
00:55:45,576 --> 00:55:47,509
它会在这里选择它，反之亦然。

1221
00:55:47,578 --> 00:55:50,111
所以这是选择，所以它显示在这里。

1222
00:55:50,180 --> 00:55:53,114
你看这些东西，这是所有的意见，这是

1223
00:55:53,183 --> 00:55:57,452
顶级视图，即控件中的视图var。

1224
00:55:57,521 --> 00:56:01,022
那么这里是我们制作的scrollView，

1225
00:56:01,091 --> 00:56:02,624
那么这里是指标视图。

1226
00:56:02,693 --> 00:56:04,460
我们看到这些是如何缩进的，

1227
00:56:04,528 --> 00:56:06,295
这意味着他们是彼此的子视图。

1228
00:56:07,731 --> 00:56:10,499
所以我们做了灰色的活动指标

1229
00:56:10,567 --> 00:56:14,936
我们的滚动视图的子视图，我们不希望在这里。

1230
00:56:15,005 --> 00:56:17,305
我们希望我们的滚动视图滚动我们的图像，

1231
00:56:17,374 --> 00:56:20,075
我们不希望它滚动我们的指标。

1232
00:56:20,143 --> 00:56:21,777
我们希望指标留在中间。

1233
00:56:23,847 --> 00:56:27,649
我们不希望它成为滚动视图的子视图，

1234
00:56:27,718 --> 00:56:29,351
我们希望它是一个兄弟姐妹。

1235
00:56:29,420 --> 00:56:31,352
我们希望他们都处于同一水平，

1236
00:56:31,421 --> 00:56:32,954
一个在另一个之前。

1237
00:56:33,023 --> 00:56:36,291
我们可以这样做，只是在这里拿起来，

1238
00:56:36,360 --> 00:56:39,227
并将其移动到与Scroll View相同的级别。

1239
00:56:39,296 --> 00:56:42,331
现在这里很难做，因为任何时候你尝试

1240
00:56:42,399 --> 00:56:45,333
拿起它来移动它，它总是要尝试

1241
00:56:45,402 --> 00:56:48,303
并且放入一个子视图或一个父视图的东西，所以

1242
00:56:48,372 --> 00:56:50,372
它总是要抓住它。

1243
00:56:50,440 --> 00:56:52,540
但在本文档中，这很简单。

1244
00:56:52,609 --> 00:56:56,377
你可以拿起来把它移动到那里。

1245
00:56:56,446 --> 00:56:59,948
所以，当您在将来执行这些活动指标视图时

1246
00:57:00,017 --> 00:57:01,883
应用程序和最终项目中，

1247
00:57:01,952 --> 00:57:03,952
确保你不会意外地使它成为一个子

1248
00:57:04,021 --> 00:57:05,988
查看你拖动它的东西。

1249
00:57:06,056 --> 00:57:07,088
如果你打算的话

1250
00:57:07,157 --> 00:57:08,990
请注意订单在这里重要。

1251
00:57:09,059 --> 00:57:11,159
这是他们，顺序和

1252
00:57:11,227 --> 00:57:13,561
记住子视图中的零是在后面，而且

1253
00:57:13,630 --> 00:57:15,296
所有其他的都在前面。

1254
00:57:15,365 --> 00:57:17,466
所以我们显然希望这个活动指标

1255
00:57:17,535 --> 00:57:19,535
在前面，在一切的前面。

1256
00:57:21,005 --> 00:57:22,437
好的，那就是这样。

1257
00:57:22,506 --> 00:57:26,875
现在我们想做的是我们想要打这个活动

1258
00:57:26,944 --> 00:57:29,845
指标在这里直到我们的代码。

1259
00:57:29,913 --> 00:57:31,446
为什么？因为我们必须告诉它

1260
00:57:31,515 --> 00:57:32,214
开始运行

1261
00:57:32,282 --> 00:57:33,648
或者甚至在我们这样做之前，

1262
00:57:33,717 --> 00:57:35,150
我们来配置一下。

1263
00:57:35,219 --> 00:57:37,986
我们已经在这里，我们可以检查它。

1264
00:57:38,054 --> 00:57:40,689
这是检查员，请参阅活动指标视图。

1265
00:57:40,758 --> 00:57:43,558
对于这个大的看法，我看起来有点小。

1266
00:57:43,627 --> 00:57:45,259
所以我会改用另一种

1267
00:57:45,328 --> 00:57:47,496
这是大白。

1268
00:57:47,565 --> 00:57:49,430
但我实际上并不希望它是白色的

1269
00:57:49,499 --> 00:57:50,799
因为背景是白色的

1270
00:57:50,868 --> 00:57:54,502
所以我会改变它的颜色，Iet说蓝色。

1271
00:57:54,571 --> 00:57:56,238
所以这可以是大而蓝色。

1272
00:57:56,306 --> 00:57:59,708
另外，每当我停止动画，我想要它

1273
00:57:59,776 --> 00:58:02,143
隐藏自己，因为我不想让它停止

1274
00:58:02,212 --> 00:58:03,812
旋转，坐在那里显示。

1275
00:58:03,881 --> 00:58:06,448
任何时候停止，我希望它消失。

1276
00:58:06,517 --> 00:58:07,916
那么如果我重新开始，它会重新出现。

1277
00:58:07,985 --> 00:58:09,284
所以这就是这个按钮。

1278
00:58:09,353 --> 00:58:12,053
这个动画将意味着它会出现

1279
00:58:12,122 --> 00:58:12,921
动画，但

1280
00:58:12,990 --> 00:58:16,124
我会在任何时候我做一个背景提取。

1281
00:58:16,193 --> 00:58:19,727
所以我不想让它想出这个视图动画

1282
00:58:19,796 --> 00:58:20,695
已经。

1283
00:58:20,764 --> 00:58:21,797
这就是这些意思。

1284
00:58:22,999 --> 00:58:24,532
要打开它，我需要和它谈谈，所以

1285
00:58:24,601 --> 00:58:26,301
我需要一个outlet。

1286
00:58:26,370 --> 00:58:29,304
所以我只是控制它的拖动，就像任何其他

1287
00:58:29,373 --> 00:58:31,706
出口我们会做一个按钮或任何。

1288
00:58:31,775 --> 00:58:32,674
这里是。

1289
00:58:32,743 --> 00:58:35,344
我会把它叫做spinner，这就是我喜欢的调用

1290
00:58:35,412 --> 00:58:37,513
我的UI activity indicators，spinner。

1291
00:58:38,915 --> 00:58:40,982
那里有我的spinner outlet。

1292
00:58:41,051 --> 00:58:44,252
我所需要做的就是每当我做这件事

1293
00:58:44,321 --> 00:58:48,056
去另一个线程去做某事。

1294
00:58:48,125 --> 00:58:50,992
所以这里是我去另一个线程的地方

1295
00:58:51,060 --> 00:58:55,497
有事情，所以我只是说spinner.startAnimating。

1296
00:58:55,565 --> 00:58:56,765
那就要开始旋转了。

1297
00:58:56,833 --> 00:58:58,666
如果它隐藏起来，它将会被取消隐藏

1298
00:58:58,735 --> 00:58:59,635
开始旋转

1299
00:59:00,904 --> 00:59:01,470
问题？

1300
00:59:04,708 --> 00:59:07,943
>>动画只是让那个蓝色的东西走了

1301
00:59:08,012 --> 00:59:09,545
它只是像所有的旋转器一样旋转。

1302
00:59:09,546 --> 00:59:11,079
一圈

1303
00:59:12,449 --> 00:59:15,884
好的，当我在这里检查过的时候。

1304
00:59:15,953 --> 00:59:18,987
而且我做了，我没有点击这个按钮动画，

1305
00:59:19,056 --> 00:59:21,823
这只是意味着它不会从动画开始。

1306
00:59:21,892 --> 00:59:25,894
我必须在代码中启动它，这就是这个意思。

1307
00:59:25,963 --> 00:59:26,794
如果我打开它，

1308
00:59:26,863 --> 00:59:29,030
那么一旦我的应用程序出现，它将是动画，

1309
00:59:29,099 --> 00:59:29,831
我不想要那个。

1310
00:59:29,899 --> 00:59:32,700
我不想让它开始动画，直到我这样做

1311
00:59:32,769 --> 00:59:34,636
调度到其他队列，

1312
00:59:34,705 --> 00:59:37,605
那就是我想让它开始动画。

1313
00:59:37,674 --> 00:59:40,975
现在，你可能会想像停止动画的地方

1314
00:59:41,044 --> 00:59:42,644
可能就在这里。

1315
00:59:42,713 --> 00:59:47,148
spinner.stopAnimating，但这样会有意义。

1316
00:59:47,217 --> 00:59:50,419
因为你知道，我去了去看这个形象

1317
00:59:50,487 --> 00:59:52,620
它回来了，我设定了形象。

1318
00:59:52,689 --> 00:59:54,923
现在我可以停止动画。

1319
00:59:54,992 --> 00:59:57,492
但实际上我不想在这里做。

1320
00:59:57,561 --> 01:00:00,895
那是因为我想停止动画

1321
01:00:00,964 --> 01:00:02,797
任何时候设置图像。

1322
01:00:02,866 --> 01:00:05,466
如果在我的图像视图控制器中设置了一个图像，

1323
01:00:05,535 --> 01:00:06,901
我想停止动画。

1324
01:00:06,970 --> 01:00:08,770
我不在乎它是如何设定的。

1325
01:00:08,839 --> 01:00:11,306
如果它从我的东西回来，那很好。

1326
01:00:11,375 --> 01:00:13,174
如果有人设定说，

1327
01:00:13,243 --> 01:00:17,379
图像网址等于本地URL，我也想停止。

1328
01:00:17,448 --> 01:00:19,180
所以我会把它放在这里一个形象。

1329
01:00:19,249 --> 01:00:20,615
这里是我们设置我们的形象的地方。

1330
01:00:20,684 --> 01:00:22,450
这是它的一部分。

1331
01:00:22,519 --> 01:00:26,421
我只是在这里说，停止。

1332
01:00:26,489 --> 01:00:29,091
所以，任何时候，我的形象都是我会停止动画

1333
01:00:29,159 --> 01:00:31,059
如果图像在那里，那将是没有意义的

1334
01:00:31,128 --> 01:00:32,727
事情是动画。

1335
01:00:32,796 --> 01:00:33,895
这绝对没有意义

1336
01:00:33,964 --> 01:00:36,064
要显示的图像，并同时动画化。

1337
01:00:36,133 --> 01:00:37,365
因为动画

1338
01:00:37,434 --> 01:00:39,034
这件事意味着我在等待一个图像。

1339
01:00:40,804 --> 01:00:41,803
得到它了？

1340
01:00:41,871 --> 01:00:44,105
触摸它，这就是你要做的spinners，

1341
01:00:44,174 --> 01:00:45,339
他们超级超级简单。

1342
01:00:45,408 --> 01:00:48,342
当你在其他事情上做事时，他们才有意义

1343
01:00:48,411 --> 01:00:50,178
线程与spinner。

1344
01:00:50,247 --> 01:00:53,614
如果你是我，那么如果你没有在另外一个人做某事

1345
01:00:53,683 --> 01:00:55,316
线程那么为什么会这样？

1346
01:00:55,385 --> 01:00:56,117
看，现在看。

1347
01:00:56,186 --> 01:00:58,586
这出来了，它是空白的，但它不旋转

1348
01:00:58,655 --> 01:01:00,422
因为我还没有要求任何东西。

1349
01:01:00,490 --> 01:01:03,224
所以我会回到这里，我会问地球。

1350
01:01:03,293 --> 01:01:05,894
在做可选的价值时说没有。

1351
01:01:05,962 --> 01:01:06,627
那还不错

1352
01:01:06,696 --> 01:01:08,896
这里发生了什么？

1353
01:01:08,965 --> 01:01:11,299
啊，是的，好的。

1354
01:01:11,368 --> 01:01:12,433
好的，所以这个崩溃了。

1355
01:01:12,502 --> 01:01:13,634
为什么这个崩溃？

1356
01:01:13,703 --> 01:01:15,770
为什么我们在这里有问题？

1357
01:01:15,839 --> 01:01:20,809
这里的答案是，当我设置

1358
01:01:20,878 --> 01:01:25,747
这张图像我在准备中。

1359
01:01:28,018 --> 01:01:31,486
当我准备的时候，我的outlet没有设置。

1360
01:01:32,923 --> 01:01:36,792
所以我需要可选的链条就在那里。

1361
01:01:36,860 --> 01:01:39,393
所以这个崩溃，你会得到它很多，

1362
01:01:39,462 --> 01:01:42,930
你准备的东西和崩溃。

1363
01:01:42,999 --> 01:01:45,833
在准备期间崩溃，因为你试图设置

1364
01:01:45,902 --> 01:01:46,568
你的outlet

1365
01:01:46,637 --> 01:01:49,537
现在，这个spinner没有设定好了，

1366
01:01:49,606 --> 01:01:53,007
我设置的图像，因为我从来没有启动它

1367
01:01:53,076 --> 01:01:54,609
在这种情况下。

1368
01:01:54,677 --> 01:01:59,247
所以一切都很好，只是忽略设置图像，当我

1369
01:01:59,315 --> 01:02:00,382
准备。

1370
01:02:01,618 --> 01:02:03,385
每个人都有那个？

1371
01:02:03,453 --> 01:02:07,389
你们都有，在你的iOS职业生涯中有数百次

1372
01:02:07,457 --> 01:02:10,458
你有一些你准备的代码，

1373
01:02:10,527 --> 01:02:12,393
执行使用outlet。

1374
01:02:12,462 --> 01:02:14,162
好的，让我们现在回去，我们打地球。

1375
01:02:14,231 --> 01:02:15,263
看到它在旋转。

1376
01:02:15,332 --> 01:02:18,833
一旦图像放在这里，它停止旋转，

1377
01:02:18,901 --> 01:02:20,401
好吧，没了

1378
01:02:20,470 --> 01:02:22,537
好的，回到这里，旋转。

1379
01:02:22,606 --> 01:02:23,605
是的，我们不想要它。

1380
01:02:23,674 --> 01:02:27,642
我们来这里，在这里跳过。

1381
01:02:32,449 --> 01:02:35,083
现在，我想做的最后一件事就是这件事，

1382
01:02:35,151 --> 01:02:37,586
当事情启动时，它启动空白。

1383
01:02:41,157 --> 01:02:44,058
好吧，它开始是空白的，因为它在细节上。

1384
01:02:44,127 --> 01:02:45,526
我不想在细节上

1385
01:02:45,595 --> 01:02:48,230
当没有图像URL的时候。

1386
01:02:48,298 --> 01:02:52,133
我想要在这里启动，如果我第一次开始。

1387
01:02:52,202 --> 01:02:53,368
好的，那我该怎么做呢？

1388
01:02:53,437 --> 01:02:57,772
我将使用分割视图控制器来执行此操作。

1389
01:02:57,841 --> 01:03:00,575
如果我们在这里看看我们的故事板。

1390
01:03:00,644 --> 01:03:03,311
我要使用这个拆分的代表

1391
01:03:03,380 --> 01:03:05,613
查看控制器在这里。

1392
01:03:05,682 --> 01:03:09,784
因为这个拆分视图控制器要求委托，

1393
01:03:09,853 --> 01:03:14,890
你想做的是崩溃的主要工作

1394
01:03:14,958 --> 01:03:16,524
视图，二次视图控制器，

1395
01:03:16,593 --> 01:03:19,694
你知道detail，在master之上？

1396
01:03:19,762 --> 01:03:22,764
好吧，那我们给我机会这样做。

1397
01:03:22,833 --> 01:03:26,868
我要做的是，如果没有图像URL在那里，

1398
01:03:26,937 --> 01:03:30,104
我会说我做的，但我不会做任何事情。

1399
01:03:30,173 --> 01:03:32,774
这样做不会使细节崩溃

1400
01:03:32,842 --> 01:03:33,742
在master的顶部。

1401
01:03:35,245 --> 01:03:38,613
现在，我需要有一个视图控制器是分裂的

1402
01:03:38,682 --> 01:03:40,482
查看控制器的代理。

1403
01:03:40,550 --> 01:03:43,684
我真的不能这样在这里

1404
01:03:43,753 --> 01:03:45,720
因为这一个来了。

1405
01:03:45,788 --> 01:03:46,921
这是图像视图控制器。它被创建

1406
01:03:46,990 --> 01:03:50,024
当它消失时，当你离开时，它停止。

1407
01:03:50,093 --> 01:03:51,359
你把它从堆里扔出来。

1408
01:03:51,428 --> 01:03:54,662
所以我不能抛出我的拆分视图控制器的委托

1409
01:03:54,731 --> 01:03:56,364
所有的时间都在堆里，所以

1410
01:03:56,433 --> 01:03:59,534
相反，我将把这个视图控制器作为我的分裂

1411
01:03:59,603 --> 01:04:01,436
查看控制器的代理。

1412
01:04:02,872 --> 01:04:03,971
好嘞

1413
01:04:04,040 --> 01:04:06,507
这是我的CassiniViewController。

1414
01:04:06,576 --> 01:04:09,477
现在，将自己设为自己的分裂是一个好地方

1415
01:04:09,546 --> 01:04:11,779
查看控制器的代理？

1416
01:04:11,848 --> 01:04:13,214
你可能会在视图中做到这一点

1417
01:04:13,283 --> 01:04:14,883
负载，这将工作。

1418
01:04:14,951 --> 01:04:15,983
但我认为更好，

1419
01:04:16,052 --> 01:04:18,153
更安全的地方是aweakFromNib。

1420
01:04:19,990 --> 01:04:21,522
Cuz awakeFromNib如果你记得从

1421
01:04:21,591 --> 01:04:24,192
ViewController的生命周期很早就被称为

1422
01:04:24,261 --> 01:04:25,226
在游戏里。

1423
01:04:25,295 --> 01:04:31,065
所以如果我想设置我自己的splitViewController的

1424
01:04:31,134 --> 01:04:34,236
代理我自己，代理。

1425
01:04:36,472 --> 01:04:39,040
这真的很早就这样做了。

1426
01:04:39,108 --> 01:04:40,876
现在在这里注意到我正在拿我的

1427
01:04:40,944 --> 01:04:44,111
自己的splitViewController可能是nil，

1428
01:04:44,180 --> 01:04:45,980
因为我可能不在一个splitViewController中。

1429
01:04:46,049 --> 01:04:48,283
我正在为自己设定代理。

1430
01:04:49,786 --> 01:04:51,819
记住，每个ViewController都有这个bar

1431
01:04:51,888 --> 01:04:54,522
splitViewController是splitViewController，

1432
01:04:54,591 --> 01:04:55,589
它在如果它在一个。

1433
01:04:55,658 --> 01:04:58,259
所以我在这里得到一个错误，

1434
01:04:58,328 --> 01:05:00,761
谁知道这个错误是什么？

1435
01:05:00,830 --> 01:05:03,898
没有人？

1436
01:05:03,967 --> 01:05:07,835
它表示您不能分配一个CassiniViewController

1437
01:05:07,904 --> 01:05:11,806
成为UISplitViewControllerDelegate。

1438
01:05:11,875 --> 01:05:14,743
你不能让这一点相等，那是因为这样

1439
01:05:14,811 --> 01:05:17,712
CassiniViewController不是UISplitViewDelegate。

1440
01:05:17,781 --> 01:05:21,516
UISplitViewControllerDelegate。

1441
01:05:21,584 --> 01:05:24,853
我们不得不说这是一个UISplitViewControllerDelegate。

1442
01:05:26,789 --> 01:05:30,258
好的，一旦我们说了，那就解决了这个错误。

1443
01:05:30,327 --> 01:05:33,027
该协议中的所有方法都是可选的。

1444
01:05:33,095 --> 01:05:34,896
所以，我们已经满足了协议，

1445
01:05:34,964 --> 01:05:36,964
这有点奇怪

1446
01:05:37,033 --> 01:05:38,833
但现在我们可以实现我们想要的任何一个。

1447
01:05:38,902 --> 01:05:39,734
这是一个诡计。

1448
01:05:39,803 --> 01:05:41,836
如果你想，如果你是一个代理和

1449
01:05:41,905 --> 01:05:43,872
你想知道什么方法，

1450
01:05:43,941 --> 01:05:46,474
只需开始输入类的名称。

1451
01:05:46,543 --> 01:05:47,642
所以这里是splitView和

1452
01:05:47,710 --> 01:05:50,044
这里是所有的splitViewControllerDelegates。

1453
01:05:50,113 --> 01:05:51,512
你必须首先做这个部分。

1454
01:05:51,581 --> 01:05:53,515
你不得不说你是第一个代理。

1455
01:05:53,583 --> 01:05:55,750
一旦你这样做，它会显示所有这些，对，

1456
01:05:55,818 --> 01:05:58,085
这些都是splitViewDelegate可以做的事情。

1457
01:05:58,154 --> 01:06:01,189
我们希望这个在这顶上。

1458
01:06:01,258 --> 01:06:02,990
折叠到primary。

1459
01:06:03,059 --> 01:06:04,558
所以我要双击那个。

1460
01:06:04,627 --> 01:06:09,497
我会告诉你这些论点有点容易看到，如果我这样做

1461
01:06:09,566 --> 01:06:10,231
这个。

1462
01:06:12,369 --> 01:06:20,141
那就是这一个。

1463
01:06:20,210 --> 01:06:22,176
所以这个splitViewControllerDelegate

1464
01:06:22,245 --> 01:06:24,712
方法有三个参数，一个是发件人(sender)，

1465
01:06:24,781 --> 01:06:27,181
这是splitViewController询问你。

1466
01:06:27,250 --> 01:06:29,851
在这里，请问我请崩溃

1467
01:06:29,919 --> 01:06:33,888
这个secondaryViewController，这是一个细节

1468
01:06:33,956 --> 01:06:36,824
这个主视图控件是主。

1469
01:06:36,893 --> 01:06:40,561
所以这当我们第一次启动时会发生什么，一个空白的细节

1470
01:06:40,630 --> 01:06:44,465
被放在主人的头上，我们不想要这个。

1471
01:06:44,534 --> 01:06:48,770
但是，如果这个细节是空白的，我们只想不要。

1472
01:06:48,838 --> 01:06:54,074
所以我要去这里说如果PrimaryViewController

1473
01:06:54,143 --> 01:06:57,112
是我自己，因为如果PrimaryViewController不是

1474
01:06:57,180 --> 01:06:59,413
我自己，那里的东西在这里走了奇怪，

1475
01:06:59,482 --> 01:07:00,214
但应该是。

1476
01:07:00,283 --> 01:07:03,717
所以我会说如果PrimaryViewController.conte-

1477
01:07:03,786 --> 01:07:07,856
nts，因为我可能在导航控制器中等于

1478
01:07:07,924 --> 01:07:10,425
我自己，记得内容是这里的东西。

1479
01:07:11,461 --> 01:07:12,860
所以，我在那里做。

1480
01:07:12,929 --> 01:07:16,497
然后我说如果我可以让ImageViewController相等

1481
01:07:16,566 --> 01:07:20,334
secondaryViewController，这是细节。

1482
01:07:20,403 --> 01:07:21,636
这就是这个参数。

1483
01:07:21,705 --> 01:07:22,803
它可以传给我，

1484
01:07:22,872 --> 01:07:27,509
这是要求我崩溃的事情。

1485
01:07:27,577 --> 01:07:31,545
SecondaryViewController作为ImageViewController。

1486
01:07:31,614 --> 01:07:34,448
再次，我想做内容。

1487
01:07:34,517 --> 01:07:36,518
那就是NavigationController里面。

1488
01:07:37,887 --> 01:07:38,853
还不止这些。

1489
01:07:38,922 --> 01:07:41,488
这不只是我有一个ImageViewController

1490
01:07:41,557 --> 01:07:43,157
要求在我的顶部倒塌。

1491
01:07:43,226 --> 01:07:46,795
但我想确保那个IVC的imageURL。

1492
01:07:49,032 --> 01:07:51,399
等于nil

1493
01:07:51,467 --> 01:07:54,402
所以如果splitViewController要我崩溃

1494
01:07:54,471 --> 01:07:57,538
一个具有空白图像的ImageViewController，

1495
01:07:57,607 --> 01:08:02,043
我要回复说，是的，我做到了。

1496
01:08:02,112 --> 01:08:03,511
但我实际上并不会做任何事情。

1497
01:08:03,580 --> 01:08:05,713
因为我不想要这样做。

1498
01:08:05,782 --> 01:08:09,250
所以我有点想要这个splitViewController。

1499
01:08:09,318 --> 01:08:11,419
否则我会返回false，这意味着不，

1500
01:08:11,488 --> 01:08:14,155
我不能做这个崩溃，所以你这样做。

1501
01:08:14,224 --> 01:08:19,093
现在，splitViewController会自己做。

1502
01:08:19,161 --> 01:08:23,431
所以有点时髦，但我只是想给你看看，

1503
01:08:23,499 --> 01:08:26,734
告诉你有一些更复杂的方法

1504
01:08:26,803 --> 01:08:28,469
做事情，然后我有时会显示。

1505
01:08:28,538 --> 01:08:29,304
但看看发生了什么。

1506
01:08:29,372 --> 01:08:35,043
我跑了，我没有得到那个空白的ViewController。

1507
01:08:35,111 --> 01:08:36,611
因为我告诉splitViewController

1508
01:08:36,680 --> 01:08:39,480
我在那里倒塌了，但我没有这样做

1509
01:08:39,548 --> 01:08:40,448
它什么也没做。

1510
01:08:40,517 --> 01:08:43,250
但是如果我现在点击一个，图像url不是零，所以

1511
01:08:43,319 --> 01:08:45,019
它为我做了崩溃。

1512
01:08:47,991 --> 01:08:51,659
好的，就这样。

1513
01:08:51,727 --> 01:08:56,498
让我们回到我们的幻灯片，在这里做最后一个话题。

1514
01:08:59,569 --> 01:09:01,135
我们的输入框是哪个。

1515
01:09:01,204 --> 01:09:02,636
所以我只是在这里扔在输入框，

1516
01:09:02,705 --> 01:09:06,507
你会是，它将被包括在我们的下一个演示和

1517
01:09:06,576 --> 01:09:10,077
在你的下一个任务中，这是一个很容易的小类，

1518
01:09:10,146 --> 01:09:11,278
的UITextField。

1519
01:09:11,347 --> 01:09:13,113
它与UILabel非常相似。

1520
01:09:13,182 --> 01:09:14,549
不同之处在于它是可编辑的。

1521
01:09:15,751 --> 01:09:18,553
UILabel，如果你触摸它，没有任何反应。

1522
01:09:18,621 --> 01:09:20,321
但是你做UITextField，如果你触摸它，

1523
01:09:20,390 --> 01:09:23,858
有一点闪烁的光标发生，键盘会发生

1524
01:09:23,926 --> 01:09:26,361
从底部上来，你可以使用你的拇指和

1525
01:09:26,429 --> 01:09:29,630
键入，或者如果您有一个带有物理键盘的iPad，

1526
01:09:29,699 --> 01:09:30,732
你可以输入或者其他的。

1527
01:09:32,502 --> 01:09:34,135
这就是所有的UITextField。

1528
01:09:34,204 --> 01:09:36,871
现在因为它是可编辑的，它有一点点

1529
01:09:36,939 --> 01:09:39,440
与UILabel有很大的不同。

1530
01:09:39,509 --> 01:09:42,076
它仍然有归因文本，

1531
01:09:42,145 --> 01:09:44,312
你可以设置字体，所有这些东西，

1532
01:09:44,380 --> 01:09:47,848
因为它非常像UILabel那样。

1533
01:09:47,917 --> 01:09:51,285
但是有这个键盘，好的，当你在

1534
01:09:51,353 --> 01:09:56,391
UITextField，你触摸它，它带来一个键盘。

1535
01:09:56,459 --> 01:09:59,294
那么该键盘如何显示并不显示？

1536
01:09:59,362 --> 01:10:03,431
那么键盘显示任何时间，任何视图，

1537
01:10:03,500 --> 01:10:06,501
在视图层次结构中，成为第一个响应者或

1538
01:10:06,569 --> 01:10:07,701
所谓的第一响应者。

1539
01:10:07,770 --> 01:10:11,072
第一反应者意味着它是要做的事情

1540
01:10:11,140 --> 01:10:12,807
从键盘获取关键事件，

1541
01:10:12,876 --> 01:10:16,343
这是重要事件的第一响应者。

1542
01:10:16,412 --> 01:10:19,947
您可以使您的UITextField启动它光标闪烁

1543
01:10:20,016 --> 01:10:22,684
通过发送它的消息使键盘上来

1544
01:10:22,752 --> 01:10:24,418
第一响应者。

1545
01:10:24,487 --> 01:10:26,721
如果你告诉你的UITextField成为第一个响应者，

1546
01:10:26,790 --> 01:10:27,888
键盘会出现，所以

1547
01:10:27,957 --> 01:10:30,758
这就是你如何使键盘在这里。

1548
01:10:30,827 --> 01:10:33,494
同样地，如果你希望键盘走开

1549
01:10:33,563 --> 01:10:36,564
闪烁的插入符号就会消失，比如说resignFirstResponder

1550
01:10:36,632 --> 01:10:39,534
到当前第一个响应者的TextField

1551
01:10:39,602 --> 01:10:40,434
它会消失。

1552
01:10:40,503 --> 01:10:42,136
这就是你如何控制键盘。

1553
01:10:42,205 --> 01:10:45,406
UITextField有一个委托。

1554
01:10:45,474 --> 01:10:47,641
它实际上有十个代表方法。

1555
01:10:47,710 --> 01:10:49,710
可以做很多有趣的事情。

1556
01:10:49,778 --> 01:10:53,213
例如，当键盘出现时，大多数键盘，

1557
01:10:53,282 --> 01:10:55,516
在右下角有一个Return键。

1558
01:10:57,120 --> 01:10:58,919
当你点击Return键时，

1559
01:10:58,988 --> 01:11:00,487
你得到这个委托方法。

1560
01:11:00,556 --> 01:11:02,723
文本字段显示返回，它返回一个bool。

1561
01:11:02,791 --> 01:11:04,158
基本上说，

1562
01:11:04,227 --> 01:11:07,094
我应该按照通常的做法做什么？

1563
01:11:07,163 --> 01:11:09,162
因为文本字段也是控件，

1564
01:11:09,231 --> 01:11:10,398
他们可以做目标行动。

1565
01:11:11,701 --> 01:11:13,033
所以这是一个问你这里，

1566
01:11:13,102 --> 01:11:14,602
我今天应该采取什么行动

1567
01:11:14,671 --> 01:11:17,204
你知道，一些控制拖到一个IBaction，

1568
01:11:17,273 --> 01:11:18,539
我应该发送吗

1569
01:11:18,608 --> 01:11:20,908
这是什么问题在这里我应该返回。

1570
01:11:20,977 --> 01:11:23,911
但有一件事你可以做，应该返回你可能会回来

1571
01:11:23,980 --> 01:11:26,781
是的，但您也可能会重新启用FirstFirstResponder。

1572
01:11:26,850 --> 01:11:28,015
因为当它命中Return，

1573
01:11:28,083 --> 01:11:29,283
你希望键盘走开。

1574
01:11:29,352 --> 01:11:31,318
否则键盘不会消失

1575
01:11:31,387 --> 01:11:32,553
当它命中Return。

1576
01:11:32,622 --> 01:11:33,821
即使你有target action，

1577
01:11:33,890 --> 01:11:36,290
它不会使该键盘消失。

1578
01:11:36,359 --> 01:11:38,826
这是很常见的，你想实现一个输入框

1579
01:11:38,894 --> 01:11:39,726
代理，

1580
01:11:39,795 --> 01:11:42,630
只要让键盘离开，当你打回来。

1581
01:11:44,467 --> 01:11:47,235
TextField有什么其他代理方法？

1582
01:11:47,303 --> 01:11:51,405
你可以发现每次辞职的第一反应者。

1583
01:11:51,474 --> 01:11:54,174
它会发送它的委托方法didEndEditing。

1584
01:11:54,243 --> 01:11:56,944
所以这是一个很好的方法来找出来，我最好得到文字

1585
01:11:57,013 --> 01:11:59,113
在那里，去做一些事情。

1586
01:11:59,182 --> 01:12:01,449
因为有人打了return，或者

1587
01:12:01,517 --> 01:12:04,785
做了一些导致resignFirstResponder发生的事情

1588
01:12:04,854 --> 01:12:06,787
所以这个方法被发送给你。

1589
01:12:06,856 --> 01:12:08,956
其实这可能是一个比较常见的方法

1590
01:12:09,025 --> 01:12:10,524
从文本字段中获取文本

1591
01:12:10,593 --> 01:12:14,461
那么目标/动作就是实现其代理。

1592
01:12:14,530 --> 01:12:18,265
在最终的编辑中，你可以把文本从那里拿出来。

1593
01:12:18,334 --> 01:12:19,500
或者你甚至可以抓住它

1594
01:12:19,569 --> 01:12:21,536
在那里应该返回，如果你想要的。

1595
01:12:22,872 --> 01:12:24,138
所以输入框是一个控件。

1596
01:12:24,207 --> 01:12:27,207
您可以执行目标操作，只需按住Ctrl即可。

1597
01:12:27,276 --> 01:12:29,510
它有某些事件可能导致目标行动发生

1598
01:12:29,579 --> 01:12:30,611
就像一个按钮。

1599
01:12:30,680 --> 01:12:33,513
并且您可以右键单击故事板中的输入框

1600
01:12:33,582 --> 01:12:35,416
看看它能做什么

1601
01:12:35,484 --> 01:12:39,052
键盘，你可以改变键盘的种类。

1602
01:12:39,121 --> 01:12:42,056
键盘，例如，有一个键盘

1603
01:12:42,125 --> 01:12:45,525
输入URL，那里有一个按钮.com。

1604
01:12:45,594 --> 01:12:47,794
我觉得甚至有一个按钮，HTTP这样

1605
01:12:47,863 --> 01:12:50,431
您可以快速输入URL。

1606
01:12:50,499 --> 01:12:52,733
还有另一个网址就像一个电话拨号器，

1607
01:12:52,801 --> 01:12:55,369
这是键盘，或另一个键盘。

1608
01:12:55,438 --> 01:12:56,704
就像一个电话拨号器，所以

1609
01:12:56,773 --> 01:12:58,772
它只是数字或其他。

1610
01:12:58,841 --> 01:13:00,174
所以你可以指定。

1611
01:13:00,242 --> 01:13:01,942
你指定这些东西的方式是你

1612
01:13:02,011 --> 01:13:05,379
不要向任何键盘对象发送任何消息。

1613
01:13:05,447 --> 01:13:07,981
您将它发送到使用键盘的任何对象

1614
01:13:08,050 --> 01:13:10,584
实现协议UITextInputTraits。

1615
01:13:10,653 --> 01:13:13,988
UITextInputTraits是一个协议

1616
01:13:14,057 --> 01:13:16,924
所有这些东西都在这里显示

1617
01:13:16,993 --> 01:13:20,594
当你发送到像文本字段的东西

1618
01:13:20,663 --> 01:13:24,265
它配置其键盘来匹配。

1619
01:13:26,002 --> 01:13:27,802
如果要在输入框中自动更正，

1620
01:13:27,871 --> 01:13:30,671
你打字的时候你错了，

1621
01:13:30,740 --> 01:13:32,940
它会自动更正，你可以得到它。

1622
01:13:33,008 --> 01:13:36,610
只要把你的自动校正类型放在你身上

1623
01:13:36,679 --> 01:13:37,477
输入框

1624
01:13:37,546 --> 01:13:40,081
所以你发送这些，这些vars在输入框。

1625
01:13:40,149 --> 01:13:44,184
但是它们在文本字段上，因为输入框实现

1626
01:13:44,253 --> 01:13:47,554
UITextInputTraits协议。

1627
01:13:47,623 --> 01:13:49,356
你可以做安全的文本

1628
01:13:49,425 --> 01:13:52,059
密码和所有这些东西。

1629
01:13:52,127 --> 01:13:53,527
换句话说，如果你想控制你的

1630
01:13:53,596 --> 01:13:55,830
键盘，不要看文字字段本身，

1631
01:13:55,899 --> 01:13:57,965
看看这个UITextInputTrait协议，和

1632
01:13:58,033 --> 01:14:01,635
你会看到你可以为你的键盘做什么

1633
01:14:01,704 --> 01:14:04,204
您也可以在键盘上设置附件视图，

1634
01:14:04,273 --> 01:14:07,942
沿着键盘顶部的一个小视图，只是为了

1635
01:14:08,010 --> 01:14:09,009
你的应用程序

1636
01:14:09,078 --> 01:14:09,677
这很有趣

1637
01:14:09,745 --> 01:14:10,811
你再次，

1638
01:14:10,880 --> 01:14:13,347
只是TextInputTraits协议的东西。

1639
01:14:14,850 --> 01:14:15,783
键盘有一件事，

1640
01:14:15,851 --> 01:14:19,086
实际上我不会因为时间而谈论这个。

1641
01:14:19,155 --> 01:14:21,555
我们稍后再讲一下这个。

1642
01:14:21,624 --> 01:14:24,124
但是键盘上来时实际上覆盖了

1643
01:14:24,193 --> 01:14:25,426
你的意见

1644
01:14:25,494 --> 01:14:28,161
所以你最好确保输入框不在下面

1645
01:14:28,230 --> 01:14:29,230
键盘。

1646
01:14:29,298 --> 01:14:30,965
否则键盘会出现

1647
01:14:31,034 --> 01:14:32,500
人们无法输入您的文字。

1648
01:14:32,569 --> 01:14:34,969
我看到很多最终的项目，这样做，

1649
01:14:35,038 --> 01:14:36,603
你有你的漂亮的UI和

1650
01:14:36,672 --> 01:14:39,206
那里有很多文本字段。

1651
01:14:39,275 --> 01:14:41,975
而你的底部有一些文本字段

1652
01:14:42,044 --> 01:14:44,545
屏幕和当我尝试运行你的应用程序，并做到这一点

1653
01:14:44,613 --> 01:14:46,814
我点击它，我正在一个真正的设备上运行它，

1654
01:14:46,882 --> 01:14:49,984
没有键盘我无法在模拟器中输入。

1655
01:14:50,052 --> 01:14:52,653
有一件事当你在做文字字段时，要小心

1656
01:14:52,722 --> 01:14:55,222
因为在模拟器中，您只需键入键盘即可。

1657
01:14:55,291 --> 01:14:57,892
但是在现实世界中，键盘会滑出来

1658
01:14:57,960 --> 01:14:59,360
从底部。

1659
01:14:59,428 --> 01:15:01,962
所以学生经常会做最后的项目

1660
01:15:02,030 --> 01:15:03,297
整个事情在模拟器中。

1661
01:15:03,365 --> 01:15:05,732
他们只是在设备上几乎没有做到这一点

1662
01:15:05,801 --> 01:15:07,601
绝对需要您的最终项目的方式。

1663
01:15:07,669 --> 01:15:11,004
他们把它变成了，而且他们变得很辛苦

1664
01:15:11,073 --> 01:15:13,607
因为我无法使用他们的应用程序。

1665
01:15:13,676 --> 01:15:16,176
因为这个键盘出现并覆盖了输入框

1666
01:15:16,245 --> 01:15:19,279
他们想让我输入文字。

1667
01:15:19,348 --> 01:15:21,249
你找到关于键盘的方式

1668
01:15:21,317 --> 01:15:24,819
使用这些观察者的地方。

1669
01:15:24,887 --> 01:15:27,387
你基本上会观察窗户，而且

1670
01:15:27,456 --> 01:15:30,724
窗口会给你这个小的通知

1671
01:15:30,793 --> 01:15:33,527
说，嘿，键盘刚刚上来，并在通知中

1672
01:15:33,596 --> 01:15:34,962
这是发送给你的，那将是信息

1673
01:15:35,030 --> 01:15:38,032
关于键盘用来覆盖你的矩形，

1674
01:15:38,100 --> 01:15:41,402
你必须将你的UI移出来。

1675
01:15:41,471 --> 01:15:44,338
希望你在一个可滚动的东西，如桌子

1676
01:15:44,407 --> 01:15:46,440
查看或只是滚动视图。

1677
01:15:46,509 --> 01:15:49,643
但如果不是，那么你只需要移动，设置你的框架

1678
01:15:49,712 --> 01:15:52,713
父视图或东西将东西移动。

1679
01:15:52,782 --> 01:15:54,548
因为你有责任确保

1680
01:15:54,616 --> 01:15:56,617
键盘没有覆盖的东西

1681
01:15:56,686 --> 01:15:57,585
必须到用户界面。

1682
01:15:57,654 --> 01:16:01,288
所以当你在做最后的项目时

1683
01:16:01,357 --> 01:16:03,891
在设备上执行

1684
01:16:03,959 --> 01:16:05,993
否则你很可能遇到这个问题。

1685
01:16:06,062 --> 01:16:07,762
所以我们来谈谈这些观察者，

1686
01:16:07,830 --> 01:16:10,430
这些通知发送者和未来的演讲内容。

1687
01:16:10,499 --> 01:16:13,600
没有其他输入框属性

1688
01:16:13,669 --> 01:16:16,637
与键盘相关，就像它自动收缩一样

1689
01:16:16,705 --> 01:16:18,405
我们用UI标签看到的所有东西都是这样的

1690
01:16:18,474 --> 01:16:20,841
你可以用文本框来控制那些东西。

1691
01:16:20,910 --> 01:16:23,945
我会让你看看文档，把所有的东西都弄出来。

1692
01:16:25,581 --> 01:16:28,949
文本字段还有一些右侧和左侧的附件视图。

1693
01:16:29,018 --> 01:16:31,852
这些小的概述像一个搜索按钮。

1694
01:16:31,921 --> 01:16:35,456
还是少一点，你可以在那里放一点感叹号，

1695
01:16:35,525 --> 01:16:36,757
像这样的东西。

1696
01:16:36,825 --> 01:16:37,825
所以你也可以寻找。

1697
01:16:37,893 --> 01:16:40,661
就这样吧。

1698
01:16:40,730 --> 01:16:42,863
星期三我会做TableView。

1699
01:16:42,932 --> 01:16:44,999
大的旧的演讲与大的旧的演示。

1700
01:16:45,068 --> 01:16:46,433
这就是你的作业将要做的。

1701
01:16:46,502 --> 01:16:49,569
星期五，我们有一个部分将要进行

1702
01:16:49,638 --> 01:16:52,406
我想在主讲中教授的CollectionView

1703
01:16:52,475 --> 01:16:53,940
因为它真的是一个重要的课。

1704
01:16:54,009 --> 01:16:57,177
它非常像TableView，但更灵活，

1705
01:16:57,246 --> 01:16:59,246
比TableView强大一点。

1706
01:16:59,315 --> 01:17:00,914
你需要先了解TableView，

1707
01:17:00,983 --> 01:17:02,483
这就是为什么我们在星期三做TableView

1708
01:17:02,551 --> 01:17:04,418
然后在星期五的CollectionView。

1709
01:17:04,487 --> 01:17:06,987
那么下周我会做面向对象的数据库，

1710
01:17:07,056 --> 01:17:09,556
称为核心数据，您将集成到您的

1711
01:17:09,625 --> 01:17:11,959
作业4让你的作业5。

1712
01:17:12,028 --> 01:17:13,594
就这样，看到你。

1713
01:17:15,264 --> 01:17:25,572
>>更多请访问stanford.edu。

